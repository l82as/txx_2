<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>TX Library: Исходный файл TXLib.h</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript">
$(document).ready(initResizable);
</script>
<link href="doxygen_.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Создано системой Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="TXLib.png"></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">TX Library&#160;<span id="projectnumber">Help &ndash; Version: 00172a, Revision: 104</span></div>
   <div id="projectbrief"><s>&nbsp;ALL&nbsp;</s> Windows graphics in a sandbox</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('a00025.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<h1>TXLib.h</h1>  </div>
</div>
<div class="contents">
<a href="a00025.htm">См. документацию.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//=================================================================================================================</span>
<a name="l00002"></a>00002 <span class="comment">//           [These sections are for folding control  in Code::Blocks]</span>
<a name="l00003"></a>00003 <span class="comment">//{          [Best viewed with &quot;Fold all on file open&quot; option enabled]             [best screen width is 115 chars]</span>
<a name="l00004"></a>00004 <span class="comment">//=================================================================================================================</span>
<a name="l00042"></a>00042 <span class="comment"></span><span class="comment">//           $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt; $</span>
<a name="l00043"></a>00043 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00051"></a>00051 <span class="comment"></span><span class="comment">//}</span>
<a name="l00052"></a>00052 <span class="comment">//=================================================================================================================</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="preprocessor">#if !defined (__TXLIB_H_INCLUDED)                // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; The code is here, unfold it &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span><span class="preprocessor">#define       __TXLIB_H_INCLUDED</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>
<a name="l00057"></a>00057 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00058"></a>00058 <span class="comment">//{          Version information</span>
<a name="l00059"></a>00059 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00060"></a>00060 
<a name="l00062"></a>00062 <span class="preprocessor">#define _TX_V_FROM_CVS(_1,file,ver,rev,date,auth,_2)  &quot;TXLib [Ver: &quot; #ver &quot;, Rev: &quot; #rev &quot;]&quot;</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span><span class="preprocessor">#define _TX_A_FROM_CVS(_1,file,ver,rev,date,auth,_2)  &quot;Copyright (C) &quot; auth</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span><span class="preprocessor">#define _TX_v_FROM_CVS(_1,file,ver,rev,date,auth,_2)  ((0x##ver &lt;&lt; 16) | 0x##rev)</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00080"></a>00080 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00082"></a>00082 <span class="comment"></span>
<a name="l00083"></a><a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19">00083</a> <span class="preprocessor">#define _TX_VERSION           _TX_V_FROM_CVS ($VersionInfo: , TXLib.h, 00172a, 104, 2014-08-09 16:37:26 +0400, &quot;Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt;&quot;, $)</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="preprocessor">#define _TX_AUTHOR            _TX_A_FROM_CVS ($VersionInfo: , TXLib.h, 00172a, 104, 2014-08-09 16:37:26 +0400, &quot;Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt;&quot;, $)</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span>
<a name="l00087"></a>00087 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00104"></a>00104 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00105"></a>00105 
<a name="l00106"></a><a class="code" href="a00034.htm#ga6b76c63cd895c2be63ac8e690028623b">00106</a> <span class="preprocessor">#define _TX_VER               _TX_v_FROM_CVS ($VersionInfo: , TXLib.h, 00172a, 104, 2014-08-09 16:37:26 +0400, &quot;Ded (Ilya Dedinsky, http://txlib.ru) &lt;mail@txlib.ru&gt;&quot;, $)</span>
<a name="l00107"></a>00107 <span class="preprocessor"></span>
<a name="l00108"></a>00108 <span class="comment">//}</span>
<a name="l00109"></a>00109 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00112"></a>00112 <span class="comment">//{          Compiler- and platform-specific</span>
<a name="l00114"></a>00114 <span class="comment"></span><span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00116"></a>00116 <span class="comment"></span>
<a name="l00117"></a>00117 <span class="preprocessor">#if !defined (__cplusplus)</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span>
<a name="l00119"></a>00119 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00120"></a>00120 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00122"></a>00122 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Must use C++ to compile TXLib.h.</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00125"></a>00125 <span class="preprocessor"></span><span class="preprocessor">    #error CHECK source file EXTENSION. Maybe it is &quot;.C&quot;. It must be &quot;.CPP&quot;.</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span><span class="preprocessor">    #error If your file is named, for example, &quot;Untitled.C&quot;, go to menu [File], then</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span><span class="preprocessor">    #error then [Save As] and rename it to &quot;Untitled.CPP&quot;. Please do NOT use spaces.</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00129"></a>00129 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00130"></a>00130 <span class="preprocessor"></span>
<a name="l00131"></a>00131 <span class="preprocessor">#endif</span>
<a name="l00132"></a>00132 <span class="preprocessor"></span>
<a name="l00133"></a>00133 <span class="preprocessor">#if !defined (WIN32) &amp;&amp; !defined (__WIN32__) &amp;&amp; !defined(_WIN32) &amp;&amp; !defined(_WIN32_WINNT)</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>
<a name="l00135"></a>00135 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00136"></a>00136 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00137"></a>00137 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00138"></a>00138 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Windows (MSVC/Win32 or GCC/MinGW) is the only supported system, sorry.</span>
<a name="l00140"></a>00140 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span><span class="preprocessor">    #error In Linux or iOS, you should write your own TXLib and share it with your friends,</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span><span class="preprocessor">    #error or use wine.</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00144"></a>00144 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>
<a name="l00146"></a>00146 <span class="preprocessor">#endif</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>
<a name="l00148"></a>00148 <span class="preprocessor">#if  defined (UNICODE) || defined (_UNICODE)</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span>
<a name="l00150"></a>00150 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00151"></a>00151 <span class="preprocessor"></span><span class="preprocessor">    #warning TXLib.h: Disabling the UNICODE</span>
<a name="l00152"></a>00152 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>
<a name="l00154"></a>00154 <span class="preprocessor">    #undef   UNICODE                            // Burn Unicode, burn</span>
<a name="l00155"></a>00155 <span class="preprocessor"></span><span class="preprocessor">    #undef  _UNICODE</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span>
<a name="l00157"></a>00157 <span class="preprocessor">    #if defined (_WINDOWS_H) || defined (_INC_WINDOWS) || defined (_WINDOWS_) || defined (__WINDOWS__)</span>
<a name="l00158"></a>00158 <span class="preprocessor"></span>
<a name="l00159"></a>00159 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00161"></a>00161 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00162"></a>00162 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Should include &quot;TXLib.h&quot; BEFORE or INSTEAD of &lt;Windows.h&gt; in UNICODE mode.</span>
<a name="l00164"></a>00164 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span><span class="preprocessor">    #error REARRANGE your #include directives, or DISABLE the UNICODE mode.</span>
<a name="l00166"></a>00166 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00168"></a>00168 <span class="preprocessor"></span>
<a name="l00169"></a>00169 <span class="preprocessor">    #endif</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span>
<a name="l00171"></a>00171 <span class="preprocessor">#endif</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span>
<a name="l00173"></a>00173 <span class="preprocessor">#if  defined (__STRICT_ANSI__)                   // Try to extend strict ANSI rules</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span>
<a name="l00175"></a>00175 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00176"></a>00176 <span class="preprocessor"></span><span class="preprocessor">    #warning TXLib.h: Trying to extend strict ANSI compatibility</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00178"></a>00178 <span class="preprocessor"></span>
<a name="l00179"></a>00179 <span class="preprocessor">    #undef  __STRICT_ANSI__</span>
<a name="l00180"></a>00180 <span class="preprocessor"></span><span class="preprocessor">    #define __STRICT_ANSI__UNDEFINED</span>
<a name="l00181"></a>00181 <span class="preprocessor"></span>
<a name="l00182"></a>00182 <span class="preprocessor">    #if defined (_STRING_H_) || defined (_INC_STRING) || defined (_STDIO_H_) || defined (_INC_STDIO)</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span>
<a name="l00184"></a>00184 <span class="preprocessor">    #ifdef __GNUC__</span>
<a name="l00185"></a>00185 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00186"></a>00186 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00188"></a>00188 <span class="preprocessor"></span><span class="preprocessor">    #error TXLib.h: Should include &quot;TXLib.h&quot; BEFORE &lt;string.h&gt; or &lt;stdio.h&gt; in Strict ANSI mode.</span>
<a name="l00189"></a>00189 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span><span class="preprocessor">    #error REARRANGE your #include directives, or DISABLE ANSI-compliancy.</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span><span class="preprocessor">    #error --------------------------------------------------------------------------------------------------------</span>
<a name="l00192"></a>00192 <span class="preprocessor"></span><span class="preprocessor">    #error</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>
<a name="l00194"></a>00194 <span class="preprocessor">    #endif</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>
<a name="l00196"></a>00196 <span class="preprocessor">#endif</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>
<a name="l00198"></a>00198 <span class="preprocessor">#if  defined (__GNUC__)</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span>
<a name="l00200"></a>00200 <span class="preprocessor">    #define _GCC_VER                ( __GNUC__*100 + __GNUC_MINOR__*10 + __GNUC_PATCHLEVEL__ )</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span>
<a name="l00202"></a>00202 <span class="preprocessor">    #if defined (_GCC_VER) &amp;&amp; (_GCC_VER &gt;= 420)</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>
<a name="l00204"></a>00204 <span class="preprocessor">        #if (_GCC_VER &gt;= 460)</span>
<a name="l00205"></a>00205 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic push</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l00207"></a>00207 <span class="preprocessor"></span>
<a name="l00208"></a>00208 <span class="preprocessor">        #pragma GCC optimize         (&quot;no-strict-aliasing&quot;)</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wstrict-aliasing&quot;</span>
<a name="l00210"></a>00210 <span class="preprocessor"></span>
<a name="l00211"></a>00211 <span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wshadow&quot;</span>
<a name="l00212"></a>00212 <span class="preprocessor"></span>
<a name="l00213"></a>00213 <span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wmissing-field-initializers&quot;</span>
<a name="l00214"></a>00214 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wunreachable-code&quot;</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wold-style-cast&quot;</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Wunused-label&quot;    // Just for fun in _txCanvas_OnCmdAbout()</span>
<a name="l00217"></a>00217 <span class="preprocessor"></span><span class="preprocessor">        #pragma GCC diagnostic ignored &quot;-Winline&quot;</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>
<a name="l00219"></a>00219 <span class="preprocessor">        #define _TX_THREAD          __thread</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span>
<a name="l00221"></a>00221 <span class="preprocessor">    #else</span>
<a name="l00222"></a>00222 <span class="preprocessor"></span><span class="preprocessor">        #define _TX_THREAD</span>
<a name="l00223"></a>00223 <span class="preprocessor"></span>
<a name="l00224"></a>00224 <span class="preprocessor">    #endif</span>
<a name="l00225"></a>00225 <span class="preprocessor"></span>
<a name="l00226"></a>00226 <span class="preprocessor">    #define _TX_CHECK_FORMAT( at )  __attribute__ (( format (printf, (at), (at)+1) ))</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span>
<a name="l00228"></a>00228     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00229"></a>00229     <span class="keyword">inline</span> T _txNOP (T value)       { <span class="keywordflow">return</span> value; }  <span class="comment">// To suppress performance warnings in assert etc</span>
<a name="l00230"></a>00230 
<a name="l00231"></a>00231     <span class="comment">// From MinGW\include\float.h which is replaced by MinGW\lib\gcc\i686-pc-mingw32\x.x.x\include\float.h</span>
<a name="l00232"></a>00232     <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> __cdecl _controlfp (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> unNew, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> unMask);
<a name="l00233"></a>00233     <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> <span class="keywordtype">void</span>         __cdecl _fpreset   (<span class="keywordtype">void</span>);
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 <span class="preprocessor">#else</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span>
<a name="l00237"></a>00237 <span class="preprocessor">    #define _TX_CHECK_FORMAT( at )</span>
<a name="l00238"></a>00238 <span class="preprocessor"></span>
<a name="l00239"></a>00239 <span class="preprocessor">    #define _txNOP( value )         ( value )</span>
<a name="l00240"></a>00240 <span class="preprocessor"></span>
<a name="l00241"></a>00241 <span class="preprocessor">#endif</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span>
<a name="l00243"></a>00243 <span class="preprocessor">#if  defined (_MSC_VER)</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span>
<a name="l00245"></a>00245 <span class="preprocessor">    #pragma warning (push, 4)                   // Set maximum warning level</span>
<a name="l00246"></a>00246 <span class="preprocessor"></span>
<a name="l00247"></a>00247 <span class="preprocessor">    #pragma warning (disable: 4127)             // conditional expression is constant</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4351)             // new behavior: elements of array will be default initialized</span>
<a name="l00249"></a>00249 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4702)             // unreachable code</span>
<a name="l00250"></a>00250 <span class="preprocessor"></span>
<a name="l00251"></a>00251 <span class="preprocessor">    #define _TX_THREAD              __declspec (thread)</span>
<a name="l00252"></a>00252 <span class="preprocessor"></span>
<a name="l00253"></a>00253 <span class="preprocessor">#endif</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span>
<a name="l00255"></a>00255 <span class="preprocessor">#if  defined (_MSC_VER) &amp;&amp; (_MSC_VER == 1200)   // MSVC 6 (1998)</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span>
<a name="l00257"></a>00257 <span class="preprocessor">    #define _MSC_VER_6                          // Flag the bad dog</span>
<a name="l00258"></a>00258 <span class="preprocessor"></span>
<a name="l00259"></a>00259 <span class="preprocessor">    #pragma warning (disable: 4511)             // copy constructor could not be generated</span>
<a name="l00260"></a>00260 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4512)             // assignment operator could not be generated</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4514)             // unreferenced inline function has been removed</span>
<a name="l00262"></a>00262 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4663)             // C++ language change: to explicitly specialize class template</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4710)             // function not inlined</span>
<a name="l00264"></a>00264 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4786)             // identifier was truncated to &#39;255&#39; characters in the debug information</span>
<a name="l00265"></a>00265 <span class="preprocessor"></span>
<a name="l00266"></a>00266 <span class="preprocessor">    #if !defined (WINVER)</span>
<a name="l00267"></a>00267 <span class="preprocessor"></span><span class="preprocessor">        #define   WINVER            0x0400      // MSVC 6: Defaults to Windows 95</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00269"></a>00269 <span class="preprocessor"></span>
<a name="l00270"></a>00270 <span class="preprocessor">    #if !defined (NDEBUG)</span>
<a name="l00271"></a>00271 <span class="preprocessor"></span><span class="preprocessor">        #define _CRTDBG_MAP_ALLOC   1           // Set debug mode heap allocation</span>
<a name="l00272"></a>00272 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00273"></a>00273 <span class="preprocessor"></span>
<a name="l00274"></a>00274 <span class="preprocessor">#endif</span>
<a name="l00275"></a>00275 <span class="preprocessor"></span>
<a name="l00276"></a>00276 <span class="preprocessor">#if  defined (_MSC_VER) &amp;&amp; (_MSC_VER &gt;= 1400)   // MSVC 8 (2005) or greater</span>
<a name="l00277"></a>00277 <span class="preprocessor"></span>
<a name="l00278"></a>00278 <span class="preprocessor">    #pragma warning (disable: 26135)            // missing locking annotation</span>
<a name="l00279"></a>00279 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 28125)            // the function must be called from within a try/except block</span>
<a name="l00280"></a>00280 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 28159)            // consider using another function instead</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span>
<a name="l00282"></a>00282 <span class="preprocessor">    #pragma setlocale               (&quot;russian&quot;) // Set source file encoding, see also _TX_CP</span>
<a name="l00283"></a>00283 <span class="preprocessor"></span>
<a name="l00284"></a>00284 <span class="preprocessor">    #if !defined (NDEBUG)</span>
<a name="l00285"></a>00285 <span class="preprocessor"></span><span class="preprocessor">        #pragma check_stack         (on)        // Turn on stack probes at runtime</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span><span class="preprocessor">        #pragma strict_gs_check     (push, on)  // Detects stack buffer overruns</span>
<a name="l00287"></a>00287 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>
<a name="l00289"></a>00289 <span class="preprocessor">    #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 1</span>
<a name="l00290"></a>00290 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_TRUNCATE            , _TRUNCATE</span>
<a name="l00291"></a>00291 <span class="preprocessor"></span>
<a name="l00292"></a>00292 <span class="preprocessor">#else</span>
<a name="l00293"></a>00293 <span class="preprocessor"></span>
<a name="l00294"></a>00294 <span class="preprocessor">    #define  strcpy_s               strcpy      // MSVC prior to 8 (2005) versions and GCC</span>
<a name="l00295"></a>00295 <span class="preprocessor"></span><span class="preprocessor">    #define  strncpy_s              strncpy     //   do NOT have secure variants of these</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span><span class="preprocessor">    #define  strncat_s              strncat     //   functions, so use insecure ones.</span>
<a name="l00297"></a>00297 <span class="preprocessor"></span><span class="preprocessor">    #define  wcsncpy_s              wcsncpy     //   ...</span>
<a name="l00298"></a>00298 <span class="preprocessor"></span><span class="preprocessor">    #define _snprintf_s            _snprintf    //</span>
<a name="l00299"></a>00299 <span class="preprocessor"></span><span class="preprocessor">    #define _vsnprintf_s           _vsnprintf   //</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span>
<a name="l00301"></a>00301 <span class="preprocessor">    #define  strerror_s(   buf,             code )  (              strncpy  ((buf), strerror (code), sizeof(buf)-1) )</span>
<a name="l00302"></a>00302 <span class="preprocessor"></span><span class="preprocessor">    #define  ctime_s(      buf, sizeof_buf, time )  (              strncpy  ((buf), ctime (time),   (sizeof_buf)-1) )</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span><span class="preprocessor">    #define  getenv_s( sz, buf, sizeof_buf, name )  ( (void)(sz),  strncpy  ((buf), getenv (name),  (sizeof_buf)-1) )</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span><span class="preprocessor">    #define  strtok_s(     buf, delim, ctx )        ( (void)(ctx), strtok   ((buf), (delim)) )</span>
<a name="l00305"></a>00305 <span class="preprocessor"></span>
<a name="l00306"></a>00306 <span class="preprocessor">    #if !( defined (_GCC_VER) &amp;&amp; (_GCC_VER == 471) &amp;&amp; defined (__x86_64__) )  // GCC 4.7.1 x64 already has it</span>
<a name="l00307"></a>00307 <span class="preprocessor"></span><span class="preprocessor">    #define _controlfp_s( oldCtl, newCtl, mask )    ( *(oldCtl) = _controlfp (newCtl, mask), 0 )</span>
<a name="l00308"></a>00308 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l00309"></a>00309 <span class="preprocessor"></span>
<a name="l00310"></a>00310 <span class="preprocessor">    #define _TX_TRUNCATE</span>
<a name="l00311"></a>00311 <span class="preprocessor"></span>
<a name="l00312"></a>00312 <span class="preprocessor">#endif</span>
<a name="l00313"></a>00313 <span class="preprocessor"></span>
<a name="l00314"></a>00314 <span class="preprocessor">#if  defined (__INTEL_COMPILER)</span>
<a name="l00315"></a>00315 <span class="preprocessor"></span>
<a name="l00316"></a>00316 <span class="preprocessor">    #pragma warning (disable:  174)             // remark: expression has no effect</span>
<a name="l00317"></a>00317 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:  304)             // remark: access control not specified (&quot;public&quot; by default)</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:  522)             // remark: function &quot;...&quot; redeclared &quot;inline&quot; after being called</span>
<a name="l00319"></a>00319 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable:  981)             // remark: operands are evaluated in unspecified order</span>
<a name="l00320"></a>00320 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 1684)             // conversion from pointer to same-sized integral type (potential portability problem)</span>
<a name="l00321"></a>00321 <span class="preprocessor"></span>
<a name="l00322"></a>00322 <span class="preprocessor">#endif</span>
<a name="l00323"></a>00323 <span class="preprocessor"></span>
<a name="l00324"></a>00324 <span class="preprocessor">#if !defined (WINVER)</span>
<a name="l00325"></a>00325 <span class="preprocessor"></span><span class="preprocessor">    #define   WINVER                0x0500      // Defaults to Windows 2000</span>
<a name="l00326"></a>00326 <span class="preprocessor"></span><span class="preprocessor">    #define   WINDOWS_ENABLE_CPLUSPLUS          // Allow use of type-limit macros in &lt;basetsd.h&gt;,</span>
<a name="l00327"></a>00327 <span class="preprocessor"></span><span class="preprocessor">#endif                                          //   they allowed by default if WINVER &gt;= 0x0600.</span>
<a name="l00328"></a>00328 <span class="preprocessor"></span>
<a name="l00329"></a>00329 <span class="preprocessor">#if !defined (_WIN32_WINNT)</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span><span class="preprocessor">    #define   _WIN32_WINNT          WINVER      // Defaults to the same as WINVER</span>
<a name="l00331"></a>00331 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00332"></a>00332 <span class="preprocessor"></span>
<a name="l00333"></a>00333 <span class="preprocessor">#if !defined (_WIN32_IE)</span>
<a name="l00334"></a>00334 <span class="preprocessor"></span><span class="preprocessor">    #define   _WIN32_IE             WINVER      // Defaults to the same as WINVER</span>
<a name="l00335"></a>00335 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00336"></a>00336 <span class="preprocessor"></span>
<a name="l00337"></a>00337 <span class="preprocessor">#define _USE_MATH_DEFINES                       // math.h&#39;s M_PI etc.</span>
<a name="l00338"></a>00338 <span class="preprocessor"></span>
<a name="l00340"></a>00340 <span class="comment">//}</span>
<a name="l00341"></a>00341 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00342"></a>00342 
<a name="l00343"></a>00343 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00344"></a>00344 <span class="comment">//{          The Includes</span>
<a name="l00345"></a>00345 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l00348"></a>00348 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (push, 3)                   // MSVC 6: At level 4, some std headers emit warnings O_o</span>
<a name="l00349"></a>00349 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00350"></a>00350 <span class="preprocessor"></span>
<a name="l00351"></a>00351 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00352"></a>00352 
<a name="l00353"></a>00353 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00354"></a>00354 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00355"></a>00355 <span class="preprocessor">#include &lt;stdarg.h&gt;</span>
<a name="l00356"></a>00356 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00357"></a>00357 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00358"></a>00358 <span class="preprocessor">#include &lt;io.h&gt;</span>
<a name="l00359"></a>00359 <span class="preprocessor">#include &lt;fcntl.h&gt;</span>
<a name="l00360"></a>00360 <span class="preprocessor">#include &lt;direct.h&gt;</span>
<a name="l00361"></a>00361 <span class="preprocessor">#include &lt;process.h&gt;</span>
<a name="l00362"></a>00362 <span class="preprocessor">#include &lt;signal.h&gt;</span>
<a name="l00363"></a>00363 <span class="preprocessor">#include &lt;locale.h&gt;</span>
<a name="l00364"></a>00364 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00365"></a>00365 <span class="preprocessor">#include &lt;float.h&gt;</span>
<a name="l00366"></a>00366 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00367"></a>00367 
<a name="l00368"></a>00368 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00369"></a>00369 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00370"></a>00370 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00371"></a>00371 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00372"></a>00372 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00373"></a>00373 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00374"></a>00374 <span class="preprocessor">#include &lt;stdexcept&gt;</span>
<a name="l00375"></a>00375 
<a name="l00376"></a>00376 <span class="preprocessor">#include &lt;conio.h&gt;</span>
<a name="l00377"></a>00377 
<a name="l00378"></a>00378 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00379"></a>00379 <span class="preprocessor">#include &lt;tlhelp32.h&gt;</span>
<a name="l00380"></a>00380 <span class="preprocessor">#include &lt;shellapi.h&gt;</span>
<a name="l00381"></a>00381 <span class="preprocessor">#include &lt;shlobj.h&gt;</span>
<a name="l00382"></a>00382 
<a name="l00383"></a>00383 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l00384"></a>00384 <span class="preprocessor"></span><span class="preprocessor">#include &lt;crtdbg.h&gt;</span>
<a name="l00385"></a>00385 <span class="preprocessor">#endif</span>
<a name="l00386"></a>00386 <span class="preprocessor"></span>
<a name="l00387"></a>00387 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00388"></a>00388 
<a name="l00389"></a>00389 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l00390"></a>00390 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (pop)                       // MSVC 6: Restore max level</span>
<a name="l00391"></a>00391 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00392"></a>00392 <span class="preprocessor"></span>
<a name="l00393"></a>00393 <span class="preprocessor">#ifdef __STRICT_ANSI__UNDEFINED</span>
<a name="l00394"></a>00394 <span class="preprocessor"></span><span class="preprocessor">    #define  __STRICT_ANSI__                    // Redefine back</span>
<a name="l00395"></a>00395 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00396"></a>00396 <span class="preprocessor"></span>
<a name="l00397"></a>00397 <span class="comment">//}</span>
<a name="l00398"></a>00398 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00401"></a>00401 <span class="comment">//{          The namespaces</span>
<a name="l00402"></a>00402 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00407"></a>00407 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00408"></a>00408 
<a name="l00409"></a>00409 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00410"></a>00410 <span class="preprocessor"></span><span class="keyword">namespace </span>{ <span class="keyword">namespace </span>TX { }}
<a name="l00411"></a>00411 <span class="preprocessor">#endif</span>
<a name="l00412"></a>00412 <span class="preprocessor"></span>
<a name="l00413"></a>00413 <span class="comment">//}</span>
<a name="l00414"></a>00414 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l00415"></a>00415 
<a name="l00418"></a>00418             <span class="keyword">namespace </span>TX {                       <span class="comment">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; The main code is here, unfold it &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
<a name="l00419"></a>00419 
<a name="l00422"></a>00422 <span class="comment">//=================================================================================================================</span>
<a name="l00423"></a>00423 <span class="comment">//{          TXLIB INTERFACE</span>
<a name="l00424"></a>00424 <span class="comment">//           Интерфейс библиотеки</span>
<a name="l00425"></a>00425 <span class="comment">//=================================================================================================================</span>
<a name="l00426"></a>00426 
<a name="l00427"></a>00427 <span class="comment">//=================================================================================================================</span>
<a name="l00428"></a>00428 <span class="comment">//{          Initialization</span>
<a name="l00430"></a>00430 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l00432"></a>00432 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00472"></a>00472 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00473"></a>00473 
<a name="l00474"></a>00474 HWND <a class="code" href="a00029.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, <span class="keywordtype">bool</span> centered = <span class="keyword">true</span>);
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00493"></a>00493 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00494"></a>00494 
<a name="l00495"></a>00495 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gae05b7bb52b782b86796201f9f96d0f58" title="Установка параметров рисования по умолчанию.">txSetDefaults</a>();
<a name="l00496"></a>00496 
<a name="l00497"></a>00497 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00516"></a>00516 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00517"></a>00517 
<a name="l00518"></a>00518 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>();
<a name="l00519"></a>00519 
<a name="l00520"></a>00520 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00534"></a>00534 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00535"></a>00535 
<a name="l00536"></a>00536 POINT <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>();
<a name="l00537"></a>00537 
<a name="l00538"></a>00538 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00550"></a>00550 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00551"></a>00551 
<a name="l00552"></a>00552 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaed186909e8de1f9a6e5f78c362d9b607" title="Возвращает ширину окна рисования.">txGetExtentX</a>();
<a name="l00553"></a>00553 
<a name="l00554"></a>00554 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00567"></a>00567 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00568"></a>00568 
<a name="l00569"></a>00569 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga1838cd6a438d4bea5f26bfa47a103a0d" title="Возвращает высоту окна рисования.">txGetExtentY</a>();
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00589"></a>00589 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00590"></a>00590 
<a name="l00591"></a>00591 <span class="keyword">inline</span> HDC&amp; <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>();
<a name="l00592"></a>00592 
<a name="l00593"></a>00593 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00605"></a>00605 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00606"></a>00606 
<a name="l00607"></a>00607 <span class="keyword">inline</span> HWND <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l00608"></a>00608 
<a name="l00609"></a>00609 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00618"></a>00618 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00619"></a>00619 
<a name="l00620"></a>00620 <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#ga732d4db1467f11a4b569b9d6f2383749" title="Возвращает строку с информацией о текущей версии библиотеки.">txVersion</a>();
<a name="l00621"></a>00621 
<a name="l00622"></a>00622 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00631"></a>00631 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00632"></a>00632 
<a name="l00633"></a>00633 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#gacd2416cd6b89106ab6700d0c75922bee" title="Возвращает номер версии библиотеки.">txVersionNumber</a>();
<a name="l00634"></a>00634 
<a name="l00635"></a>00635 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00663"></a>00663 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00664"></a>00664 
<a name="l00665"></a>00665 <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keywordtype">bool</span> fileNameOnly = <span class="keyword">true</span>);
<a name="l00666"></a>00666 
<a name="l00668"></a>00668 <span class="comment">//}</span>
<a name="l00669"></a>00669 <span class="comment">//=================================================================================================================</span>
<a name="l00670"></a>00670 
<a name="l00671"></a>00671 <span class="comment">//=================================================================================================================</span>
<a name="l00672"></a>00672 <span class="comment">//{          Setting the parameters</span>
<a name="l00674"></a>00674 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l00676"></a>00676 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00702"></a>00702 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00703"></a>00703 
<a name="l00704"></a>00704 <span class="keyword">const</span> COLORREF
<a name="l00705"></a>00705 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00706"></a><a class="code" href="a00029.htm#ga3e94cfad3d9080241f84129d6e5c09b5">00706</a> <span class="preprocessor"></span>    <span class="keyword">enum</span> <a class="code" href="a00029.htm#ga3e94cfad3d9080241f84129d6e5c09b5" title="Названия предопределенных цветов.">txColors</a> {
<a name="l00707"></a>00707 <span class="preprocessor">#endif</span>
<a name="l00708"></a>00708 <span class="preprocessor"></span>
<a name="l00709"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8">00709</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0,   0),   
<a name="l00710"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de">00710</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет. Плохо виден.">TX_BLUE</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0, 128),   
<a name="l00711"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032">00711</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 128,   0),   
<a name="l00712"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a3f59cd6ad2f1c2cea3f1b4f93baae64d">00712</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a3f59cd6ad2f1c2cea3f1b4f93baae64d" title="Бирюзовый цвет.">TX_CYAN</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 128, 128),   
<a name="l00713"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927">00713</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>           = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128,   0,   0),   
<a name="l00714"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aec305e1fce8a99fca3c442364389e22b">00714</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aec305e1fce8a99fca3c442364389e22b" title="Темно-малиновый цвет.">TX_MAGENTA</a>       = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128,   0, 128),   
<a name="l00715"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ad71bcc76691c708c653567bc70129e4b">00715</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ad71bcc76691c708c653567bc70129e4b" title="Коричневый цвет. Некрасивый. Do it yourself with RGB().">TX_BROWN</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128, 128,   0),   
<a name="l00716"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ab192f19b013a2563740be0da4e7252d9">00716</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ab192f19b013a2563740be0da4e7252d9" title="Оранжевый цвет.">TX_ORANGE</a>        = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 128,   0),   
<a name="l00717"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aaefd282232c1503377c5a5e3545c579a">00717</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aaefd282232c1503377c5a5e3545c579a" title="Серый цвет.">TX_GRAY</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (160, 160, 160),   
<a name="l00718"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5">00718</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a>      = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (128, 128, 128),   
<a name="l00719"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e">00719</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5abec0ab16c8a1ed55e137c20f80cdd25e" title="Светло-серый цвет.">TX_LIGHTGRAY</a>     = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (192, 192, 192),   
<a name="l00720"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a00514ed69e9dd0fafeb324c0258f9030">00720</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a00514ed69e9dd0fafeb324c0258f9030" title="Светло-синий цвет.">TX_LIGHTBLUE</a>     = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0,   0, 255),   
<a name="l00721"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae45f1e493cce7ef326f8bd9e8c684c6b">00721</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae45f1e493cce7ef326f8bd9e8c684c6b" title="Светло-зеленый цвет.">TX_LIGHTGREEN</a>    = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 255, 128),   
<a name="l00722"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a05b6100527e0b7a96dcda198a1439382">00722</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a05b6100527e0b7a96dcda198a1439382" title="Светло-бирюзовый цвет.">TX_LIGHTCYAN</a>     = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (  0, 255, 255),   
<a name="l00723"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504">00723</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a1c1e8dec8618fe54eee9e569a828a504" title="Светло-красный цвет. Не самого лучшего оттенка.">TX_LIGHTRED</a>      = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255,   0, 128),   
<a name="l00724"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5af3ef6cac77e7ca01e271a3562ceeb52f">00724</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5af3ef6cac77e7ca01e271a3562ceeb52f" title="Светло-малиновый цвет. Еще менее лучшего оттенка.">TX_LIGHTMAGENTA</a>  = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255,   0, 255),   
<a name="l00725"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae197423002e969d08646554e8b647454">00725</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5ae197423002e969d08646554e8b647454" title="Розовый гламурный :)">TX_PINK</a>          = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 128, 255),   
<a name="l00726"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a2331cdb79541487869e7c2445a2eb5f0">00726</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a2331cdb79541487869e7c2445a2eb5f0" title="Желтый цвет.">TX_YELLOW</a>        = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 255, 128),   
<a name="l00727"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025">00727</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>         = <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (255, 255, 255),   
<a name="l00728"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8">00728</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>   = 0xFFFFFFFF,            
<a name="l00729"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a081ac86689e98e0c036e960e9cb159ac">00729</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a081ac86689e98e0c036e960e9cb159ac" title="Прозрачный цвет. Отключает рисование.">TX_NULL</a>          = <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>,        
<a name="l00730"></a>00730 
<a name="l00731"></a>00731 <span class="comment">//  Цветовые каналы (компоненты) - см. txExtractColor(), txRGB2HSL(), txHSL2RGB()</span>
<a name="l00732"></a>00732 
<a name="l00733"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65">00733</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>          = 0x04000000,             
<a name="l00734"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc">00734</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>   = 0x05000000,             
<a name="l00735"></a><a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e">00735</a>     <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>    = 0x06000000;             
<a name="l00736"></a>00736 
<a name="l00737"></a>00737 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00738"></a>00738 <span class="preprocessor"></span>    };
<a name="l00739"></a>00739 <span class="preprocessor">#endif</span>
<a name="l00740"></a>00740 <span class="preprocessor"></span>
<a name="l00741"></a>00741 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00766"></a>00766 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00767"></a>00767 
<a name="l00768"></a>00768 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l00769"></a>00769 <span class="preprocessor"></span>COLORREF <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<span class="keywordtype">int</span> red, <span class="keywordtype">int</span> green, <span class="keywordtype">int</span> blue);
<a name="l00770"></a>00770 <span class="preprocessor">#endif</span>
<a name="l00771"></a>00771 <span class="preprocessor"></span>
<a name="l00772"></a>00772 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00787"></a>00787 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00788"></a>00788 
<a name="l00789"></a>00789 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga04e174a1e8d269b96b6e5a3e30d6dc1e" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (COLORREF color, <span class="keywordtype">double</span> thickness = 1);
<a name="l00790"></a>00790 
<a name="l00792"></a>00792 <span class="preprocessor">#define txSetColour txSetColor</span>
<a name="l00793"></a>00793 <span class="preprocessor"></span>
<a name="l00794"></a>00794 
<a name="l00795"></a>00795 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00811"></a>00811 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00812"></a>00812 
<a name="l00813"></a>00813 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga977c584db1ecfba20898615a948ab675" title="Устанавливает текущий цвет линий и текста.">txColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l00814"></a>00814 
<a name="l00815"></a>00815 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00826"></a>00826 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00827"></a>00827 
<a name="l00828"></a>00828 COLORREF <a class="code" href="a00029.htm#ga4894075399ec8e8747177f90c15fb35d" title="Возвращает текущий цвет линий и текста.">txGetColor</a>();
<a name="l00829"></a>00829 
<a name="l00830"></a>00830 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00844"></a>00844 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00845"></a>00845 
<a name="l00846"></a>00846 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (COLORREF color);
<a name="l00847"></a>00847 
<a name="l00849"></a>00849 <span class="preprocessor">#define txSetFillColour txSetFillColor</span>
<a name="l00850"></a>00850 <span class="preprocessor"></span>
<a name="l00851"></a>00851 
<a name="l00852"></a>00852 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00867"></a>00867 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00868"></a>00868 
<a name="l00869"></a>00869 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga385a6f84e8f1447a33047fa0f3be972b" title="Устанавливает текущий цвет заполнения фигур.">txFillColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l00870"></a>00870 
<a name="l00871"></a>00871 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00882"></a>00882 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00883"></a>00883 
<a name="l00884"></a>00884 COLORREF <a class="code" href="a00029.htm#ga1a65fa9ddfd07bda8ab3e95873991b76" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a>();
<a name="l00885"></a>00885 
<a name="l00886"></a>00886 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00937"></a>00937 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00938"></a>00938 
<a name="l00939"></a>00939 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3ddd148ec8af2d1f722b398ee7e17a71" title="Устанавливает режим взаимодействия цветов при рисовании.">txSetROP2</a> (<span class="keywordtype">int</span> mode = R2_COPYPEN);
<a name="l00940"></a>00940 
<a name="l00941"></a>00941 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00959"></a>00959 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00960"></a>00960 
<a name="l00961"></a>00961 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (COLORREF color, COLORREF component);
<a name="l00962"></a>00962 
<a name="l00963"></a>00963 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l00989"></a>00989 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l00990"></a>00990 
<a name="l00991"></a>00991 COLORREF <a class="code" href="a00029.htm#ga0dc8953591b63696392ec581c6b25f7c" title="Преобразует цвет из формата RGB в формат HSL.">txRGB2HSL</a> (COLORREF rgbColor);
<a name="l00992"></a>00992 
<a name="l00993"></a>00993 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01021"></a>01021 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01022"></a>01022 
<a name="l01023"></a>01023 COLORREF <a class="code" href="a00029.htm#ga1a87b7cd3e5a74e4dc6828d42d03fffa" title="Преобразует цвет из формата HSL в формат RGB.">txHSL2RGB</a> (COLORREF hslColor);
<a name="l01024"></a>01024 
<a name="l01026"></a>01026 <span class="comment">//}</span>
<a name="l01027"></a>01027 <span class="comment">//=================================================================================================================</span>
<a name="l01028"></a>01028 
<a name="l01029"></a>01029 <span class="comment">//=================================================================================================================</span>
<a name="l01030"></a>01030 <span class="comment">//{          Drawing</span>
<a name="l01032"></a>01032 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l01034"></a>01034 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01045"></a>01045 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01046"></a>01046 
<a name="l01047"></a>01047 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2a3940b99d02c630364d4b74e7d08a23" title="Стирает холст текущим цветом заполнения.">txClear</a>();
<a name="l01048"></a>01048 
<a name="l01049"></a>01049 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01065"></a>01065 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01066"></a>01066 
<a name="l01067"></a>01067 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad314ddd4f6afa0bb727c4b0cd8207603" title="Рисует пиксель (точку на экране).">txSetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, COLORREF color);
<a name="l01068"></a>01068 
<a name="l01069"></a>01069 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01086"></a>01086 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01087"></a>01087 
<a name="l01088"></a>01088 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3275b9e7d36b0aeefd60afea65150469" title="Рисует пиксель (точку на экране).">txPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue);
<a name="l01089"></a>01089 
<a name="l01090"></a>01090 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01107"></a>01107 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01108"></a>01108 
<a name="l01109"></a>01109 <span class="keyword">inline</span> COLORREF <a class="code" href="a00029.htm#ga3d6ff7a642714b236c3837f977795396" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y);
<a name="l01110"></a>01110 
<a name="l01111"></a>01111 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01130"></a>01130 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01131"></a>01131 
<a name="l01132"></a>01132 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1);
<a name="l01133"></a>01133 
<a name="l01134"></a>01134 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01155"></a>01155 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01156"></a>01156 
<a name="l01157"></a>01157 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga56fe553987cace1e1572b2e64ea46ebc" title="Рисует прямоугольник.">txRectangle</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1);
<a name="l01158"></a>01158 
<a name="l01159"></a>01159 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01177"></a>01177 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01178"></a>01178 
<a name="l01179"></a>01179 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4e872a3d71ac242bd40d614b9c03f86e" title="Рисует ломаную линию или многоугольник.">txPolygon</a> (<span class="keyword">const</span> POINT points[], <span class="keywordtype">int</span> numPoints);
<a name="l01180"></a>01180 
<a name="l01181"></a>01181 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01200"></a>01200 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01201"></a>01201 
<a name="l01202"></a>01202 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2bd0c5c1f84629e673601464e20ddc1f" title="Рисует эллипс.">txEllipse</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1);
<a name="l01203"></a>01203 
<a name="l01204"></a>01204 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01222"></a>01222 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01223"></a>01223 
<a name="l01224"></a>01224 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> r);
<a name="l01225"></a>01225 
<a name="l01226"></a>01226 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01247"></a>01247 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01248"></a>01248 
<a name="l01249"></a>01249 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga7e3759e5f9a708f87ac77ccc1419691e" title="Рисует дугу эллипса.">txArc</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle);
<a name="l01250"></a>01250 
<a name="l01251"></a>01251 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01272"></a>01272 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01273"></a>01273 
<a name="l01274"></a>01274 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga100795a6e30f3ed01f04e4d1b01bd918" title="Рисует сектор эллипса.">txPie</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle);
<a name="l01275"></a>01275 
<a name="l01276"></a>01276 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01297"></a>01297 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01298"></a>01298 
<a name="l01299"></a>01299 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa47cb24ee215e0d2fcb0cf9bcf0b8723" title="Рисует хорду эллипса.">txChord</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle);
<a name="l01300"></a>01300 
<a name="l01301"></a>01301 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01330"></a>01330 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01331"></a>01331 
<a name="l01332"></a>01332 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga16b68f33ba5a925a58fce0abc99d7213" title="Заливает произвольный контур текущим цветом заполнения.">txFloodFill</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, COLORREF color = <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>, DWORD mode = FLOODFILLSURFACE);
<a name="l01333"></a>01333 
<a name="l01334"></a>01334 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01352"></a>01352 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01353"></a>01353 
<a name="l01354"></a><a class="code" href="a00029.htm#gaf5f3dec18e058830a6eb85ca127472df">01354</a> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaf5f3dec18e058830a6eb85ca127472df" title="Функция, которая должна бы рисовать треугольник.">txTriangle</a> (<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> x2, <span class="keywordtype">double</span> y2, <span class="keywordtype">double</span> x3, <span class="keywordtype">double</span> y3)
<a name="l01355"></a>01355     {
<a name="l01356"></a>01356     (void)x1; (void)y1; (void)x2; (void)y2; (void)x3; (void)y3;
<a name="l01357"></a>01357 
<a name="l01358"></a>01358     MessageBox (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(),
<a name="l01359"></a>01359                <span class="stringliteral">&quot;Эта функция не реализована в библиотеке, потому что вы сами легко можете реализовать ее\n&quot;</span>
<a name="l01360"></a>01360                <span class="stringliteral">&quot;как функцию с параметрами, используя txPolygon(). См. \&quot;Пример с функциями с параметрами\&quot;.    &quot;</span>,
<a name="l01361"></a>01361                <span class="stringliteral">&quot;TXLib сообщает&quot;</span>, MB_ICONINFORMATION);
<a name="l01362"></a>01362 
<a name="l01363"></a>01363     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01364"></a>01364     }
<a name="l01365"></a>01365 
<a name="l01366"></a>01366 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01405"></a>01405 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01406"></a>01406 
<a name="l01407"></a>01407 <span class="keywordtype">void</span> <a class="code" href="a00029.htm#gac76227ff55076802ea267be18b4d7a8d" title="Рисует человечка.">txDrawMan</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY, COLORREF color, <span class="keywordtype">double</span> handL, <span class="keywordtype">double</span> handR, <span class="keywordtype">double</span> twist,
<a name="l01408"></a>01408                 <span class="keywordtype">double</span> head, <span class="keywordtype">double</span> eyes, <span class="keywordtype">double</span> wink, <span class="keywordtype">double</span> crazy, <span class="keywordtype">double</span> smile, <span class="keywordtype">double</span> hair, <span class="keywordtype">double</span> wind);
<a name="l01410"></a>01410 <span class="comment">//}</span>
<a name="l01411"></a>01411 <span class="comment">//=================================================================================================================</span>
<a name="l01412"></a>01412 
<a name="l01413"></a>01413 <span class="comment">//=================================================================================================================</span>
<a name="l01414"></a>01414 <span class="comment">//{          Drawing text</span>
<a name="l01416"></a>01416 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l01418"></a>01418 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01436"></a>01436 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01437"></a>01437 
<a name="l01438"></a>01438 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4eacb78833e54f44243f60ded9fdaf64" title="Рисует текст.">txTextOut</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01439"></a>01439 
<a name="l01440"></a>01440 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01480"></a>01480 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01481"></a>01481 
<a name="l01482"></a>01482 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gae5f1c5f63d862d72883203213786d9f0" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keyword">const</span> <span class="keywordtype">char</span> text[],
<a name="l01483"></a>01483                  <span class="keywordtype">unsigned</span> format = DT_CENTER | DT_VCENTER | DT_WORDBREAK | DT_WORD_ELLIPSIS);
<a name="l01484"></a>01484 
<a name="l01485"></a>01485 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01509"></a>01509 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01510"></a>01510 
<a name="l01511"></a>01511 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga9290f4d78a1f2dc5db7892cabe9a2abc" title="Выбирает текущий шрифт.">txSelectFont</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[], <span class="keywordtype">double</span> sizeY,
<a name="l01512"></a>01512                    <span class="keywordtype">double</span> sizeX     = -1,
<a name="l01513"></a>01513                    <span class="keywordtype">int</span>    bold      = FW_DONTCARE,
<a name="l01514"></a>01514                    <span class="keywordtype">bool</span>   italic    = <span class="keyword">false</span>,
<a name="l01515"></a>01515                    <span class="keywordtype">bool</span>   underline = <span class="keyword">false</span>,
<a name="l01516"></a>01516                    <span class="keywordtype">bool</span>   strikeout = <span class="keyword">false</span>,
<a name="l01517"></a>01517                    <span class="keywordtype">double</span> angle     = 0);
<a name="l01518"></a>01518 
<a name="l01519"></a>01519 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01533"></a>01533 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01534"></a>01534 
<a name="l01535"></a>01535 SIZE <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01536"></a>01536 
<a name="l01537"></a>01537 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01550"></a>01550 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01551"></a>01551 
<a name="l01552"></a>01552 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaad385937fb3526c8f4054ae288d285c6" title="Вычисляет ширину текстовой надписи.">txGetTextExtentX</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01553"></a>01553 
<a name="l01554"></a>01554 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01567"></a>01567 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01568"></a>01568 
<a name="l01569"></a>01569 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga3a34e3baf660b310f6ca0d373f36c024" title="Вычисляет высоту текстовой надписи.">txGetTextExtentY</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[]);
<a name="l01570"></a>01570 
<a name="l01571"></a>01571 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01597"></a>01597 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01598"></a>01598 
<a name="l01599"></a>01599 <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (<span class="keywordtype">unsigned</span> align = TA_CENTER | TA_BASELINE);
<a name="l01600"></a>01600 
<a name="l01601"></a>01601 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01617"></a>01617 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01618"></a>01618 
<a name="l01619"></a>01619 LOGFONT* <a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[]);
<a name="l01620"></a>01620 
<a name="l01622"></a>01622 <span class="comment">//}</span>
<a name="l01623"></a>01623 <span class="comment">//=================================================================================================================</span>
<a name="l01624"></a>01624 
<a name="l01625"></a>01625 <span class="comment">//=================================================================================================================</span>
<a name="l01626"></a>01626 <span class="comment">//{          Drawing to memory DC and image loading</span>
<a name="l01628"></a>01628 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l01630"></a>01630 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01658"></a>01658 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01659"></a>01659 
<a name="l01660"></a>01660 HDC <a class="code" href="a00029.htm#ga2f1b4b81b2b9280bb58c2d79930e2a63" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, HBITMAP bitmap = NULL);
<a name="l01661"></a>01661 
<a name="l01662"></a>01662 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01723"></a>01723 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01724"></a>01724 
<a name="l01725"></a>01725 HDC <a class="code" href="a00029.htm#ga28123a5be2ad65c41550ccb558138476" title="Загружает из файла изображение в формате BMP. Делает это довольно медленно.">txLoadImage</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[], <span class="keywordtype">unsigned</span> imageFlags = IMAGE_BITMAP, <span class="keywordtype">unsigned</span> loadFlags = LR_LOADFROMFILE);
<a name="l01726"></a>01726 
<a name="l01727"></a>01727 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01752"></a>01752 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01753"></a>01753 <span class="comment">//@ {</span>
<a name="l01754"></a>01754 
<a name="l01755"></a>01755 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC  dc);
<a name="l01756"></a>01756 
<a name="l01758"></a>01758 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC* dc);
<a name="l01760"></a>01760 
<a name="l01761"></a>01761 <span class="comment">//@ }</span>
<a name="l01762"></a>01762 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01818"></a>01818 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01819"></a>01819 
<a name="l01820"></a>01820 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga09488931ddf7b1e7e0b31529e1904887" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (HDC dest, <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l01821"></a>01821                HDC src,  <span class="keywordtype">double</span> xSrc = 0, <span class="keywordtype">double</span> ySrc = 0, DWORD rOp = SRCCOPY);
<a name="l01822"></a>01822 
<a name="l01823"></a>01823 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01871"></a>01871 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01872"></a>01872 
<a name="l01873"></a>01873 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gab4b1096971ee1f427e9f0211c2b2dea4" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (HDC dest, <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l01874"></a>01874                        HDC src,  <span class="keywordtype">double</span> xSrc = 0, <span class="keywordtype">double</span> ySrc = 0, COLORREF transColor = <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a9f0adfcb24eeb418fc39fe950db65ec8" title="Черный цвет.">TX_BLACK</a>);
<a name="l01875"></a>01875 
<a name="l01876"></a>01876 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01948"></a>01948 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01949"></a>01949 
<a name="l01950"></a>01950 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad2a44daaf97dccd615e2754930bd8245" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txAlphaBlend</a> (HDC dest, <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l01951"></a>01951                    HDC src,  <span class="keywordtype">double</span> xSrc = 0, <span class="keywordtype">double</span> ySrc = 0, <span class="keywordtype">double</span> alpha = 1.0);
<a name="l01953"></a>01953 <span class="comment">//}</span>
<a name="l01954"></a>01954 
<a name="l01955"></a>01955 <span class="comment">//=================================================================================================================</span>
<a name="l01956"></a>01956 <span class="comment">//{          Utility functions</span>
<a name="l01958"></a>01958 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l01960"></a>01960 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l01976"></a>01976 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l01977"></a>01977 
<a name="l01978"></a>01978 <span class="keywordtype">double</span> <a class="code" href="a00029.htm#ga56227ddccbe156355eaca50264bf3334" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<span class="keywordtype">double</span> time);
<a name="l01979"></a>01979 
<a name="l01980"></a>01980 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02005"></a>02005 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02006"></a>02006 
<a name="l02007"></a>02007 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin</a>();
<a name="l02008"></a>02008 
<a name="l02009"></a>02009 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02030"></a>02030 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02031"></a>02031 
<a name="l02032"></a>02032 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd</a>();
<a name="l02033"></a>02033 
<a name="l02034"></a>02034 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02055"></a>02055 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02056"></a>02056 
<a name="l02057"></a>02057 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keywordtype">int</span> update = <span class="keyword">true</span>);
<a name="l02058"></a>02058 
<a name="l02059"></a>02059 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02073"></a>02073 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02074"></a>02074 
<a name="l02075"></a>02075 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad4ee4d2a16f8f38412e0e7b1c380bf4d" title="Устанавливает текущий объект GDI.">txSelectObject</a> (HGDIOBJ obj);
<a name="l02076"></a>02076 
<a name="l02077"></a>02077 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02097"></a>02097 <span class="comment"></span><span class="comment">//</span>
<a name="l02098"></a>02098 <span class="comment">//                 +--&lt;&lt;&lt; Это текст помощи, который вы уже читали. Ищите дальше! Жмите [F3] или &quot;Найти далее&quot;</span>
<a name="l02099"></a>02099 <span class="comment">//                 |</span>
<a name="l02100"></a>02100 <span class="comment">//                 v</span>
<a name="l02101"></a>02101 <span class="comment">//               txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture();</span>
<a name="l02106"></a>02106 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02107"></a>02107 
<a name="l02108"></a>02108 <span class="comment">//     +--&lt;&lt;&lt; Это _прототип_ функции, а надо найти ее _определение_. Ищите дальше! Жмите [F3] или &quot;Найти далее&quot;</span>
<a name="l02109"></a>02109 <span class="comment">//     |</span>
<a name="l02110"></a>02110 <span class="comment">//     v</span>
<a name="l02111"></a>02111 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga93cecf6b117fc403c0488f388b78a6d1" title="Делает нечто иногда удобное. См. название функции.">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture</a>();
<a name="l02112"></a>02112 
<a name="l02113"></a>02113 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02127"></a>02127 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02128"></a>02128 
<a name="l02129"></a>02129 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gac9d8435ced05ddc5c29a1a5c9f58f752" title="Уничтожает окно TXLib.">txDestroyWindow</a>();
<a name="l02130"></a>02130 
<a name="l02131"></a>02131 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02142"></a>02142 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02143"></a>02143 
<a name="l02144"></a>02144 <span class="keywordtype">double</span> <a class="code" href="a00029.htm#gaebe0b0f6b1324031ee6b9461ba5b0ab3" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>();
<a name="l02145"></a>02145 
<a name="l02147"></a>02147 <span class="comment">//}</span>
<a name="l02148"></a>02148 
<a name="l02149"></a>02149 <span class="comment">//=================================================================================================================</span>
<a name="l02150"></a>02150 <span class="comment">//{          Mouse functions</span>
<a name="l02152"></a>02152 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l02154"></a>02154 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02171"></a>02171 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02172"></a>02172 
<a name="l02173"></a>02173 <span class="keyword">inline</span> POINT <a class="code" href="a00030.htm#ga452a1a7dc5d3f467c8b79b9db3ea053e" title="Возвращает позицию Мыши!">txMousePos</a>();
<a name="l02174"></a>02174 
<a name="l02175"></a>02175 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02190"></a>02190 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02191"></a>02191 
<a name="l02192"></a>02192 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga6adbdb491a8eec2a4209c54874ae7b7d" title="Возвращает Х-Координату Мыши!">txMouseX</a>();
<a name="l02193"></a>02193 
<a name="l02194"></a>02194 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02209"></a>02209 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02210"></a>02210 
<a name="l02211"></a>02211 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga572acf2310d35defaa9a37a2ec260576" title="Возвращает Y-Координату Мыши!">txMouseY</a>();
<a name="l02212"></a>02212 
<a name="l02213"></a>02213 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02233"></a>02233 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02234"></a>02234 
<a name="l02235"></a>02235 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#gab814b21d8f52c3efd0d7175d30a4fa73" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>();
<a name="l02236"></a>02236 
<a name="l02238"></a>02238 <span class="comment">//}</span>
<a name="l02239"></a>02239 <span class="comment">//=================================================================================================================</span>
<a name="l02240"></a>02240 
<a name="l02241"></a>02241 <span class="comment">//=================================================================================================================</span>
<a name="l02242"></a>02242 <span class="comment">//{          Console functions</span>
<a name="l02244"></a>02244 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l02246"></a>02246 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02286"></a>02286 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02287"></a>02287 
<a name="l02288"></a>02288 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (<span class="keywordtype">unsigned</span> colors = 0x07);
<a name="l02289"></a>02289 
<a name="l02290"></a>02290 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02302"></a>02302 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02303"></a>02303 
<a name="l02304"></a>02304 <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#ga9f2215b90264133de36ed7c2120f75f5" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>();
<a name="l02305"></a>02305 
<a name="l02306"></a>02306 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02320"></a>02320 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02321"></a>02321 
<a name="l02322"></a>02322 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2cb63c12d9206e9ed2b2c83c9a08f68e" title="Стирает текст консоли.">txClearConsole</a>();
<a name="l02323"></a>02323 
<a name="l02324"></a>02324 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02343"></a>02343 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02344"></a>02344 
<a name="l02345"></a>02345 POINT <a class="code" href="a00029.htm#gaee548f7b5672cbcbb99246e0291d7336" title="Устанавливает позицию мигающего курсора консоли.">txSetConsoleCursorPos</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y);
<a name="l02346"></a>02346 
<a name="l02347"></a>02347 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02359"></a>02359 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02360"></a>02360 
<a name="l02361"></a>02361 POINT <a class="code" href="a00029.htm#ga3227242c57eef33049cdaee655f4faee" title="Возвращает позицию мигающего курсора консоли.">txGetConsoleCursorPos</a>();
<a name="l02362"></a>02362 
<a name="l02363"></a>02363 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02376"></a>02376 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02377"></a>02377 
<a name="l02378"></a>02378 POINT <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l02379"></a>02379 
<a name="l02380"></a>02380 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02396"></a>02396 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02397"></a>02397 
<a name="l02398"></a>02398 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor</a> (<span class="keywordtype">bool</span> blink = <span class="keyword">true</span>);
<a name="l02399"></a>02399 
<a name="l02401"></a>02401 <span class="comment">//}</span>
<a name="l02402"></a>02402 <span class="comment">//=================================================================================================================</span>
<a name="l02403"></a>02403 
<a name="l02404"></a>02404 <span class="comment">//=================================================================================================================</span>
<a name="l02405"></a>02405 <span class="comment">//{          Other staff not related to drawing</span>
<a name="l02407"></a>02407 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l02409"></a>02409 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02436"></a>02436 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02437"></a>02437 
<a name="l02438"></a>02438 <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[] = NULL, DWORD mode = SND_ASYNC);
<a name="l02439"></a>02439 
<a name="l02440"></a>02440 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02470"></a>02470 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02471"></a>02471 
<a name="l02472"></a>02472 <span class="keywordtype">unsigned</span> <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text, <span class="keyword">const</span> <span class="keywordtype">char</span>* header = <span class="stringliteral">&quot;TXLib сообщает&quot;</span>, <span class="keywordtype">unsigned</span> flags = 0);
<a name="l02473"></a>02473 
<a name="l02474"></a>02474 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02511"></a>02511 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02512"></a>02512 
<a name="l02513"></a>02513 <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (<span class="keywordtype">unsigned</span> flags, <span class="keyword">const</span> <span class="keywordtype">char</span> title[], <span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...) _TX_CHECK_FORMAT (3);
<a name="l02514"></a>02514 
<a name="l02515"></a>02515 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02540"></a>02540 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02541"></a>02541 
<a name="l02542"></a>02542 <span class="keywordtype">int</span> <a class="code" href="a00032.htm#gaa924f43cd62016e5e6a8500336add06a" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (const <span class="keywordtype">char</span> format[], ...) _TX_CHECK_FORMAT (1);
<a name="l02543"></a>02543 
<a name="l02544"></a>02544 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02617"></a>02617 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02619"></a>02619 <span class="comment"></span>
<a name="l02620"></a>02620 <span class="preprocessor">#ifndef _MSC_VER_6</span>
<a name="l02621"></a>02621 <span class="preprocessor"></span>
<a name="l02622"></a><a class="code" href="a00032.htm#ga799c47c1a2a151647cd765e1fa4b27b5">02622</a> <span class="preprocessor">    #define sizearr( arr )    ( sizeof (get_size_of_an_array_with_unknown_or_nonconst_size_ (arr)) )</span>
<a name="l02623"></a>02623 <span class="preprocessor"></span>
<a name="l02625"></a>02625     <span class="comment">//  See explanation here: http://blogs.msdn.com/b/the1/archive/2004/05/07/128242.aspx</span>
<a name="l02626"></a>02626 
<a name="l02627"></a>02627     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> N&gt; char (&amp;get_size_of_an_array_with_unknown_or_nonconst_size_ (T (&amp;) [N])) [N]; <span class="comment">// ;)</span>
<a name="l02628"></a>02628 
<a name="l02630"></a>02630 
<a name="l02631"></a>02631 <span class="preprocessor">#endif</span>
<a name="l02632"></a>02632 <span class="preprocessor"></span>
<a name="l02634"></a>02634 
<a name="l02635"></a><a class="code" href="a00032.htm#ga3379d227f91f891ac97d068ab90ee871">02635</a> <span class="preprocessor">#define SIZEARR( arr )        ( sizeof (arr) / sizeof (0[arr]) )</span>
<a name="l02636"></a>02636 <span class="preprocessor"></span>
<a name="l02638"></a>02638 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02655"></a>02655 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02656"></a>02656 
<a name="l02657"></a>02657 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l02658"></a>02658 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (T x, T a, T b);
<a name="l02659"></a>02659 
<a name="l02660"></a>02660 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02703"></a>02703 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02705"></a>02705 <span class="comment"></span>
<a name="l02706"></a>02706 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> POINT&amp; pt, <span class="keyword">const</span> RECT&amp; rect);
<a name="l02707"></a>02707 
<a name="l02708"></a>02708 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> COORD&amp; pt, <span class="keyword">const</span> SMALL_RECT&amp; rect);
<a name="l02709"></a>02709 
<a name="l02711"></a>02711 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02726"></a>02726 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02727"></a>02727 
<a name="l02728"></a>02728 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">int</span> range);
<a name="l02729"></a>02729 
<a name="l02730"></a>02730 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02750"></a>02750 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02751"></a>02751 
<a name="l02752"></a>02752 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right);
<a name="l02753"></a>02753 
<a name="l02754"></a>02754 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02770"></a>02770 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02771"></a>02771 
<a name="l02772"></a><a class="code" href="a00032.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f">02772</a> <span class="preprocessor">#define MAX( a, b )     ( (a) &gt; (b) ? (a) : (b) )</span>
<a name="l02773"></a>02773 <span class="preprocessor"></span>
<a name="l02774"></a>02774 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02790"></a>02790 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02791"></a>02791 
<a name="l02792"></a><a class="code" href="a00032.htm#ga3acffbd305ee72dcd4593c0d8af64a4f">02792</a> <span class="preprocessor">#define MIN( a, b )     ( (a) &lt; (b) ? (a) : (b) )</span>
<a name="l02793"></a>02793 <span class="preprocessor"></span>
<a name="l02794"></a>02794 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02808"></a>02808 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02809"></a>02809 
<a name="l02810"></a>02810 <span class="preprocessor">#if defined (__STDC_VERSION__) &amp;&amp; __STDC_VERSION__ &gt;= 199901L  // C99 case</span>
<a name="l02811"></a>02811 <span class="preprocessor"></span>
<a name="l02812"></a>02812 <span class="preprocessor">    #define ROUND( x )  ( (int) round (x) )</span>
<a name="l02813"></a>02813 <span class="preprocessor"></span>
<a name="l02814"></a>02814 <span class="preprocessor">#else</span>
<a name="l02815"></a>02815 <span class="preprocessor"></span>
<a name="l02816"></a><a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12">02816</a> <span class="preprocessor">    #define ROUND( x )  ( (int) floor ((x) + 0.5) )</span>
<a name="l02817"></a>02817 <span class="preprocessor"></span>
<a name="l02818"></a>02818 <span class="preprocessor">#endif</span>
<a name="l02819"></a>02819 <span class="preprocessor"></span>
<a name="l02820"></a>02820 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02829"></a>02829 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02830"></a>02830 
<a name="l02831"></a><a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7">02831</a> <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a> = asin (1.0) * 2;
<a name="l02832"></a>02832 
<a name="l02833"></a>02833 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02860"></a>02860 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02861"></a>02861 
<a name="l02862"></a>02862 <span class="keyword">inline</span>
<a name="l02863"></a><a class="code" href="a00032.htm#ga74ff1048e0d6bc458c9904fbbe0a6026">02863</a> <span class="keywordtype">double</span> <a class="code" href="a00032.htm#ga74ff1048e0d6bc458c9904fbbe0a6026" title="Очень удобное возведение числа в квадрат.">txSqr</a> (<span class="keywordtype">double</span> x)
<a name="l02864"></a>02864     {
<a name="l02865"></a>02865     <span class="keywordtype">double</span> sqr = pow (sqrt (x) * sqrt (x), sqrt (4.0));  <span class="comment">// Бурная вычислительная деятельность</span>
<a name="l02866"></a>02866 
<a name="l02867"></a>02867     <span class="keywordtype">char</span> str[1024] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02868"></a>02868     _snprintf_s (str, <span class="keyword">sizeof</span> (str), <span class="stringliteral">&quot;Возведение дало %g!&quot;</span> <span class="stringliteral">&quot;!!&quot;</span> <span class="stringliteral">&quot;!!&quot;</span> <span class="stringliteral">&quot; Вы рады????    &quot;</span>, sqr);
<a name="l02869"></a>02869     <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (str, <span class="stringliteral">&quot;Получен ОТВЕТ!&quot;</span> <span class="stringliteral">&quot;!!&quot;</span>, MB_ICONEXCLAMATION | MB_YESNO) != IDNO ||
<a name="l02870"></a>02870         (
<a name="l02871"></a>02871         <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Жаль...&quot;</span>, <span class="stringliteral">&quot;А я так старалась&quot;</span>, MB_ICONINFORMATION),
<a name="l02872"></a>02872         <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Уйду я от вас       &quot;</span>, <span class="stringliteral">&quot;Злые вы...&quot;</span>,  MB_ICONSTOP),
<a name="l02873"></a>02873         exit (EXIT_FAILURE), 0
<a name="l02874"></a>02874         );
<a name="l02875"></a>02875 
<a name="l02876"></a>02876     <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (1, NULL, <span class="stringliteral">&quot;\n%s\n&quot;</span>, <span class="stringliteral">&quot;Высшая математика!  \0&quot;</span>  <span class="comment">// А как это работает, а?</span>
<a name="l02877"></a>02877                                      <span class="stringliteral">&quot;С ума сойти...      \0&quot;</span>  <span class="comment">//</span>
<a name="l02878"></a>02878                                      <span class="stringliteral">&quot;а КЭП подтверждает  \0&quot;</span>  <span class="comment">//       и кто это будет</span>
<a name="l02879"></a>02879                                      <span class="stringliteral">&quot;Главное - отчитаться\0&quot;</span>  <span class="comment">//       поддерживать?..</span>
<a name="l02880"></a>02880                                      <span class="stringliteral">&quot;Невероятно, но факт \0&quot;</span>
<a name="l02881"></a>02881                                      <span class="stringliteral">&quot;Кто бы мог подумать?\0&quot;</span> + GetTickCount() % 6 * 21);
<a name="l02882"></a>02882 
<a name="l02883"></a>02883     <span class="keywordflow">return</span> sqr;  <span class="comment">// Все же вернем значение. Мы же не звери</span>
<a name="l02884"></a>02884     }
<a name="l02885"></a>02885 
<a name="l02886"></a>02886 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02904"></a>02904 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02905"></a>02905 
<a name="l02906"></a><a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6">02906</a> <span class="preprocessor">#define ZERO( type )    zero &lt;type&gt; ()</span>
<a name="l02907"></a>02907 <span class="preprocessor"></span>
<a name="l02909"></a>02909 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T zero();
<a name="l02911"></a>02911 
<a name="l02912"></a>02912 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l02969"></a>02969 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l02971"></a>02971 <span class="comment"></span>
<a name="l02972"></a>02972 <span class="comment">//{ C++03 version</span>
<a name="l02973"></a>02973 
<a name="l02974"></a><a class="code" href="a00032.htm#ga9a41302570477635882d90d623f0d8b3">02974</a> <span class="preprocessor">#define  TX_AUTO_FUNC(           param_t, param, func )                  \</span>
<a name="l02975"></a>02975 <span class="preprocessor">        _TX_AUTO_FUNC( __LINE__, param_t, param, func )</span>
<a name="l02976"></a>02976 <span class="preprocessor"></span>
<a name="l02977"></a>02977 <span class="preprocessor">#define _TX_AUTO_FUNC( n,        param_t, param, func )                  \</span>
<a name="l02978"></a>02978 <span class="preprocessor">        _TX_AUTO_FUN2( n,        param_t, param, func )</span>
<a name="l02979"></a>02979 <span class="preprocessor"></span>
<a name="l02980"></a>02980 <span class="preprocessor">#define _TX_AUTO_FUN2( n,        param_t, param, func )                  \</span>
<a name="l02981"></a>02981 <span class="preprocessor">    struct _TX_AUTO_FUNC_##n                                             \</span>
<a name="l02982"></a>02982 <span class="preprocessor">        {                                                                \</span>
<a name="l02983"></a>02983 <span class="preprocessor">        typedef _TX_AUTO_FUNC_##n this_t;                                \</span>
<a name="l02984"></a>02984 <span class="preprocessor">        param_t&amp; param;                                                  \</span>
<a name="l02985"></a>02985 <span class="preprocessor">                                                                         \</span>
<a name="l02986"></a>02986 <span class="preprocessor">        _TX_AUTO_FUNC_##n (param_t&amp; __p) : param (__p) {       }         \</span>
<a name="l02987"></a>02987 <span class="preprocessor">       ~_TX_AUTO_FUNC_##n ()                           { func; }         \</span>
<a name="l02988"></a>02988 <span class="preprocessor">                                                                         \</span>
<a name="l02989"></a>02989 <span class="preprocessor">        private: this_t&amp; operator= (const this_t&amp;)     { return *this; } \</span>
<a name="l02990"></a>02990 <span class="preprocessor">        }                                                                \</span>
<a name="l02991"></a>02991 <span class="preprocessor">        _TX_AUTO_FUNC_##n (param)</span>
<a name="l02992"></a>02992 <span class="preprocessor"></span><span class="comment">//}</span>
<a name="l02993"></a>02993 
<a name="l02994"></a>02994 <span class="comment">//{ C++0x version, use MSVS 2010 or GCC v.4.5+ and -std=c++0x in command line</span>
<a name="l02995"></a>02995 
<a name="l02996"></a>02996 <span class="preprocessor">#define  tx_auto_func(    func )  _tx_auto_fun1 ( __LINE__, func )</span>
<a name="l02997"></a>02997 <span class="preprocessor"></span><span class="preprocessor">#define _tx_auto_fun1( n, func )  _tx_auto_fun2 ( n,        func )</span>
<a name="l02998"></a>02998 <span class="preprocessor"></span><span class="preprocessor">#define _tx_auto_fun2( n, func )  auto _tx_auto_func_##n = _tx_auto_func ([&amp;]() { func; })</span>
<a name="l02999"></a>02999 <span class="preprocessor"></span>
<a name="l03000"></a>03000 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l03001"></a>03001 <span class="keyword">struct </span>_tx_auto_func_
<a name="l03002"></a>03002     {
<a name="l03003"></a>03003     <span class="keyword">typedef</span> _tx_auto_func_ this_t;
<a name="l03004"></a>03004     T func_;
<a name="l03005"></a>03005 
<a name="l03006"></a>03006     _tx_auto_func_ (T func) : func_ (func) {}
<a name="l03007"></a>03007    ~_tx_auto_func_ () { func_(); }
<a name="l03008"></a>03008 
<a name="l03009"></a>03009     <span class="keyword">private</span>: this_t&amp; operator= (<span class="keyword">const</span> this_t&amp;) { <span class="keywordflow">return</span> *<span class="keyword">this</span>; }
<a name="l03010"></a>03010     };
<a name="l03011"></a>03011 
<a name="l03012"></a>03012 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l03013"></a>03013 _tx_auto_func_&lt;T&gt; _tx_auto_func  (T   func)
<a name="l03014"></a>03014     {
<a name="l03015"></a>03015     <span class="keywordflow">return</span>        _tx_auto_func_ &lt;T&gt; (func);
<a name="l03016"></a>03016     }
<a name="l03017"></a>03017 <span class="comment">//}</span>
<a name="l03018"></a>03018 
<a name="l03019"></a>03019 <span class="comment">//{ Compatibility</span>
<a name="l03020"></a>03020 
<a name="l03021"></a>03021 <span class="preprocessor">#define TX_FINALLY( param_t, param, func )  TX_AUTO_FUNC (param_t, param, func)</span>
<a name="l03022"></a>03022 <span class="preprocessor"></span><span class="preprocessor">#define tx_finally( func )                  tx_auto_func (func)</span>
<a name="l03023"></a>03023 <span class="preprocessor"></span>
<a name="l03024"></a>03024 <span class="comment">//}</span>
<a name="l03025"></a>03025 
<a name="l03027"></a>03027 
<a name="l03028"></a>03028 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03068"></a>03068 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03069"></a>03069 
<a name="l03070"></a>03070 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l03071"></a>03071 <span class="preprocessor"></span><span class="preprocessor">    #undef  assert</span>
<a name="l03072"></a><a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53">03072</a> <span class="preprocessor"></span><span class="preprocessor">    #define assert( cond )    _txNOP ( !(cond)? (TX_ERROR (&quot;\a&quot; &quot;ВНЕЗАПНО: Логическая ошибка: &quot;    \</span>
<a name="l03073"></a>03073 <span class="preprocessor">                                                           &quot;Неверно, что \&quot;%s\&quot;.&quot; TX_COMMA #cond), \</span>
<a name="l03074"></a>03074 <span class="preprocessor">                                                 0/(int)!!(cond)) : 1 )</span>
<a name="l03075"></a>03075 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l03076"></a>03076 <span class="preprocessor"></span><span class="preprocessor">    #undef  assert</span>
<a name="l03077"></a>03077 <span class="preprocessor"></span><span class="preprocessor">    #define assert( cond )    ((void) 1)</span>
<a name="l03078"></a>03078 <span class="preprocessor"></span>
<a name="l03079"></a>03079 <span class="preprocessor">#endif</span>
<a name="l03080"></a>03080 <span class="preprocessor"></span>
<a name="l03081"></a>03081 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03108"></a>03108 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03109"></a>03109 
<a name="l03110"></a>03110 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l03111"></a><a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7">03111</a> <span class="preprocessor"></span><span class="preprocessor">    #define asserted          || TX_ERROR (&quot;\a&quot; &quot;Обнаружен нулевой или ложный результат.&quot;)</span>
<a name="l03112"></a>03112 <span class="preprocessor"></span>
<a name="l03113"></a>03113 <span class="preprocessor">#else</span>
<a name="l03114"></a>03114 <span class="preprocessor"></span><span class="preprocessor">    #define asserted          || _txNOP (0)</span>
<a name="l03115"></a>03115 <span class="preprocessor"></span>
<a name="l03116"></a>03116 <span class="preprocessor">#endif</span>
<a name="l03117"></a>03117 <span class="preprocessor"></span>
<a name="l03118"></a><a class="code" href="a00025.htm#a66cb8e8fe20d9d05d02e73373bda7f8a">03118</a> <span class="preprocessor">#define verified              asserted  //!&lt; For compatibility with assert macro</span>
<a name="l03119"></a>03119 <span class="preprocessor"></span>
<a name="l03121"></a>03121 <span class="preprocessor">#define TX_NEEDED             asserted  //!&lt; For compatibility with earlier releases</span>
<a name="l03122"></a>03122 <span class="preprocessor"></span>
<a name="l03123"></a>03123 
<a name="l03124"></a>03124 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03153"></a>03153 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03154"></a>03154 
<a name="l03155"></a>03155 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l03156"></a>03156 <span class="preprocessor"></span><span class="preprocessor">    #undef  verify</span>
<a name="l03157"></a><a class="code" href="a00032.htm#ga14fecb1c008314444a74c1fe7d9a113b">03157</a> <span class="preprocessor"></span><span class="preprocessor">    #define verify            assert</span>
<a name="l03158"></a>03158 <span class="preprocessor"></span>
<a name="l03159"></a>03159 <span class="preprocessor">#else</span>
<a name="l03160"></a>03160 <span class="preprocessor"></span><span class="preprocessor">    #undef  verify</span>
<a name="l03161"></a>03161 <span class="preprocessor"></span><span class="preprocessor">    #define verify( expr )    ( expr )</span>
<a name="l03162"></a>03162 <span class="preprocessor"></span>
<a name="l03163"></a>03163 <span class="preprocessor">#endif</span>
<a name="l03164"></a>03164 <span class="preprocessor"></span>
<a name="l03165"></a>03165 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03190"></a>03190 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03191"></a>03191 
<a name="l03192"></a>03192 <span class="comment">// Variadic macros not supported in Strict ANSI mode and in MSVC prior to MSVC 8 (2005)</span>
<a name="l03193"></a>03193 
<a name="l03194"></a>03194 <span class="preprocessor">#if defined (__STRICT_ANSI__) || defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1400)</span>
<a name="l03195"></a>03195 <span class="preprocessor"></span><span class="preprocessor">    #define TX_ERROR( msg )   _txError (__FILE__, __LINE__, __TX_FUNCTION__, msg)</span>
<a name="l03196"></a>03196 <span class="preprocessor"></span>
<a name="l03197"></a>03197 <span class="preprocessor">#else</span>
<a name="l03198"></a><a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a">03198</a> <span class="preprocessor"></span><span class="preprocessor">    #define TX_ERROR( ... )   _txError (__FILE__, __LINE__, __TX_FUNCTION__, __VA_ARGS__)</span>
<a name="l03199"></a>03199 <span class="preprocessor"></span>
<a name="l03200"></a>03200 <span class="preprocessor">#endif</span>
<a name="l03201"></a>03201 <span class="preprocessor"></span>
<a name="l03203"></a>03203 <span class="preprocessor">#define TX_THROW              TX_ERROR  //!&lt; For compatibility with earlier releases</span>
<a name="l03204"></a>03204 <span class="preprocessor"></span>
<a name="l03205"></a>03205 
<a name="l03206"></a>03206 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03222"></a>03222 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03223"></a>03223 
<a name="l03224"></a>03224 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l03225"></a><a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220">03225</a> <span class="preprocessor"></span><span class="preprocessor">    #define TX_DEBUG_ERROR    TX_ERROR</span>
<a name="l03226"></a>03226 <span class="preprocessor"></span>
<a name="l03227"></a>03227 <span class="preprocessor">#else</span>
<a name="l03228"></a>03228 <span class="preprocessor"></span><span class="preprocessor">    #define TX_DEBUG_ERROR(m) ((void) 0)</span>
<a name="l03229"></a>03229 <span class="preprocessor"></span>
<a name="l03230"></a>03230 <span class="preprocessor">#endif</span>
<a name="l03231"></a>03231 <span class="preprocessor"></span>
<a name="l03232"></a>03232 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03248"></a>03248 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03249"></a>03249 
<a name="l03250"></a>03250 <span class="keywordtype">void</span> <a class="code" href="a00032.htm#ga7b470eef58eabacf9c7820ce6d392506" title="Распечатывает дамп области памяти в консоли.">txDump</a> (<span class="keyword">const</span> <span class="keywordtype">void</span>* address, <span class="keyword">const</span> <span class="keywordtype">char</span> name[] = <span class="stringliteral">&quot;txDump()&quot;</span>);
<a name="l03251"></a>03251 
<a name="l03252"></a>03252 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03265"></a>03265 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03267"></a>03267 <span class="comment"></span>
<a name="l03268"></a><a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba">03268</a> <span class="preprocessor">#define _                     ,</span>
<a name="l03269"></a><a class="code" href="a00032.htm#gaaff3c8e496327bec13a821061787878f">03269</a> <span class="preprocessor"></span><span class="preprocessor">#define TX_COMMA              ,  //!&lt; Синоним макроса _ (@ref _ &quot;символ подчеркивания&quot;)</span>
<a name="l03270"></a>03270 <span class="preprocessor"></span>
<a name="l03272"></a>03272 
<a name="l03273"></a>03273 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03277"></a>03277 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03278"></a>03278 
<a name="l03279"></a>03279 <span class="preprocessor">#if   defined (__GNUC__)</span>
<a name="l03280"></a>03280 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;GNU g++ &quot;            TX_PREPROCESS (__GNUC__)       &quot;.&quot;  \</span>
<a name="l03281"></a>03281 <span class="preprocessor">                                                    TX_PREPROCESS (__GNUC_MINOR__) &quot;.&quot;  \</span>
<a name="l03282"></a>03282 <span class="preprocessor">                                                    TX_PREPROCESS (__GNUC_PATCHLEVEL__) \</span>
<a name="l03283"></a>03283 <span class="preprocessor">                              &quot;, std=&quot;              TX_PREPROCESS (__cplusplus)</span>
<a name="l03284"></a>03284 <span class="preprocessor"></span><span class="preprocessor">#elif defined (_MSC_VER)</span>
<a name="l03285"></a>03285 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;MSVS &quot;               TX_PREPROCESS (_MSC_VER)            \</span>
<a name="l03286"></a>03286 <span class="preprocessor">                              &quot;, std=&quot;              TX_PREPROCESS (__cplusplus)</span>
<a name="l03287"></a>03287 <span class="preprocessor"></span>
<a name="l03288"></a>03288 <span class="preprocessor">#elif defined (__INTEL_COMPILER)</span>
<a name="l03289"></a>03289 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;Intel C++ &quot;          TX_PREPROCESS (__INTEL_COMPILER)    \</span>
<a name="l03290"></a>03290 <span class="preprocessor">                              &quot;, std=&quot;              TX_PREPROCESS (__cplusplus)</span>
<a name="l03291"></a>03291 <span class="preprocessor"></span>
<a name="l03292"></a>03292 <span class="preprocessor">#else</span>
<a name="l03293"></a><a class="code" href="a00032.htm#gadd1c9ccd036228402b807abaea14f7ee">03293</a> <span class="preprocessor"></span><span class="preprocessor">    #define __TX_COMPILER__   &quot;Unknown C++, std=&quot;   TX_PREPROCESS (__cplusplus)</span>
<a name="l03294"></a>03294 <span class="preprocessor"></span>
<a name="l03295"></a>03295 <span class="preprocessor">#endif</span>
<a name="l03296"></a>03296 <span class="preprocessor"></span>
<a name="l03297"></a>03297 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03301"></a>03301 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03302"></a>03302 
<a name="l03303"></a><a class="code" href="a00032.htm#ga973d717438fe468dd5a5d8d45ede5312">03303</a> <span class="preprocessor">#define __TX_FILELINE__       __FILE__ &quot; (&quot; TX_PREPROCESS (__LINE__) &quot;)&quot;</span>
<a name="l03304"></a>03304 <span class="preprocessor"></span>
<a name="l03305"></a>03305 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03313"></a>03313 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03314"></a>03314 
<a name="l03315"></a>03315 <span class="preprocessor">#if defined (__GNUC__)</span>
<a name="l03316"></a>03316 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __PRETTY_FUNCTION__</span>
<a name="l03317"></a>03317 <span class="preprocessor"></span>
<a name="l03318"></a>03318 <span class="preprocessor">#elif defined (__FUNCSIG__)</span>
<a name="l03319"></a>03319 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCSIG__</span>
<a name="l03320"></a>03320 <span class="preprocessor"></span>
<a name="l03321"></a>03321 <span class="preprocessor">#elif defined (__FUNCTION__)</span>
<a name="l03322"></a>03322 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCTION__</span>
<a name="l03323"></a>03323 <span class="preprocessor"></span>
<a name="l03324"></a>03324 <span class="preprocessor">#elif defined (__INTEL_COMPILER) &amp;&amp; (__INTEL_COMPILER &gt;= 600)</span>
<a name="l03325"></a>03325 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNCTION__</span>
<a name="l03326"></a>03326 <span class="preprocessor"></span>
<a name="l03327"></a>03327 <span class="preprocessor">#elif defined (__BORLANDC__) &amp;&amp; (__BORLANDC__ &gt;= 0x550)</span>
<a name="l03328"></a>03328 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __FUNC__</span>
<a name="l03329"></a>03329 <span class="preprocessor"></span>
<a name="l03330"></a>03330 <span class="preprocessor">#elif defined (__STDC_VERSION__) &amp;&amp; (__STDC_VERSION__ &gt;= 199901)</span>
<a name="l03331"></a>03331 <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   __func__</span>
<a name="l03332"></a>03332 <span class="preprocessor"></span>
<a name="l03333"></a>03333 <span class="preprocessor">#elif defined (__PYTHON__)</span>
<a name="l03334"></a>03334 <span class="preprocessor"></span><span class="preprocessor">    #error No Python. No. Using parseltongue languages can lead you to Slytherin.</span>
<a name="l03335"></a>03335 <span class="preprocessor"></span>
<a name="l03336"></a>03336 <span class="preprocessor">#else</span>
<a name="l03337"></a><a class="code" href="a00032.htm#gab170f39ac0e379c324c73495f14a1309">03337</a> <span class="preprocessor"></span><span class="preprocessor">    #define __TX_FUNCTION__   &quot;(&quot; __TX_FILELINE__ &quot;)&quot;</span>
<a name="l03338"></a>03338 <span class="preprocessor"></span>
<a name="l03339"></a>03339 <span class="preprocessor">#endif</span>
<a name="l03340"></a>03340 <span class="preprocessor"></span>
<a name="l03341"></a>03341 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03345"></a>03345 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03346"></a>03346 
<a name="l03347"></a>03347 <span class="preprocessor">#if   !defined (NDEBUG) &amp;&amp;  defined (_DEBUG)</span>
<a name="l03348"></a>03348 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;DEBUG&quot;</span>
<a name="l03349"></a>03349 <span class="preprocessor"></span>
<a name="l03350"></a>03350 <span class="preprocessor">#elif !defined (NDEBUG) &amp;&amp; !defined (_DEBUG)</span>
<a name="l03351"></a><a class="code" href="a00032.htm#ga3e287c38947fea870d01588fbd2a5fc9">03351</a> <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;Debug&quot;</span>
<a name="l03352"></a>03352 <span class="preprocessor"></span>
<a name="l03353"></a>03353 <span class="preprocessor">#elif  defined (NDEBUG)</span>
<a name="l03354"></a>03354 <span class="preprocessor"></span><span class="preprocessor">    #define _TX_BUILDMODE     &quot;Release&quot;</span>
<a name="l03355"></a>03355 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03356"></a>03356 <span class="preprocessor"></span>
<a name="l03358"></a>03358 
<a name="l03359"></a>03359 <span class="preprocessor">#define  TX_PREPROCESS( sym ) _TX_QUOTE (sym)</span>
<a name="l03360"></a>03360 <span class="preprocessor"></span><span class="preprocessor">#define _TX_QUOTE( sym )      #sym</span>
<a name="l03361"></a>03361 <span class="preprocessor"></span>
<a name="l03363"></a>03363 
<a name="l03364"></a>03364 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03371"></a>03371 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03372"></a>03372 
<a name="l03373"></a>03373 <span class="preprocessor">#if !defined (_TX_MODULE)</span>
<a name="l03374"></a><a class="code" href="a00032.htm#ga43d277b4418068ebef1fd2bdbaf550f6">03374</a> <span class="preprocessor"></span><span class="preprocessor">    #define   _TX_MODULE      &quot;TXLib&quot;</span>
<a name="l03375"></a>03375 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03376"></a>03376 <span class="preprocessor"></span>
<a name="l03378"></a>03378 <span class="comment">//}</span>
<a name="l03379"></a>03379 <span class="comment">//=================================================================================================================</span>
<a name="l03380"></a>03380 
<a name="l03381"></a>03381 <span class="comment">//=================================================================================================================</span>
<a name="l03382"></a>03382 <span class="comment">//{          Back-hole (I hope, not an ass-hole:) of the library)</span>
<a name="l03384"></a>03384 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l03386"></a>03386 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03447"></a>03447 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03448"></a>03448 
<a name="l03449"></a>03449 WNDPROC <a class="code" href="a00033.htm#ga30fb1a6913174dfcea5079391f655be2" title="Устанавливает альтернативную функцию обработки оконных сообщений Windows (оконную функцию) для окна T...">txSetWindowsHook</a> (WNDPROC wndProc = NULL);
<a name="l03450"></a>03450 
<a name="l03451"></a>03451 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03476"></a>03476 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03477"></a>03477 
<a name="l03478"></a>03478 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keywordtype">bool</span> wait = <span class="keyword">true</span>);
<a name="l03479"></a>03479 
<a name="l03480"></a>03480 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03491"></a>03491 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03493"></a>03493 <span class="comment"></span>
<a name="l03494"></a>03494 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l03495"></a>03495 
<a name="l03497"></a>03497 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a> (T value);
<a name="l03499"></a>03499 
<a name="l03501"></a>03501 
<a name="l03502"></a>03502 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03524"></a>03524 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03525"></a>03525 
<a name="l03526"></a><a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400">03526</a> <span class="preprocessor">#define txGDI( command )  txUnlock ( (txLock(), (command)) )</span>
<a name="l03527"></a>03527 <span class="preprocessor"></span>
<a name="l03529"></a>03529 <span class="comment">//}</span>
<a name="l03530"></a>03530 <span class="comment">//=================================================================================================================</span>
<a name="l03531"></a>03531 
<a name="l03532"></a>03532 <span class="comment">//=================================================================================================================</span>
<a name="l03533"></a>03533 <span class="comment">//{          Tune-up constants and variables</span>
<a name="l03535"></a>03535 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l03537"></a>03537 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03569"></a>03569 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03570"></a>03570 
<a name="l03571"></a>03571 <span class="preprocessor">#if  defined  (_TX_NOINIT)</span>
<a name="l03572"></a>03572 <span class="preprocessor"></span>
<a name="l03573"></a>03573 <span class="preprocessor">    #undef     _TX_NOINIT</span>
<a name="l03574"></a>03574 <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_NOINIT                 1</span>
<a name="l03575"></a>03575 <span class="preprocessor"></span>
<a name="l03576"></a>03576 <span class="preprocessor">#else</span>
<a name="l03577"></a>03577 <span class="preprocessor"></span>
<a name="l03578"></a><a class="code" href="a00034.htm#gaab281ee20ea6be5eae34d0e15bf03dcf">03578</a> <span class="preprocessor">    #define    _TX_NOINIT                 0</span>
<a name="l03579"></a>03579 <span class="preprocessor"></span>
<a name="l03580"></a>03580 <span class="preprocessor">#endif</span>
<a name="l03581"></a>03581 <span class="preprocessor"></span>
<a name="l03582"></a>03582 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03599"></a>03599 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03600"></a>03600 
<a name="l03601"></a><a class="code" href="a00034.htm#ga05631a37d79a52c0289b3dfa90215250">03601</a> <span class="keywordtype">unsigned</span>       <a class="code" href="a00034.htm#ga05631a37d79a52c0289b3dfa90215250" title="Режим отображения консольного окна. Допустимы любые флаги функции ShowWindow.">_txConsoleMode</a>             = SW_HIDE;
<a name="l03602"></a>03602 
<a name="l03603"></a>03603 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03616"></a>03616 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03617"></a>03617 
<a name="l03618"></a><a class="code" href="a00034.htm#ga5df0d089d6da4f25e603b4fe726f702d">03618</a> <span class="keywordtype">unsigned</span>       <a class="code" href="a00034.htm#ga5df0d089d6da4f25e603b4fe726f702d" title="Стиль графического окна библиотеки.">_txWindowStyle</a>             = WS_POPUP | WS_BORDER | WS_CAPTION | WS_SYSMENU;
<a name="l03619"></a>03619 
<a name="l03620"></a>03620 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03624"></a>03624 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03625"></a>03625 
<a name="l03626"></a><a class="code" href="a00034.htm#ga61836072e0c3887ed70841ff2d12c0d9">03626</a> <span class="keyword">const</span> <span class="keywordtype">char</span>*    <a class="code" href="a00034.htm#ga61836072e0c3887ed70841ff2d12c0d9" title="Шрифт консоли">_txConsoleFont</a>             = <span class="stringliteral">&quot;Lucida Console&quot;</span>;
<a name="l03627"></a>03627 
<a name="l03628"></a>03628 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03631"></a>03631 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03632"></a>03632 
<a name="l03633"></a><a class="code" href="a00034.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3">03633</a> <span class="keywordtype">unsigned</span>       <a class="code" href="a00034.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3" title="Интервал мигания курсора консоли (мс)">_txCursorBlinkInterval</a>     = 500;
<a name="l03634"></a>03634 
<a name="l03635"></a>03635 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03639"></a>03639 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03640"></a>03640 
<a name="l03641"></a><a class="code" href="a00034.htm#ga04cf6a2f12ea617b5a29ce939f673085">03641</a> <span class="keywordtype">int</span>            <a class="code" href="a00034.htm#ga04cf6a2f12ea617b5a29ce939f673085" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>    = 25;
<a name="l03642"></a>03642 
<a name="l03643"></a>03643 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03646"></a>03646 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03647"></a>03647 
<a name="l03648"></a>03648 <span class="preprocessor">#if !defined (TX_TRACE)</span>
<a name="l03649"></a><a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac">03649</a> <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>                = 1000
<a name="l03650"></a>03650 
<a name="l03651"></a>03651 <span class="preprocessor">#else</span>
<a name="l03652"></a>03652 <span class="preprocessor"></span>    <span class="keyword">const</span> <span class="keywordtype">int</span>  <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>                = 5000
<a name="l03653"></a>03653 
<a name="l03654"></a>03654 <span class="preprocessor">#endif</span>
<a name="l03655"></a>03655 <span class="preprocessor"></span>
<a name="l03656"></a>03656 <span class="preprocessor">#if  defined  (_TX_USE_DEVPARTNER)</span>
<a name="l03657"></a>03657 <span class="preprocessor"></span>    * 10
<a name="l03658"></a>03658 <span class="preprocessor">#endif</span>
<a name="l03659"></a>03659 <span class="preprocessor"></span>    ;
<a name="l03660"></a>03660 
<a name="l03661"></a>03661 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03664"></a>03664 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03665"></a>03665 
<a name="l03666"></a><a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25">03666</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>                = 1024;
<a name="l03667"></a>03667 
<a name="l03668"></a>03668 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03671"></a>03671 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03672"></a>03672 
<a name="l03673"></a><a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd">03673</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>             = 2048;
<a name="l03674"></a>03674 
<a name="l03675"></a>03675 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03689"></a>03689 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03690"></a>03690 
<a name="l03691"></a>03691             <span class="comment">// TX_VEGETABLE_PRINTERS</span>
<a name="l03692"></a>03692 <span class="preprocessor">#if !defined  (_TX_WAITABLE_PARENTS)</span>
<a name="l03693"></a><a class="code" href="a00034.htm#ga2c0a4fe0612f109c5c88d6d55a061db5">03693</a> <span class="preprocessor"></span><span class="preprocessor">    #define    _TX_WAITABLE_PARENTS       &quot;cmd.exe:devenv.exe, &quot;                    </span><span class="comment">/* MSVS 2003-2010  */</span> \
<a name="l03694"></a>03694                                           &quot;vcspawn.exe:msdev.exe, &quot;                 <span class="comment">/* MSVS 6          */</span> \
<a name="l03695"></a>03695                                           &quot;cb_console_runner.exe:codeblocks.exe, &quot;  <span class="comment">/* CodeBlocks 8-10 */</span> \
<a name="l03696"></a>03696                                           &quot;cmd.exe:console_runner.exe, &quot;            <span class="comment">/* CodeBlocks 1    */</span> \
<a name="l03697"></a>03697                                           &quot;starter.exe:eclipse.exe, &quot;               <span class="comment">/* Eclipse 4       */</span> \
<a name="l03698"></a>03698                                           &quot;starter.exe:javaw.exe, &quot;                 <span class="comment">/* Eclipse 3       */</span> \
<a name="l03699"></a>03699                                           &quot;consolepauser.exe:devcpp.exe&quot;            <span class="comment">/* Dev-Cpp         */</span>
<a name="l03700"></a>03700 <span class="preprocessor">#endif</span>
<a name="l03701"></a>03701 <span class="preprocessor"></span>
<a name="l03702"></a>03702 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03721"></a>03721 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03722"></a>03722 
<a name="l03723"></a>03723 <span class="preprocessor">#if !defined (_TX_ALLOW_KILL_PARENT)            // DISCLAIMER: Я не призываю к убийству родителей!</span>
<a name="l03724"></a><a class="code" href="a00034.htm#ga9a495d013c6f08cd50220aca99ca56c2">03724</a> <span class="preprocessor"></span><span class="preprocessor">#define       _TX_ALLOW_KILL_PARENT       true  //             Это технический термин.</span>
<a name="l03725"></a>03725 <span class="preprocessor"></span><span class="preprocessor">#endif                                          //             г-дам юристам привет.</span>
<a name="l03726"></a>03726 <span class="preprocessor"></span>
<a name="l03728"></a>03728 <span class="comment">//}</span>
<a name="l03729"></a>03729 <span class="comment">//=================================================================================================================</span>
<a name="l03730"></a>03730 
<a name="l03731"></a>03731 <span class="comment">//=================================================================================================================</span>
<a name="l03732"></a>03732 <span class="comment">//{          Internal diagnostics</span>
<a name="l03734"></a>03734 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l03736"></a>03736 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03759"></a>03759 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03761"></a>03761 <span class="comment"></span>
<a name="l03762"></a>03762 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l03763"></a><a class="code" href="a00034.htm#ga1c7c387b21adad57d0dda2f8bd84ad1c">03763</a> <span class="preprocessor"></span><span class="preprocessor">#define      _TX_ALLOW_TRACE</span>
<a name="l03764"></a>03764 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03765"></a>03765 <span class="preprocessor"></span>
<a name="l03766"></a>03766 <span class="preprocessor">#if defined (_TX_ALLOW_TRACE)</span>
<a name="l03767"></a>03767 <span class="preprocessor"></span><span class="preprocessor">    #undef  $</span>
<a name="l03768"></a>03768 <span class="preprocessor"></span><span class="preprocessor">    #define $                 { _txFile = __FILE__; _txLine = __LINE__; _txFunc = __TX_FUNCTION__; TX_TRACE; }</span>
<a name="l03769"></a>03769 <span class="preprocessor"></span><span class="preprocessor">    #undef  $1</span>
<a name="l03770"></a>03770 <span class="preprocessor"></span><span class="preprocessor">    #define $1                _txFuncEntry __txFuncEntry; $</span>
<a name="l03771"></a>03771 <span class="preprocessor"></span>
<a name="l03772"></a>03772 <span class="preprocessor">#elif defined (_DEBUG)</span>
<a name="l03773"></a>03773 <span class="preprocessor"></span><span class="preprocessor">    #undef  $</span>
<a name="l03774"></a>03774 <span class="preprocessor"></span><span class="preprocessor">    #define $                 { _txFile = __FILE__; _txLine = __LINE__; _txFunc = __TX_FUNCTION__; }</span>
<a name="l03775"></a>03775 <span class="preprocessor"></span><span class="preprocessor">    #undef  $1</span>
<a name="l03776"></a>03776 <span class="preprocessor"></span><span class="preprocessor">    #define $1                _txFuncEntry __txFuncEntry; $</span>
<a name="l03777"></a>03777 <span class="preprocessor"></span>
<a name="l03778"></a>03778 <span class="preprocessor">#else</span>
<a name="l03779"></a>03779 <span class="preprocessor"></span><span class="preprocessor">    #undef  $</span>
<a name="l03780"></a>03780 <span class="preprocessor"></span><span class="preprocessor">    #define $                 ;</span>
<a name="l03781"></a>03781 <span class="preprocessor"></span><span class="preprocessor">    #undef  $1</span>
<a name="l03782"></a>03782 <span class="preprocessor"></span><span class="preprocessor">    #define $1                ;</span>
<a name="l03783"></a>03783 <span class="preprocessor"></span>
<a name="l03784"></a>03784 <span class="preprocessor">#endif</span>
<a name="l03785"></a>03785 <span class="preprocessor"></span>
<a name="l03787"></a>03787 
<a name="l03788"></a>03788 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03789"></a>03789 
<a name="l03791"></a>03791 
<a name="l03792"></a>03792 <span class="keyword">extern</span> <span class="keywordtype">int</span>                     _txInitialized;
<a name="l03793"></a>03793 <span class="keyword">extern</span> <span class="keywordtype">unsigned</span>       <span class="keyword">volatile</span> _txMainThreadId;
<a name="l03794"></a>03794 <span class="keyword">extern</span> <span class="keywordtype">unsigned</span>       <span class="keyword">volatile</span> _txCanvas_ThreadId;
<a name="l03795"></a>03795 <span class="keyword">extern</span> <span class="keywordtype">bool</span>                    _txConsole;
<a name="l03796"></a>03796 <span class="keyword">extern</span> <span class="keywordtype">bool</span>                    _txMain;
<a name="l03797"></a>03797 <span class="keyword">extern</span> <span class="keywordtype">bool</span>                    _txIsDll;
<a name="l03798"></a>03798 <span class="keyword">extern</span> <span class="keywordtype">bool</span>           <span class="keyword">volatile</span> _txRunning;
<a name="l03799"></a>03799 <span class="keyword">extern</span> <span class="keywordtype">bool</span>           <span class="keyword">volatile</span> _txExit;
<a name="l03800"></a>03800 <span class="keyword">extern</span> <span class="keywordtype">bool</span>           <span class="keyword">volatile</span> _txAllowTrace;
<a name="l03801"></a>03801 
<a name="l03802"></a>03802 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*    <span class="keyword">volatile</span> _txFile;
<a name="l03803"></a>03803 <span class="keyword">extern</span> <span class="keywordtype">int</span>            <span class="keyword">volatile</span> _txLine;
<a name="l03804"></a>03804 <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*    <span class="keyword">volatile</span> _txFunc;
<a name="l03805"></a>03805 <span class="keyword">extern</span> _TX_THREAD <span class="keywordtype">int</span> <span class="keyword">volatile</span> _txInTX;
<a name="l03806"></a>03806 
<a name="l03808"></a>03808 
<a name="l03810"></a>03810 
<a name="l03811"></a>03811 <span class="keyword">struct </span>_txFuncEntry
<a name="l03812"></a>03812     {
<a name="l03813"></a>03813     _txFuncEntry() { _txInTX++; }
<a name="l03814"></a>03814    ~_txFuncEntry() { _txInTX--; }
<a name="l03815"></a>03815     };
<a name="l03816"></a>03816 
<a name="l03818"></a>03818 <span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03819"></a>03819 
<a name="l03820"></a>03820 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03850"></a>03850 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03852"></a>03852 <span class="comment"></span>
<a name="l03853"></a>03853 <span class="preprocessor">#ifdef FOR_DOXYGEN_ONLY</span>
<a name="l03854"></a><a class="code" href="a00034.htm#ga2aa2550a5302deb4d46b3759b26f4b41">03854</a> <span class="preprocessor"></span><span class="preprocessor">#define       TX_TRACE</span>
<a name="l03855"></a>03855 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03856"></a>03856 <span class="preprocessor"></span>
<a name="l03857"></a>03857 <span class="preprocessor">#if !defined (TX_TRACE)</span>
<a name="l03858"></a>03858 <span class="preprocessor"></span><span class="preprocessor">    #define   TX_TRACE        if (_txAllowTrace) _txTrace (__FILE__, __LINE__, __TX_FUNCTION__);</span>
<a name="l03859"></a>03859 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l03860"></a>03860 <span class="preprocessor"></span>
<a name="l03862"></a>03862 
<a name="l03863"></a>03863 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03864"></a>03864 
<a name="l03866"></a>03866 
<a name="l03867"></a>03867 <span class="keywordtype">void</span> _txTrace (<span class="keyword">const</span> <span class="keywordtype">char</span> file[], <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> func[], <span class="keyword">const</span> <span class="keywordtype">char</span> msg[]    = NULL,    ...);
<a name="l03868"></a>03868 <span class="keywordtype">void</span> _txTrace (<span class="keyword">const</span> <span class="keywordtype">char</span> file[], <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> func[], <span class="keyword">const</span> <span class="keywordtype">char</span> msg[] <span class="comment">/* = NULL */</span>, ...)
<a name="l03869"></a>03869     {
<a name="l03870"></a>03870     <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span> = GetCurrentThreadId();
<a name="l03871"></a>03871 
<a name="l03872"></a>03872     <span class="keyword">const</span> <span class="keywordtype">char</span> marks[2][2][3] = {{<span class="stringliteral">&quot;uU&quot;</span>, <span class="stringliteral">&quot;cC&quot;</span>}, {<span class="stringliteral">&quot;mM&quot;</span>, <span class="stringliteral">&quot;??&quot;</span>}};
<a name="l03873"></a>03873 
<a name="l03874"></a>03874     <span class="keywordtype">char</span> mark = marks [<span class="keywordtype">id</span> == _txMainThreadId] [<span class="keywordtype">id</span> == _txCanvas_ThreadId] [(_txInTX &gt; 0)];
<a name="l03875"></a>03875 
<a name="l03876"></a>03876     <span class="keywordtype">char</span> msgStr[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l03877"></a>03877     <span class="keywordflow">if</span> (msg)
<a name="l03878"></a>03878         {
<a name="l03879"></a>03879         va_list arg; va_start (arg, msg);
<a name="l03880"></a>03880         _vsnprintf_s (msgStr, <span class="keyword">sizeof</span> (msgStr) - 1 _TX_TRUNCATE, msg, arg);
<a name="l03881"></a>03881         va_end (arg);
<a name="l03882"></a>03882         }
<a name="l03883"></a>03883 
<a name="l03884"></a>03884     <a class="code" href="a00032.htm#gaa924f43cd62016e5e6a8500336add06a" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - %p %c%c%c%c%c%c [%c] - %s (%d)  &quot;</span> <span class="stringliteral">&quot;|%*s%s&quot;</span> <span class="stringliteral">&quot;%s%s\n&quot;</span>,
<a name="l03885"></a>03885                          <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>, (<span class="keywordtype">void</span>*) &amp;_txInitialized,
<a name="l03886"></a>03886                          <span class="stringliteral">&quot;cC&quot;</span>[_txConsole], <span class="stringliteral">&quot;mM&quot;</span>[_txMain], <span class="stringliteral">&quot;dD&quot;</span>[_txIsDll], <span class="stringliteral">&quot;rR&quot;</span>[_txRunning], <span class="stringliteral">&quot;eE&quot;</span>[_txExit], <span class="stringliteral">&quot;tT&quot;</span>[_txAllowTrace],
<a name="l03887"></a>03887                          mark, (file? file : <span class="stringliteral">&quot;(NULL file)&quot;</span>), line, (_txInTX - 1) * 2, <span class="stringliteral">&quot;&quot;</span>, (func? func : <span class="stringliteral">&quot;&quot;</span>),
<a name="l03888"></a>03888                          (*msgStr? <span class="stringliteral">&quot;: &quot;</span> : <span class="stringliteral">&quot;&quot;</span>), msgStr);
<a name="l03889"></a>03889     }
<a name="l03890"></a>03890 
<a name="l03892"></a>03892 <span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03893"></a>03893 
<a name="l03894"></a>03894 <span class="comment">//=================================================================================================================</span>
<a name="l03895"></a>03895 <span class="comment">//{          Sweet critical section blocking: txAutoLock class</span>
<a name="l03896"></a>03896 <span class="comment">//=================================================================================================================</span>
<a name="l03897"></a>03897 
<a name="l03898"></a>03898 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03914"></a>03914 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03915"></a>03915 
<a name="l03917"></a>03917 <span class="keyword">extern</span> CRITICAL_SECTION _txCanvas_LockBackBuf;
<a name="l03919"></a>03919 
<a name="l03920"></a><a class="code" href="a00008.htm">03920</a> <span class="keyword">class </span><a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>
<a name="l03921"></a>03921     {
<a name="l03922"></a>03922     <span class="keyword">public</span>:
<a name="l03923"></a>03923 
<a name="l03924"></a>03924 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03946"></a>03946 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03947"></a>03947 
<a name="l03948"></a><a class="code" href="a00008.htm#a61feaeca08bc74354fae1dc8ef55b31a">03948</a>     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (CRITICAL_SECTION* cs, <span class="keywordtype">bool</span> mandatory = <span class="keyword">true</span>) :
<a name="l03949"></a>03949         cs_ (cs)
<a name="l03950"></a>03950         {
<a name="l03951"></a>03951 $1      <span class="keywordflow">if</span> (!cs_) <span class="keywordflow">return</span>;
<a name="l03952"></a>03952 
<a name="l03953"></a>03953         <span class="keywordflow">if</span> (mandatory) { $    EnterCriticalSection (cs_);                   }
<a name="l03954"></a>03954         <span class="keywordflow">else</span>           { $ TryEnterCriticalSection (cs_)? 0 : (cs_ = NULL); }
<a name="l03955"></a>03955         }
<a name="l03956"></a>03956 
<a name="l03957"></a>03957 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03969"></a>03969 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03970"></a>03970 
<a name="l03971"></a><a class="code" href="a00008.htm#a7cf59bdea297feba1a8a1695657817b9">03971</a>     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (<span class="keywordtype">bool</span> mandatory = <span class="keyword">true</span>) :
<a name="l03972"></a>03972         cs_ (NULL)
<a name="l03973"></a>03973         {
<a name="l03974"></a>03974 $1      <span class="keyword">new</span> (<span class="keyword">this</span>) <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> (&amp;_txCanvas_LockBackBuf, mandatory);
<a name="l03975"></a>03975         }
<a name="l03976"></a>03976 
<a name="l03977"></a>03977 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03979"></a>03979 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03980"></a>03980 
<a name="l03981"></a><a class="code" href="a00008.htm#a65ee5bd5cf2560f863a2c8caf26ceb81">03981</a>    ~<a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>()
<a name="l03982"></a>03982         {
<a name="l03983"></a>03983 $1      <span class="keywordflow">if</span> (!cs_) <span class="keywordflow">return</span>;
<a name="l03984"></a>03984 $       LeaveCriticalSection (cs_); cs_ = NULL;
<a name="l03985"></a>03985         }
<a name="l03986"></a>03986 
<a name="l03987"></a>03987 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03990"></a>03990 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l03991"></a>03991 
<a name="l03992"></a><a class="code" href="a00008.htm#aa385aa18f5e42db5a415c25a90f4193d">03992</a>     operator bool ()<span class="keyword"> const</span>
<a name="l03993"></a>03993 <span class="keyword">        </span>{
<a name="l03994"></a>03994 $1      <span class="keywordflow">return</span> (cs_ != NULL);
<a name="l03995"></a>03995         }
<a name="l03996"></a>03996 
<a name="l03997"></a>03997 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l03999"></a>03999 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04000"></a>04000 
<a name="l04001"></a>04001 <span class="comment">//  private:</span>
<a name="l04002"></a><a class="code" href="a00008.htm#a331135d21727f8d293dc9e112ebc59c5">04002</a>     CRITICAL_SECTION* <a class="code" href="a00008.htm#a331135d21727f8d293dc9e112ebc59c5" title="Блокируемая критическая секция">cs_</a>;
<a name="l04003"></a>04003 
<a name="l04004"></a>04004 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04006"></a>04006 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04008"></a>04008 <span class="comment"></span>
<a name="l04009"></a>04009     <span class="keyword">private</span>:
<a name="l04010"></a>04010     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>             (<span class="keyword">const</span> <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>&amp;);
<a name="l04011"></a>04011     <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>&amp; operator = (<span class="keyword">const</span> <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a>&amp;);
<a name="l04012"></a>04012 
<a name="l04014"></a>04014 
<a name="l04015"></a>04015     };
<a name="l04016"></a>04016 
<a name="l04017"></a>04017 <span class="comment">//}</span>
<a name="l04018"></a>04018 <span class="comment">//=================================================================================================================</span>
<a name="l04019"></a>04019 
<a name="l04021"></a>04021 <span class="comment">//}</span>
<a name="l04022"></a>04022 <span class="comment">//=================================================================================================================</span>
<a name="l04023"></a>04023 
<a name="l04024"></a>04024 <span class="comment">//=================================================================================================================</span>
<a name="l04025"></a>04025 <span class="comment">//{          Dialogs: txDialog class</span>
<a name="l04027"></a>04027 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l04029"></a>04029 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04047"></a>04047 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04048"></a>04048 
<a name="l04049"></a><a class="code" href="a00009.htm">04049</a> <span class="keyword">struct </span><a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>
<a name="l04050"></a>04050     {
<a name="l04051"></a>04051 
<a name="l04052"></a>04052 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04065"></a>04065 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04066"></a>04066 
<a name="l04067"></a>04067     <span class="keyword">public</span>:
<a name="l04068"></a><a class="code" href="a00031.htm#ga077745aacfb8431d6529e20ad67d1674">04068</a>     <span class="keyword">enum</span> <a class="code" href="a00031.htm#ga077745aacfb8431d6529e20ad67d1674" title="Константы для задания типа контрола.">CONTROL</a>
<a name="l04069"></a>04069         {
<a name="l04070"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230">04070</a>         DIALOG    = 0x00000000,                  
<a name="l04071"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565">04071</a>         BUTTON    = 0xFFFF0080,                  
<a name="l04072"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a2ca2e6cc3897a6960816076f3237bc9c">04072</a>         EDIT      = 0xFFFF0081,                  
<a name="l04073"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674ae55a36a850c67d46b3b3325de7fce0b8">04073</a>         STATIC    = 0xFFFF0082,                  
<a name="l04074"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a097e68cde08918fb77838059126485f7">04074</a>         LISTBOX   = 0xFFFF0083,                  
<a name="l04075"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a95f321f7f597a08478ddfd6fbb763a2f">04075</a>         SCROLLBAR = 0xFFFF0084,                  
<a name="l04076"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674aeb6d73055f99e0170907c4352dd1c448">04076</a>         COMBOBOX  = 0xFFFF0085,                  
<a name="l04077"></a><a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924">04077</a>         END       = 0x00000000                   
<a name="l04078"></a>04078         };
<a name="l04079"></a>04079 
<a name="l04080"></a>04080 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04097"></a>04097 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04098"></a>04098 
<a name="l04099"></a>04099     <span class="keyword">public</span>:
<a name="l04100"></a><a class="code" href="a00007.htm">04100</a>     <span class="keyword">struct </span><a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>
<a name="l04101"></a>04101         {
<a name="l04102"></a><a class="code" href="a00007.htm#aef0e185c3b1c26598c04af6fc185afd2">04102</a>         <a class="code" href="a00031.htm#ga077745aacfb8431d6529e20ad67d1674" title="Константы для задания типа контрола.">CONTROL</a>     <a class="code" href="a00007.htm#aef0e185c3b1c26598c04af6fc185afd2" title="Тип контрола">wndclass</a>;                    
<a name="l04103"></a><a class="code" href="a00007.htm#a80d1a77abfa3f1d4158ec3de9e61bb88">04103</a>         <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00007.htm#a80d1a77abfa3f1d4158ec3de9e61bb88" title="Название или текст">caption</a>;                     
<a name="l04104"></a><a class="code" href="a00007.htm#a7b7a6396b2c82ad46c6d8b2bf141a8dd">04104</a>         WORD        <a class="code" href="a00007.htm#a7b7a6396b2c82ad46c6d8b2bf141a8dd" title="Идентификатор контрола">id</a>;                          
<a name="l04105"></a><a class="code" href="a00007.htm#ad34729e4edc23ac502eaa17b188df67b">04105</a>         <span class="keywordtype">short</span>        <a class="code" href="a00007.htm#ad34729e4edc23ac502eaa17b188df67b" title="Координата верхнего левого угла">x</a>;                          
<a name="l04106"></a><a class="code" href="a00007.htm#a34769302b056076dd9f0cd95de8c5d2f">04106</a>         <span class="keywordtype">short</span>        <a class="code" href="a00007.htm#a34769302b056076dd9f0cd95de8c5d2f" title="Координата нижнего правого угла">y</a>;                          
<a name="l04107"></a><a class="code" href="a00007.htm#ad412d3c503fde76edb4b79e9bb5bdee4">04107</a>         <span class="keywordtype">short</span>       <a class="code" href="a00007.htm#ad412d3c503fde76edb4b79e9bb5bdee4" title="Размер по X.">sx</a>;                          
<a name="l04108"></a><a class="code" href="a00007.htm#a0153fced86e1addd87ec429590e82741">04108</a>         <span class="keywordtype">short</span>       <a class="code" href="a00007.htm#a0153fced86e1addd87ec429590e82741" title="Размер по Y.">sy</a>;                          
<a name="l04109"></a><a class="code" href="a00007.htm#a7e39a7a8f3d68749766e46dd311f41fd">04109</a>         DWORD       <a class="code" href="a00007.htm#a7e39a7a8f3d68749766e46dd311f41fd" title="Стиль контрола">style</a>;                       
<a name="l04110"></a>04110 
<a name="l04111"></a><a class="code" href="a00007.htm#ad41674a1cf26ce09ed78be29f12ea121">04111</a>         <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00007.htm#ad41674a1cf26ce09ed78be29f12ea121" title="Шрифт диалогового окна">font</a>;                        
<a name="l04112"></a><a class="code" href="a00007.htm#ad71d13adce565c8e4692040b8c4cba83">04112</a>         WORD        <a class="code" href="a00007.htm#ad71d13adce565c8e4692040b8c4cba83" title="Размер шрифта диалогового окна">fontsize</a>;                    
<a name="l04113"></a>04113         };
<a name="l04114"></a>04114 
<a name="l04115"></a>04115 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04123"></a>04123 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04124"></a>04124 
<a name="l04125"></a>04125     <span class="keyword">public</span>:
<a name="l04126"></a>04126     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>();
<a name="l04127"></a>04127 
<a name="l04128"></a>04128 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04138"></a>04138 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04139"></a>04139 
<a name="l04140"></a>04140     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a> (<span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>* layout);
<a name="l04141"></a>04141 
<a name="l04142"></a>04142 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04144"></a>04144 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04145"></a>04145 
<a name="l04146"></a><a class="code" href="a00009.htm#a39d59590ff0d9bc50daab64d37743997">04146</a>     <span class="keyword">virtual</span> <a class="code" href="a00009.htm#a39d59590ff0d9bc50daab64d37743997" title="Деструктор.">~txDialog</a>() {};
<a name="l04147"></a>04147 
<a name="l04148"></a>04148 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04160"></a>04160 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04161"></a>04161 
<a name="l04162"></a>04162     <span class="keyword">const</span> Layout* setLayout (<span class="keyword">const</span> Layout *layout);
<a name="l04163"></a>04163 
<a name="l04164"></a>04164 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04182"></a>04182 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04183"></a>04183 
<a name="l04184"></a>04184     <span class="keyword">virtual</span> <span class="keywordtype">int</span> dialogProc (HWND _wnd, UINT _msg, WPARAM _wParam, LPARAM _lParam);
<a name="l04185"></a>04185 
<a name="l04186"></a>04186 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04202"></a>04202 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04203"></a>04203 
<a name="l04204"></a>04204     INT_PTR dialogBox (<span class="keyword">const</span> Layout* layout = NULL, <span class="keywordtype">size_t</span> bufsize = 0);
<a name="l04205"></a>04205 
<a name="l04206"></a>04206 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04219"></a>04219 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04220"></a>04220 
<a name="l04221"></a>04221     INT_PTR dialogBox (WORD resource);
<a name="l04222"></a>04222 
<a name="l04223"></a>04223 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04225"></a>04225 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04226"></a>04226 
<a name="l04227"></a>04227     <span class="keyword">private</span>:
<a name="l04228"></a>04228     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a> (<span class="keyword">const</span> <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>&amp;);
<a name="l04229"></a>04229     <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>&amp; operator = (<span class="keyword">const</span> <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>&amp;);
<a name="l04230"></a>04230 
<a name="l04231"></a>04231 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04233"></a>04233 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04234"></a>04234 
<a name="l04235"></a>04235     <span class="keyword">private</span>:
<a name="l04236"></a>04236     <span class="keyword">static</span> ptrdiff_t CALLBACK dialogProc__ (HWND wnd, UINT msg, WPARAM wParam, LPARAM lParam);
<a name="l04237"></a>04237 
<a name="l04238"></a>04238 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04240"></a>04240 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04241"></a>04241 
<a name="l04242"></a>04242     <span class="keyword">private</span>:
<a name="l04243"></a><a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7">04243</a>     <span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">Layout</a>* <a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7" title="Текущий макет диалога.">layout_</a>;
<a name="l04244"></a>04244     };
<a name="l04245"></a>04245 
<a name="l04247"></a>04247 <span class="comment">//}</span>
<a name="l04248"></a>04248 <span class="comment">//=================================================================================================================</span>
<a name="l04249"></a>04249 
<a name="l04250"></a>04250 <span class="comment">//=================================================================================================================</span>
<a name="l04251"></a>04251 <span class="comment">//{          Dialogs: Message Map macros</span>
<a name="l04253"></a>04253 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l04255"></a>04255 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04266"></a>04266 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04267"></a>04267 
<a name="l04268"></a><a class="code" href="a00032.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8">04268</a> <span class="preprocessor">#define TX_BEGIN_MESSAGE_MAP()                                                     \</span>
<a name="l04269"></a>04269 <span class="preprocessor">    virtual int dialogProc (HWND _wnd, UINT _msg, WPARAM _wParam, LPARAM _lParam)  \</span>
<a name="l04270"></a>04270 <span class="preprocessor">        {                                                                          \</span>
<a name="l04271"></a>04271 <span class="preprocessor">        (void)_wnd; (void)_msg; (void)_wParam; (void)_lParam;                      \</span>
<a name="l04272"></a>04272 <span class="preprocessor">                                                                                   \</span>
<a name="l04273"></a>04273 <span class="preprocessor">        switch (_msg)                                                              \</span>
<a name="l04274"></a>04274 <span class="preprocessor">            {                                                                      \</span>
<a name="l04275"></a>04275 <span class="preprocessor">            case WM_NULL:</span>
<a name="l04276"></a>04276 <span class="preprocessor"></span>
<a name="l04277"></a>04277 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04290"></a>04290 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04291"></a>04291 
<a name="l04292"></a><a class="code" href="a00032.htm#gadbe2f17002d8d41056e9770066ef558b">04292</a> <span class="preprocessor">#define TX_HANDLE( id )                                                            \</span>
<a name="l04293"></a>04293 <span class="preprocessor">            break;                                                                 \</span>
<a name="l04294"></a>04294 <span class="preprocessor">            case (id):</span>
<a name="l04295"></a>04295 <span class="preprocessor"></span>
<a name="l04296"></a>04296 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04307"></a>04307 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04308"></a>04308 
<a name="l04309"></a><a class="code" href="a00032.htm#ga3637c3398b6ebfa337171beec0770fe4">04309</a> <span class="preprocessor">#define TX_COMMAND_MAP                                                             \</span>
<a name="l04310"></a>04310 <span class="preprocessor">            default: break;                                                        \</span>
<a name="l04311"></a>04311 <span class="preprocessor">            }                                                                      \</span>
<a name="l04312"></a>04312 <span class="preprocessor">                                                                                   \</span>
<a name="l04313"></a>04313 <span class="preprocessor">        if (_msg == WM_COMMAND) switch (LOWORD (_wParam))                          \</span>
<a name="l04314"></a>04314 <span class="preprocessor">            {                                                                      \</span>
<a name="l04315"></a>04315 <span class="preprocessor">            case 0:</span>
<a name="l04316"></a>04316 <span class="preprocessor"></span>
<a name="l04317"></a>04317 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04328"></a>04328 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04329"></a>04329 
<a name="l04330"></a><a class="code" href="a00032.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd">04330</a> <span class="preprocessor">#define TX_END_MESSAGE_MAP                                                         \</span>
<a name="l04331"></a>04331 <span class="preprocessor">            default: break;                                                        \</span>
<a name="l04332"></a>04332 <span class="preprocessor">            }                                                                      \</span>
<a name="l04333"></a>04333 <span class="preprocessor">                                                                                   \</span>
<a name="l04334"></a>04334 <span class="preprocessor">        return FALSE;                                                              \</span>
<a name="l04335"></a>04335 <span class="preprocessor">        }</span>
<a name="l04336"></a>04336 <span class="preprocessor"></span>
<a name="l04338"></a>04338 <span class="comment">//}</span>
<a name="l04339"></a>04339 <span class="comment">//=================================================================================================================</span>
<a name="l04340"></a>04340 
<a name="l04341"></a>04341 <span class="comment">//=================================================================================================================</span>
<a name="l04342"></a>04342 <span class="comment">//{          Dialogs: txDialog example: txInputBox()</span>
<a name="l04344"></a>04344 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l04346"></a>04346 <span class="comment"></span><span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l04366"></a>04366 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l04367"></a>04367 
<a name="l04368"></a>04368 <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00031.htm#ga364e78410e64fb751d3a0253d08f98e2" title="Ввод строки в отдельном окне.">txInputBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* caption = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* input = NULL);
<a name="l04369"></a>04369 
<a name="l04370"></a><a class="code" href="a00031.htm#ga364e78410e64fb751d3a0253d08f98e2">04370</a> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00031.htm#ga364e78410e64fb751d3a0253d08f98e2" title="Ввод строки в отдельном окне.">txInputBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text, <span class="keyword">const</span> <span class="keywordtype">char</span>* caption, <span class="keyword">const</span> <span class="keywordtype">char</span>* input)
<a name="l04371"></a>04371     {
<a name="l04372"></a>04372     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04373"></a>04373     <span class="comment">// Если не указаны параметры, приходится использовать хоть какие-то надписи.</span>
<a name="l04374"></a>04374     <span class="comment">// txGetModuleFileName() - имя EXE-файла, на случай, если кое-кто поленился задать название.</span>
<a name="l04375"></a>04375     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04376"></a>04376 
<a name="l04377"></a>04377     <span class="keywordflow">if</span> (!text)    text    = <span class="stringliteral">&quot;Введите строку:&quot;</span>;
<a name="l04378"></a>04378     <span class="keywordflow">if</span> (!caption) caption = <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>);
<a name="l04379"></a>04379     <span class="keywordflow">if</span> (!input)   input   = <span class="stringliteral">&quot;&quot;</span>;
<a name="l04380"></a>04380 
<a name="l04381"></a>04381     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04382"></a>04382     <span class="comment">// Идентификаторы элементов диалога. Они требуются в GetDlgItemText().</span>
<a name="l04383"></a>04383     <span class="comment">// Если диалог строится не вручную, а редактором ресурсов, то они задаются в нем автоматически.</span>
<a name="l04384"></a>04384     <span class="comment">// У нас же тут - хардкор стайл, к сожалению. Причина в том, что у разных сред программирования</span>
<a name="l04385"></a>04385     <span class="comment">// разные редакторы ресурсов и системы сборки. Поэтому для независимости от них все будет</span>
<a name="l04386"></a>04386     <span class="comment">// строиться на этапе выполнения, динамически. Вы еще гляньте, как это реализовано в</span>
<a name="l04387"></a>04387     <span class="comment">// txDialog::dialogBox() и функциях _tx_DLGTEMPLATE_()... О_о</span>
<a name="l04388"></a>04388     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04389"></a>04389 
<a name="l04390"></a>04390 <span class="preprocessor">    #define ID_TEXT_  101</span>
<a name="l04391"></a>04391 <span class="preprocessor"></span><span class="preprocessor">    #define ID_INPUT_ 102</span>
<a name="l04392"></a>04392 <span class="preprocessor"></span>
<a name="l04393"></a>04393     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04394"></a>04394     <span class="comment">// Задание макета (вида) диалога в виде массива структур.</span>
<a name="l04395"></a>04395     <span class="comment">// С помощью особого порядка полей в структуре txDialog::Layout и констант из класса</span>
<a name="l04396"></a>04396     <span class="comment">// txDialog этот массив становится похож на описание ресурса диалога в .rc - файле.</span>
<a name="l04397"></a>04397     <span class="comment">// См. описание синтаксиса rc-файла в документации по Win32 (MSDN, http://msdn.com).</span>
<a name="l04398"></a>04398     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04399"></a>04399 
<a name="l04400"></a>04400     <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a> layout[] =
<a name="l04401"></a>04401 
<a name="l04402"></a>04402     <span class="comment">//----------------------+----------+-----------+-----------------+---------------------------------------------</span>
<a name="l04403"></a>04403     <span class="comment">//     Тип элемента     | Имя      | Иденти-   |   Координаты    | Флаги элементов</span>
<a name="l04404"></a>04404     <span class="comment">//     диалога          | элемента | фикатор   |-----------------| (см. описание элементов</span>
<a name="l04405"></a>04405     <span class="comment">//                      |          | элемента  | X | Y |Шир.|Выс.| окон диалога в MSDN)</span>
<a name="l04406"></a>04406     <span class="comment">//----------------------+----------+-----------+---+---+----+----+---------------------------------------------</span>
<a name="l04407"></a>04407     <span class="comment">//                      |          |           |   |   |    |    |</span>
<a name="l04408"></a>04408         {{ <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230" title="Начало описания диалога">txDialog::DIALOG</a>,  caption,   0,           0,  0, 240,  85                                                    },
<a name="l04409"></a>04409          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674ae55a36a850c67d46b3b3325de7fce0b8" title="Нередактируемый элемент (текст, картинка и т.д.)">txDialog::STATIC</a>,  text,      ID_TEXT_,   10, 10, 150,  40, SS_LEFT                                           },
<a name="l04410"></a>04410          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a2ca2e6cc3897a6960816076f3237bc9c" title="Редактируемый текст">txDialog::EDIT</a>,    input,     ID_INPUT_,  10, 60, 220,  15, ES_LEFT | WS_BORDER | ES_AUTOHSCROLL | WS_TABSTOP },
<a name="l04411"></a>04411          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565" title="Кнопка">txDialog::BUTTON</a>,  <span class="stringliteral">&quot;&amp;OK&quot;</span>,     IDOK,      180, 10,  50,  15, BS_DEFPUSHBUTTON                     | WS_TABSTOP },
<a name="l04412"></a>04412          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a7d67f007544f534278ecca3cdca12565" title="Кнопка">txDialog::BUTTON</a>,  <span class="stringliteral">&quot;&amp;Cancel&quot;</span>, IDCANCEL,  180, 30,  50,  15, BS_PUSHBUTTON                        | WS_TABSTOP },
<a name="l04413"></a>04413          { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924" title="Конец описания диалога">txDialog::END</a>                                                                                                 }};
<a name="l04414"></a>04414 
<a name="l04415"></a>04415     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04416"></a>04416     <span class="comment">// Класс диалога для InputBox. Внутренний, т.к. зачем ему быть внешним.</span>
<a name="l04417"></a>04417     <span class="comment">// Нужен в основном для задания строки ввода (str) и оконной функции диалогового окна,</span>
<a name="l04418"></a>04418     <span class="comment">// требуемой Win32 (она построена макросами TX_BEGIN_MESSAGE_MAP и другими). Можно не делать</span>
<a name="l04419"></a>04419     <span class="comment">// внутреннего класса, но тогда оконную функцию придется писать в глобальной области видимости,</span>
<a name="l04420"></a>04420     <span class="comment">// и str объявлять глобально тоже (или передавать ее адрес через DialogBoxParam и записывать</span>
<a name="l04421"></a>04421     <span class="comment">// его в класс во время обработки WM_INITDIALOG).</span>
<a name="l04422"></a>04422     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04423"></a>04423     <span class="keyword">struct </span>inputDlg : <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>
<a name="l04424"></a>04424         {
<a name="l04425"></a>04425         <span class="keywordtype">char</span> str [1024];
<a name="l04426"></a>04426 
<a name="l04427"></a>04427         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l04428"></a>04428 
<a name="l04429"></a>04429         inputDlg() :
<a name="l04430"></a>04430             str()                               <span class="comment">// Обнуление всей строки. Не работает на старых</span>
<a name="l04431"></a>04431             {                                   <span class="comment">//     компиляторах, поэтому еще раз:</span>
<a name="l04432"></a>04432             memset (str, 0, <span class="keyword">sizeof</span> (str));      <span class="comment">// Обнуление всей строки</span>
<a name="l04433"></a>04433             }
<a name="l04434"></a>04434 
<a name="l04435"></a>04435         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l04436"></a>04436 
<a name="l04437"></a>04437         <a class="code" href="a00032.htm#gaf6ea524e3c76ba5c8a0d1fa6b81d55b8" title="Заголовок карты сообщений (Message Map).">TX_BEGIN_MESSAGE_MAP</a>()    <span class="comment">// Карта сообщений. На самом деле это начало оконной функции.</span>
<a name="l04438"></a>04438 
<a name="l04439"></a>04439             <a class="code" href="a00032.htm#ga3637c3398b6ebfa337171beec0770fe4" title="Начало карты команд (Command map) в карте сообщений.">TX_COMMAND_MAP</a>        <span class="comment">// Здесь обрабатываются WM_COMMAND. На самом деле это switch.</span>
<a name="l04440"></a>04440 
<a name="l04441"></a>04441                 <span class="comment">//-------------------------------------------------------------------------------------------------</span>
<a name="l04442"></a>04442                 <span class="comment">// При нажатии кнопки OK копируем строку из поля ввода в нашу переменную str,</span>
<a name="l04443"></a>04443                 <span class="comment">// т.к. после закрытия диалога строка ввода умрет и текст уже из нее получить.</span>
<a name="l04444"></a>04444                 <span class="comment">// Этот макрос на самом деле превращается в case из оператора switch.</span>
<a name="l04445"></a>04445                 <span class="comment">// _wnd - это параметр оконной функции, см. определение макроса TX_BEGIN_MESSAGE_MAP().</span>
<a name="l04446"></a>04446                 <span class="comment">//-------------------------------------------------------------------------------------------------</span>
<a name="l04447"></a>04447 
<a name="l04448"></a>04448                 <a class="code" href="a00032.htm#gadbe2f17002d8d41056e9770066ef558b" title="Заголовок обработчика сообщения (Message handler) карты сообщений.">TX_HANDLE</a> (IDOK) GetDlgItemText (_wnd, ID_INPUT_, str, <span class="keyword">sizeof</span> (str) - 1);
<a name="l04449"></a>04449 
<a name="l04450"></a>04450         <a class="code" href="a00032.htm#ga3f4a70a0e5076cb4f4addcab0ca760cd" title="Завершитель карты сообщений.">TX_END_MESSAGE_MAP</a>
<a name="l04451"></a>04451 
<a name="l04452"></a>04452         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l04453"></a>04453         <span class="comment">// Конец внутреннего класса диалога</span>
<a name="l04454"></a>04454         <span class="comment">//---------------------------------------------------------------------------------------------------------</span>
<a name="l04455"></a>04455 
<a name="l04456"></a>04456         };
<a name="l04457"></a>04457 
<a name="l04458"></a>04458     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04459"></a>04459     <span class="comment">// Убираем дефайны, чтобы потом не мешали.</span>
<a name="l04460"></a>04460     <span class="comment">// От этого они получаются &quot;локального действия&quot;, как будто у них была бы область видимости -</span>
<a name="l04461"></a>04461     <span class="comment">// функция. На самом деле это сделано вручную через #undef. Чтобы подчеркнуть их локальную</span>
<a name="l04462"></a>04462     <span class="comment">// природу, у них имена заканчиваются на _. Такие дейфайны потом не перекосячат весь код после</span>
<a name="l04463"></a>04463     <span class="comment">// того как, фактически, стали уже не нужны.</span>
<a name="l04464"></a>04464     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04465"></a>04465 
<a name="l04466"></a>04466 <span class="preprocessor">    #undef ID_TEXT_</span>
<a name="l04467"></a>04467 <span class="preprocessor"></span><span class="preprocessor">    #undef ID_INPUT_</span>
<a name="l04468"></a>04468 <span class="preprocessor"></span>
<a name="l04469"></a>04469     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04470"></a>04470     <span class="comment">// Это статический объект, потому что строка в нем должна жить после завершения функции.</span>
<a name="l04471"></a>04471     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04472"></a>04472 
<a name="l04473"></a>04473     <span class="keyword">static</span> inputDlg dlg;
<a name="l04474"></a>04474 
<a name="l04475"></a>04475     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04476"></a>04476     <span class="comment">// Передаем layout и запускаем окно диалога</span>
<a name="l04477"></a>04477     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04478"></a>04478 
<a name="l04479"></a>04479     dlg.dialogBox (layout);
<a name="l04480"></a>04480 
<a name="l04481"></a>04481     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04482"></a>04482     <span class="comment">// Возвращаем адрес строки из статического объекта. Так можно делать, потому что статический</span>
<a name="l04483"></a>04483     <span class="comment">// объект не умрет при выходе из функции и строка в нем, соответственно, тоже. Адрес</span>
<a name="l04484"></a>04484     <span class="comment">// нестатических переменных передавать синтаксически можно, но ведет к серьезным ошибкам.</span>
<a name="l04485"></a>04485     <span class="comment">//-------------------------------------------------------------------------------------------------------------</span>
<a name="l04486"></a>04486 
<a name="l04487"></a>04487     <span class="keywordflow">return</span> dlg.str;
<a name="l04488"></a>04488     }
<a name="l04489"></a>04489 
<a name="l04491"></a>04491 <span class="comment">//}</span>
<a name="l04492"></a>04492 <span class="comment">//=================================================================================================================</span>
<a name="l04493"></a>04493 
<a name="l04494"></a>04494 <span class="comment">//}</span>
<a name="l04495"></a>04495 <span class="comment">//=================================================================================================================</span>
<a name="l04496"></a>04496 
<a name="l04497"></a>04497 <span class="comment">//=================================================================================================================</span>
<a name="l04498"></a>04498 <span class="comment">//{          TXLIB IMPLEMENTATION</span>
<a name="l04499"></a>04499 <span class="comment">//           Реализация функций библиотеки</span>
<a name="l04500"></a>04500 <span class="comment">//=================================================================================================================</span>
<a name="l04502"></a>04502 <span class="comment"></span>
<a name="l04503"></a>04503 <span class="comment">//=================================================================================================================</span>
<a name="l04504"></a>04504 <span class="comment">//{          [Internal] Function prototypes, macros and constants</span>
<a name="l04505"></a>04505 <span class="comment">//           Прототипы внутренних функций, макросы и константы</span>
<a name="l04506"></a>04506 <span class="comment">//=================================================================================================================</span>
<a name="l04507"></a>04507 
<a name="l04508"></a>04508 <span class="keyword">const</span> <span class="keywordtype">int</span>     _TX_CP                = 1251;   <span class="comment">// Информация о локали</span>
<a name="l04509"></a>04509 <span class="keyword">const</span> <span class="keywordtype">char</span>    _TX_LC_CTYPE[]        = <span class="stringliteral">&quot;Russian&quot;</span>;
<a name="l04510"></a>04510 <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> _TX_LC_CTYPE_W[]      = L<span class="stringliteral">&quot;Russian_Russia.ACP&quot;</span>;
<a name="l04511"></a>04511 
<a name="l04512"></a>04512 <span class="keyword">const</span> <span class="keywordtype">int</span>     _TX_IDM_ABOUT         = 40000;  <span class="comment">// Идентификаторы системного меню окна</span>
<a name="l04513"></a>04513 <span class="keyword">const</span> <span class="keywordtype">int</span>     _TX_IDM_CONSOLE       = 40001;
<a name="l04514"></a>04514 
<a name="l04515"></a>04515 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04516"></a>04516 
<a name="l04517"></a>04517 <span class="keywordtype">int</span>              _txInitialize();
<a name="l04518"></a>04518 <span class="keywordtype">void</span>             _txCleanup();
<a name="l04519"></a>04519 
<a name="l04520"></a>04520 HWND             _txCanvas_CreateWindow (SIZE* size);
<a name="l04521"></a>04521 <span class="keyword">inline</span> <span class="keywordtype">bool</span>      _txCanvas_OK();
<a name="l04522"></a>04522 
<a name="l04523"></a>04523 <span class="keywordtype">bool</span>             _txCanvas_OnCREATE     (HWND wnd);
<a name="l04524"></a>04524 <span class="keywordtype">bool</span>             _txCanvas_OnDESTROY    (HWND wnd);
<a name="l04525"></a>04525 <span class="keywordtype">bool</span>             _txCanvas_OnCLOSE      (HWND);
<a name="l04526"></a>04526 <span class="keywordtype">bool</span>             _txCanvas_OnPAINT      (HWND wnd);
<a name="l04527"></a>04527 <span class="keywordtype">bool</span>             _txCanvas_OnKEYDOWN    (HWND wnd, WPARAM vk, LPARAM info);
<a name="l04528"></a>04528 <span class="keywordtype">bool</span>             _txCanvas_OnCHAR       (HWND wnd, WPARAM ch, LPARAM info);
<a name="l04529"></a>04529 <span class="keywordtype">bool</span>             _txCanvas_OnTIMER      (HWND wnd, WPARAM <span class="keywordtype">id</span>);
<a name="l04530"></a>04530 <span class="keywordtype">bool</span>             _txCanvas_OnMOUSEMOVE  (HWND wnd, WPARAM buttons, LPARAM coords);
<a name="l04531"></a>04531 <span class="keywordtype">bool</span>             _txCanvas_OnCmdCONSOLE (HWND wnd, WPARAM cmd);
<a name="l04532"></a>04532 <span class="keywordtype">bool</span>             _txCanvas_OnCmdABOUT   (HWND wnd, WPARAM cmd);
<a name="l04533"></a>04533 
<a name="l04534"></a>04534 <span class="keywordtype">unsigned</span> WINAPI  _txCanvas_ThreadProc (<span class="keywordtype">void</span>* data);
<a name="l04535"></a>04535 LRESULT CALLBACK _txCanvas_WndProc (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar);
<a name="l04536"></a>04536 
<a name="l04537"></a>04537 <span class="keywordtype">int</span>              _txCanvas_SetRefreshLock (<span class="keywordtype">int</span> count);
<a name="l04538"></a>04538 
<a name="l04539"></a>04539 HDC              _txBuffer_Create (HWND wnd, <span class="keyword">const</span> POINT* size = NULL, HBITMAP bmap = NULL);
<a name="l04540"></a>04540 <span class="keywordtype">bool</span>             _txBuffer_Delete (HDC* dc);
<a name="l04541"></a>04541 <span class="keywordtype">bool</span>             _txBuffer_Select (HGDIOBJ obj, HDC dc = <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>());
<a name="l04542"></a>04542 
<a name="l04543"></a>04543 HWND             _txConsole_Attach();
<a name="l04544"></a>04544 <span class="keywordtype">bool</span>             _txConsole_OK();
<a name="l04545"></a>04545 <span class="keywordtype">bool</span>             _txConsole_Detach (<span class="keywordtype">bool</span> activate);
<a name="l04546"></a>04546 <span class="keywordtype">bool</span>             _txConsole_Draw (HDC dc);
<a name="l04547"></a>04547 <span class="keywordtype">bool</span>             _txConsole_SetUnicodeFont();
<a name="l04548"></a>04548 
<a name="l04549"></a>04549 <span class="keywordtype">int</span>              _txSetFinishedText (HWND wnd);
<a name="l04550"></a>04550 <span class="keywordtype">void</span>             _txPauseBeforeTermination (HWND canvas);
<a name="l04551"></a>04551 <span class="keywordtype">bool</span>             _txIsParentWaitable (DWORD* parentPID = NULL);
<a name="l04552"></a>04552 PROCESSENTRY32*  _txFindProcess (<span class="keywordtype">unsigned</span> pid = GetCurrentProcessId());
<a name="l04553"></a>04553 <span class="keywordtype">bool</span>             _txKillProcess (DWORD pid);
<a name="l04554"></a>04554 PROC             _txSetProcAddress (HMODULE module, <span class="keyword">const</span> <span class="keywordtype">char</span>* dllName, <span class="keyword">const</span> <span class="keywordtype">char</span>* funcName, PROC newFunc);
<a name="l04555"></a>04555 <span class="keywordtype">bool</span>             _txInDll();
<a name="l04556"></a>04556 <span class="keywordtype">int</span>              _txGetInput();
<a name="l04557"></a>04557 <span class="keywordtype">void</span>             _tx_cexit();
<a name="l04558"></a>04558 
<a name="l04559"></a>04559 <span class="keywordtype">bool</span>             _txCreateShortcut (<span class="keyword">const</span> <span class="keywordtype">char</span> shortcutName[],
<a name="l04560"></a>04560                                     <span class="keyword">const</span> <span class="keywordtype">char</span> fileToLink[], <span class="keyword">const</span> <span class="keywordtype">char</span> args[] = NULL, <span class="keyword">const</span> <span class="keywordtype">char</span> workDir[] = NULL,
<a name="l04561"></a>04561                                     <span class="keyword">const</span> <span class="keywordtype">char</span> description[] = NULL, <span class="keywordtype">int</span> cmdShow = SW_SHOWNORMAL,
<a name="l04562"></a>04562                                     <span class="keyword">const</span> <span class="keywordtype">char</span> iconFile[] = NULL, <span class="keywordtype">int</span> iconIndex = 0, <span class="keywordtype">int</span> fontSize = 0,
<a name="l04563"></a>04563                                     COORD bufSize = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD), COORD wndSize = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD), COORD wndOrg = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (COORD));
<a name="l04564"></a>04564 
<a name="l04565"></a>04565 <span class="keywordtype">void</span>*            _tx_DLGTEMPLATE_Create (<span class="keywordtype">void</span>* globalMem, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l04566"></a>04566                                          WORD controls, <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l04567"></a>04567                                          <span class="keyword">const</span> <span class="keywordtype">char</span> caption[], <span class="keyword">const</span> <span class="keywordtype">char</span> font[], WORD fontsize,
<a name="l04568"></a>04568                                          HANDLE menu);
<a name="l04569"></a>04569 
<a name="l04570"></a>04570 <span class="keywordtype">void</span>*            _tx_DLGTEMPLATE_Add    (<span class="keywordtype">void</span>* dlgTemplatePtr, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l04571"></a>04571                                          <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l04572"></a>04572                                          WORD <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> wclass[], <span class="keyword">const</span> <span class="keywordtype">char</span> caption[]);
<a name="l04573"></a>04573 
<a name="l04574"></a>04574 <span class="keyword">const</span> <span class="keywordtype">char</span>*      _txError        (<span class="keyword">const</span> <span class="keywordtype">char</span> file[] = NULL, <span class="keywordtype">int</span> line = 0, <span class="keyword">const</span> <span class="keywordtype">char</span> func[] = NULL,
<a name="l04575"></a>04575                                   <span class="keyword">const</span> <span class="keywordtype">char</span> msg[] = NULL, ...) _TX_CHECK_FORMAT (4);
<a name="l04576"></a>04576 
<a name="l04577"></a>04577 HICON            _txCreateTXIcon (<span class="keywordtype">int</span> size);
<a name="l04578"></a>04578 
<a name="l04579"></a>04579 <span class="keywordtype">void</span>             _txOnSignal (<span class="keywordtype">int</span> signal = 0, <span class="keywordtype">int</span> fpe = 0);
<a name="l04580"></a>04580 <span class="keywordtype">void</span>             _txOnTerminate();
<a name="l04581"></a>04581 <span class="keywordtype">void</span>             _txOnUnexpected();
<a name="l04582"></a>04582 
<a name="l04583"></a>04583 FARPROC          _txDllImport (const <span class="keywordtype">char</span> dllFileName[], const <span class="keywordtype">char</span> funcName[], <span class="keywordtype">bool</span> required = true);
<a name="l04584"></a>04584 
<a name="l04585"></a>04585 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04586"></a>04586 
<a name="l04587"></a>04587 <span class="comment">// These are macros for __FILE__ and __LINE__ to work properly.</span>
<a name="l04588"></a>04588 
<a name="l04589"></a>04589 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l04590"></a>04590 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_IF_ARGUMENT_FAILED( cond )    if (!assert (cond) &amp;&amp; (SetLastErrorEx (ERROR_BAD_ARGUMENTS, 0),   1))</span>
<a name="l04591"></a>04591 <span class="preprocessor"></span>
<a name="l04592"></a>04592 <span class="preprocessor">    #define  _TX_IF_TXWINDOW_FAILED            if (       !txOK() &amp;&amp; (SetLastErrorEx (ERROR_INVALID_DATA,  0),   1) &amp;&amp; \</span>
<a name="l04593"></a>04593 <span class="preprocessor">                                                  (TX_ERROR (&quot;\a&quot; &quot;Окно рисования не создано или не в порядке&quot;), 1))</span>
<a name="l04594"></a>04594 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l04595"></a>04595 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_IF_ARGUMENT_FAILED( cond )    if (!       (cond) &amp;&amp; (SetLastErrorEx (ERROR_BAD_ARGUMENTS, 0),   1))</span>
<a name="l04596"></a>04596 <span class="preprocessor"></span>
<a name="l04597"></a>04597 <span class="preprocessor">    #define  _TX_IF_TXWINDOW_FAILED            if (       !txOK() &amp;&amp; (SetLastErrorEx (ERROR_INVALID_DATA,  0),   1))</span>
<a name="l04598"></a>04598 <span class="preprocessor"></span>
<a name="l04599"></a>04599 <span class="preprocessor">#endif</span>
<a name="l04600"></a>04600 <span class="preprocessor"></span>
<a name="l04601"></a>04601 <span class="comment">// Take action in debug configuration only.</span>
<a name="l04602"></a>04602 <span class="comment">// Definition ({ expr; }) would be better, but some old dinosaurs (yes it is MSVC 6) reject it. So sad. :&#39;(</span>
<a name="l04603"></a>04603 
<a name="l04604"></a>04604 <span class="preprocessor">#if !defined (NDEBUG)</span>
<a name="l04605"></a>04605 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_ON_DEBUG( code )              { code; }</span>
<a name="l04606"></a>04606 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l04607"></a>04607 <span class="preprocessor"></span><span class="preprocessor">    #define  _TX_ON_DEBUG( code )              ;</span>
<a name="l04608"></a>04608 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04609"></a>04609 <span class="preprocessor"></span>
<a name="l04610"></a>04610 <span class="comment">// This is a macro because cond is an expression and not always a function. Lack of lambdas in pre-C++0x.</span>
<a name="l04611"></a>04611 
<a name="l04612"></a>04612 <span class="preprocessor">#define      _txWaitFor( cond, time )          { for (DWORD _t = GetTickCount() + (time); \</span>
<a name="l04613"></a>04613 <span class="preprocessor">                                                      !(cond) &amp;&amp; GetTickCount() &lt; _t;     \</span>
<a name="l04614"></a>04614 <span class="preprocessor">                                                      Sleep (_txWindowUpdateInterval)) ;  \</span>
<a name="l04615"></a>04615 <span class="preprocessor">                                                 if  (!(cond))                            \</span>
<a name="l04616"></a>04616 <span class="preprocessor">                                                      _txTrace (__FILE__, __LINE__, &quot;WARNING: Timeout: &quot; #cond &quot;.&quot;); }</span>
<a name="l04617"></a>04617 <span class="preprocessor"></span><span class="comment">//}</span>
<a name="l04618"></a>04618 <span class="comment">//=================================================================================================================</span>
<a name="l04619"></a>04619 
<a name="l04620"></a>04620 <span class="comment">//=================================================================================================================</span>
<a name="l04621"></a>04621 <span class="comment">//{          [Internal] DLL functions import</span>
<a name="l04623"></a>04623 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l04625"></a>04625 <span class="comment"></span>
<a name="l04626"></a>04626 FARPROC _txDllImport (<span class="keyword">const</span> <span class="keywordtype">char</span> dllFileName[], <span class="keyword">const</span> <span class="keywordtype">char</span> funcName[], <span class="keywordtype">bool</span> required <span class="comment">/*= true*/</span>)
<a name="l04627"></a>04627     {
<a name="l04628"></a>04628     _TX_IF_ARGUMENT_FAILED (!(dllFileName &amp;&amp; !*dllFileName)) return NULL;
<a name="l04629"></a>04629     _TX_IF_ARGUMENT_FAILED (  funcName    &amp;&amp;  *funcName)     return NULL;
<a name="l04630"></a>04630 
<a name="l04631"></a>04631     HMODULE                  dll = GetModuleHandle (dllFileName);
<a name="l04632"></a>04632     if (!dll &amp;&amp; dllFileName) dll = LoadLibrary     (dllFileName);
<a name="l04633"></a>04633     if (!dll &amp;&amp; required)  <a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (&quot;\a&quot; &quot;Cannot load library \&quot;%s\&quot;&quot; <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> dllFileName);
<a name="l04634"></a>04634 
<a name="l04635"></a>04635     if (!dll) return NULL;
<a name="l04636"></a>04636 
<a name="l04637"></a>04637     FARPROC addr = GetProcAddress (dll, funcName);
<a name="l04638"></a>04638     if (!addr &amp;&amp; required) <a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (&quot;\a&quot; &quot;Cannot import \&quot;%s\&quot; from library \&quot;%s\&quot;&quot; <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> funcName <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> dllFileName);
<a name="l04639"></a>04639 
<a name="l04640"></a>04640     return addr;
<a name="l04641"></a>04641     }
<a name="l04642"></a>04642 
<a name="l04643"></a>04643 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04644"></a>04644 <span class="comment">//           Import helpers</span>
<a name="l04645"></a>04645 <span class="comment">//           Малая механизация</span>
<a name="l04646"></a>04646 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04647"></a>04647 
<a name="l04648"></a>04648 <span class="preprocessor">#define _TX_DLLIMPORT(     lib, retval, name, params ) \</span>
<a name="l04649"></a>04649 <span class="preprocessor">     retval (WINAPI* name) params = (retval (WINAPI*) params) _txDllImport (lib &quot;.dll&quot;, #name, true)</span>
<a name="l04650"></a>04650 <span class="preprocessor"></span>
<a name="l04651"></a>04651 <span class="preprocessor">#define _TX_DLLIMPORT_OPT( lib, retval, name, params ) \</span>
<a name="l04652"></a>04652 <span class="preprocessor">     retval (WINAPI* name) params = (retval (WINAPI*) params) _txDllImport (lib &quot;.dll&quot;, #name, false)</span>
<a name="l04653"></a>04653 <span class="preprocessor"></span>
<a name="l04654"></a>04654 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04655"></a>04655 <span class="comment">// Some IDEs don&#39;t link with these libs by default in console projects, so do sunrise by hand. :(</span>
<a name="l04656"></a>04656 <span class="comment">//{ &lt;tears&gt;</span>
<a name="l04657"></a>04657 
<a name="l04658"></a>04658 <span class="keyword">namespace </span>Win32 {
<a name="l04659"></a>04659 
<a name="l04660"></a>04660 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l04661"></a>04661 <span class="preprocessor"></span><span class="keyword">struct </span>CONSOLE_FONT_INFO;
<a name="l04662"></a>04662 <span class="preprocessor">#endif</span>
<a name="l04663"></a>04663 <span class="preprocessor"></span>
<a name="l04664"></a>04664 <span class="keyword">struct </span>NT_CONSOLE_PROPS;
<a name="l04665"></a>04665 <span class="keyword">struct </span>CONSOLE_FONT_INFOEX;
<a name="l04666"></a>04666 
<a name="l04667"></a>04667 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HDC,      CreateCompatibleDC,       (HDC dc));
<a name="l04668"></a>04668 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HBITMAP,  CreateCompatibleBitmap,   (HDC dc, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height));
<a name="l04669"></a>04669 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  GetStockObject,           (<span class="keywordtype">int</span> <span class="keywordtype">object</span>));
<a name="l04670"></a>04670 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  SelectObject,             (HDC dc, HGDIOBJ <span class="keywordtype">object</span>));
<a name="l04671"></a>04671 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HGDIOBJ,  GetCurrentObject,         (HDC dc, <span class="keywordtype">unsigned</span> objectType));
<a name="l04672"></a>04672 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      GetObjectA,               (HGDIOBJ obj, <span class="keywordtype">int</span> bufsize, <span class="keywordtype">void</span>* buffer));
<a name="l04673"></a>04673 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    DWORD,    GetObjectType,            (HGDIOBJ <span class="keywordtype">object</span>));
<a name="l04674"></a>04674 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     DeleteDC,                 (HDC dc));
<a name="l04675"></a>04675 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     DeleteObject,             (HGDIOBJ <span class="keywordtype">object</span>));
<a name="l04676"></a>04676 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetTextColor,             (HDC dc, COLORREF color));
<a name="l04677"></a>04677 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetBkColor,               (HDC dc, COLORREF color));
<a name="l04678"></a>04678 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetBkMode,                (HDC dc, <span class="keywordtype">int</span> bkMode));
<a name="l04679"></a>04679 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HFONT,    CreateFontA,              (<span class="keywordtype">int</span> height, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> escapement, <span class="keywordtype">int</span> orientation,
<a name="l04680"></a>04680                                                                     <span class="keywordtype">int</span> weight, DWORD italic, DWORD underline, DWORD strikeout,
<a name="l04681"></a>04681                                                                     DWORD charSet, DWORD outputPrec, DWORD clipPrec,
<a name="l04682"></a>04682                                                                     DWORD quality, DWORD pitchAndFamily, <span class="keyword">const</span> <span class="keywordtype">char</span> face[]));
<a name="l04683"></a>04683 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      EnumFontFamiliesExA,      (HDC dc, LPLOGFONT logFont, FONTENUMPROC enumProc,
<a name="l04684"></a>04684                                                                     LPARAM lParam, DWORD reserved));
<a name="l04685"></a>04685 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, SetPixel,                 (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color));
<a name="l04686"></a>04686 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    COLORREF, GetPixel,                 (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y));
<a name="l04687"></a>04687 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HPEN,     CreatePen,                (<span class="keywordtype">int</span> penStyle, <span class="keywordtype">int</span> width, COLORREF color));
<a name="l04688"></a>04688 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HBRUSH,   CreateSolidBrush,         (COLORREF color));
<a name="l04689"></a>04689 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     MoveToEx,                 (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, POINT* point));
<a name="l04690"></a>04690 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     LineTo,                   (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y));
<a name="l04691"></a>04691 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Polygon,                  (HDC dc, <span class="keyword">const</span> POINT points[], <span class="keywordtype">int</span> count));
<a name="l04692"></a>04692 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Rectangle,                (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l04693"></a>04693 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     RoundRect,                (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1, <span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY));
<a name="l04694"></a>04694 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Ellipse,                  (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l04695"></a>04695 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Arc,                      (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l04696"></a>04696                                                                     <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l04697"></a>04697 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Pie,                      (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l04698"></a>04698                                                                     <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l04699"></a>04699 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     Chord,                    (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1,
<a name="l04700"></a>04700                                                                     <span class="keywordtype">int</span> xStart, <span class="keywordtype">int</span> yStart, <span class="keywordtype">int</span> xEnd, <span class="keywordtype">int</span> yEnd));
<a name="l04701"></a>04701 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     TextOutA,                 (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> <span class="keywordtype">string</span>[], <span class="keywordtype">int</span> length));
<a name="l04702"></a>04702 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    UINT,     SetTextAlign,             (HDC dc, <span class="keywordtype">unsigned</span> mode));
<a name="l04703"></a>04703 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     GetTextExtentPoint32A,    (HDC dc, <span class="keyword">const</span> <span class="keywordtype">char</span> <span class="keywordtype">string</span>[], <span class="keywordtype">int</span> length, SIZE* size));
<a name="l04704"></a>04704 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     ExtFloodFill,             (HDC dc, <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, COLORREF color, <span class="keywordtype">unsigned</span> type));
<a name="l04705"></a>04705 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     BitBlt,                   (HDC dest, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height,
<a name="l04706"></a>04706                                                                     HDC src,  <span class="keywordtype">int</span> xSrc,  <span class="keywordtype">int</span> ySrc,  DWORD rOp));
<a name="l04707"></a>04707 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetDIBitsToDevice,        (HDC dc, <span class="keywordtype">int</span> xDest, <span class="keywordtype">int</span> yDest, DWORD width, DWORD height,
<a name="l04708"></a>04708                                                                     <span class="keywordtype">int</span> xSrc, <span class="keywordtype">int</span> ySrc, <span class="keywordtype">unsigned</span> startLine, <span class="keywordtype">unsigned</span> numLines,
<a name="l04709"></a>04709                                                                     <span class="keyword">const</span> <span class="keywordtype">void</span>* data, <span class="keyword">const</span> BITMAPINFO* info, <span class="keywordtype">unsigned</span> colorUse));
<a name="l04710"></a>04710 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      GetDIBits,                (HDC hdc, HBITMAP hbmp, <span class="keywordtype">unsigned</span> uStartScan, <span class="keywordtype">unsigned</span> cScanLines,
<a name="l04711"></a>04711                                                                     <span class="keywordtype">void</span>* lpvBits, BITMAPINFO* lpbi, <span class="keywordtype">unsigned</span> usage));
<a name="l04712"></a>04712 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     PatBlt,                   (HDC dc, <span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height, DWORD rOp));
<a name="l04713"></a>04713 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    <span class="keywordtype">int</span>,      SetROP2,                  (HDC dc, <span class="keywordtype">int</span> mode));
<a name="l04714"></a>04714 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    HRGN,     CreateRectRgn,            (<span class="keywordtype">int</span> x0, <span class="keywordtype">int</span> y0, <span class="keywordtype">int</span> x1, <span class="keywordtype">int</span> y1));
<a name="l04715"></a>04715 _TX_DLLIMPORT     (<span class="stringliteral">&quot;GDI32&quot;</span>,    BOOL,     GetBitmapDimensionEx,     (HBITMAP bitmap, SIZE* dimensions));
<a name="l04716"></a>04716 
<a name="l04717"></a>04717 _TX_DLLIMPORT     (<span class="stringliteral">&quot;User32&quot;</span>,   <span class="keywordtype">int</span>,      DrawTextA,                (HDC dc, <span class="keyword">const</span> <span class="keywordtype">char</span> text[], <span class="keywordtype">int</span> length, RECT* rect, <span class="keywordtype">unsigned</span> format));
<a name="l04718"></a>04718 _TX_DLLIMPORT     (<span class="stringliteral">&quot;User32&quot;</span>,   HANDLE,   LoadImageA,               (HINSTANCE inst, <span class="keyword">const</span> <span class="keywordtype">char</span> name[], <span class="keywordtype">unsigned</span> type,
<a name="l04719"></a>04719                                                                    <span class="keywordtype">int</span> sizex, <span class="keywordtype">int</span> sizey, <span class="keywordtype">unsigned</span> mode));
<a name="l04720"></a>04720 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;User32&quot;</span>,   BOOL,     IsHungAppWindow,          (HWND wnd));
<a name="l04721"></a>04721 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;User32&quot;</span>,   HWND,     GhostWindowFromHungWindow,(HWND wnd));
<a name="l04722"></a>04722 
<a name="l04723"></a>04723 _TX_DLLIMPORT     (<span class="stringliteral">&quot;WinMM&quot;</span>,    BOOL,     PlaySound,                (<span class="keyword">const</span> <span class="keywordtype">char</span> sound[], HMODULE mod, DWORD mode));
<a name="l04724"></a>04724 
<a name="l04725"></a>04725 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MSImg32&quot;</span>,  BOOL,     TransparentBlt,           (HDC dest, <span class="keywordtype">int</span> destX, <span class="keywordtype">int</span> destY, <span class="keywordtype">int</span> destWidth, <span class="keywordtype">int</span> destHeight,
<a name="l04726"></a>04726                                                                     HDC src,  <span class="keywordtype">int</span> srcX,  <span class="keywordtype">int</span> srcY,  <span class="keywordtype">int</span> srcWidth,  <span class="keywordtype">int</span> srcHeight,
<a name="l04727"></a>04727                                                                     <span class="keywordtype">unsigned</span> transparentColor));
<a name="l04728"></a>04728 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MSImg32&quot;</span>,  BOOL,     AlphaBlend,               (HDC dest, <span class="keywordtype">int</span> destX, <span class="keywordtype">int</span> destY, <span class="keywordtype">int</span> destWidth, <span class="keywordtype">int</span> destHeight,
<a name="l04729"></a>04729                                                                     HDC src,  <span class="keywordtype">int</span> srcX,  <span class="keywordtype">int</span> srcY,  <span class="keywordtype">int</span> srcWidth,  <span class="keywordtype">int</span> srcHeight,
<a name="l04730"></a>04730                                                                     BLENDFUNCTION blending));
<a name="l04731"></a>04731 
<a name="l04732"></a>04732 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Kernel32&quot;</span>, HWND,     GetConsoleWindow,         (<span class="keywordtype">void</span>));
<a name="l04733"></a>04733 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     SetConsoleFont,           (HANDLE con, DWORD fontIndex));
<a name="l04734"></a>04734 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     GetConsoleFontInfo,       (HANDLE con, <span class="keywordtype">bool</span> fullScr, DWORD nFonts, CONSOLE_FONT_INFO* info));
<a name="l04735"></a>04735 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, DWORD,    GetNumberOfConsoleFonts,  (<span class="keywordtype">void</span>));
<a name="l04736"></a>04736 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     GetCurrentConsoleFont,    (HANDLE con, <span class="keywordtype">bool</span> maxWnd, CONSOLE_FONT_INFO*   curFont));
<a name="l04737"></a>04737 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     GetCurrentConsoleFontEx,  (HANDLE con, <span class="keywordtype">bool</span> maxWnd, CONSOLE_FONT_INFOEX* curFont));
<a name="l04738"></a>04738 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;Kernel32&quot;</span>, BOOL,     SetCurrentConsoleFontEx,  (HANDLE con, <span class="keywordtype">bool</span> maxWnd, CONSOLE_FONT_INFOEX* curFont));
<a name="l04739"></a>04739 
<a name="l04740"></a>04740 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    HRESULT,  CoInitialize,             (<span class="keywordtype">void</span>*));
<a name="l04741"></a>04741 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    HRESULT,  CoCreateInstance,         (REFCLSID clsid, LPUNKNOWN, DWORD, REFIID iid, PVOID* value));
<a name="l04742"></a>04742 _TX_DLLIMPORT     (<span class="stringliteral">&quot;OLE32&quot;</span>,    <span class="keywordtype">void</span>,     CoUninitialize,           (<span class="keywordtype">void</span>));
<a name="l04743"></a>04743 
<a name="l04744"></a>04744 _TX_DLLIMPORT     (<span class="stringliteral">&quot;Shell32&quot;</span>,  HINSTANCE,ShellExecuteA,            (HWND wnd, <span class="keyword">const</span> <span class="keywordtype">char</span> operation[], <span class="keyword">const</span> <span class="keywordtype">char</span> file[],
<a name="l04745"></a>04745                                                                     <span class="keyword">const</span> <span class="keywordtype">char</span> parameters[], <span class="keyword">const</span> <span class="keywordtype">char</span> directory[], <span class="keywordtype">int</span> showCmd));
<a name="l04746"></a>04746 
<a name="l04747"></a>04747 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;NTDLL&quot;</span>,    <span class="keywordtype">char</span>*,    wine_get_version,         (<span class="keywordtype">void</span>));
<a name="l04748"></a>04748 
<a name="l04749"></a>04749 _TX_DLLIMPORT_OPT (<span class="stringliteral">&quot;MSVCRT&quot;</span>,   <span class="keywordtype">void</span>,     _cexit,                   (<span class="keywordtype">void</span>));
<a name="l04750"></a>04750 
<a name="l04751"></a>04751 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04752"></a>04752 <span class="comment">// Another issue, some of structs, consts and interfaces aren&#39;t defined in MinGW some ealry headers.</span>
<a name="l04753"></a>04753 <span class="comment">// Copied from Windows SDK 7.0a.</span>
<a name="l04754"></a>04754 
<a name="l04755"></a>04755 <span class="preprocessor">#ifndef AC_SRC_ALPHA</span>
<a name="l04756"></a>04756 <span class="preprocessor"></span><span class="preprocessor">#define AC_SRC_ALPHA          0x01</span>
<a name="l04757"></a>04757 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04758"></a>04758 <span class="preprocessor"></span>
<a name="l04759"></a>04759 <span class="preprocessor">#ifndef SMTO_ERRORONEXIT</span>
<a name="l04760"></a>04760 <span class="preprocessor"></span><span class="preprocessor">#define SMTO_ERRORONEXIT      0x0020</span>
<a name="l04761"></a>04761 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04762"></a>04762 <span class="preprocessor"></span>
<a name="l04763"></a>04763 <span class="preprocessor">#ifndef NT_CONSOLE_PROPS_SIG</span>
<a name="l04764"></a>04764 <span class="preprocessor"></span><span class="preprocessor">#define NT_CONSOLE_PROPS_SIG  0xA0000002</span>
<a name="l04765"></a>04765 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04766"></a>04766 <span class="preprocessor"></span>
<a name="l04767"></a>04767 <span class="preprocessor">#ifndef NIIF_INFO</span>
<a name="l04768"></a>04768 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_INFO             0x00000001</span>
<a name="l04769"></a>04769 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_WARNING          0x00000002</span>
<a name="l04770"></a>04770 <span class="preprocessor"></span><span class="preprocessor">#define NIIF_ERROR            0x00000003</span>
<a name="l04771"></a>04771 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04772"></a>04772 <span class="preprocessor"></span>
<a name="l04773"></a>04773 <span class="preprocessor">#ifndef NIF_INFO</span>
<a name="l04774"></a>04774 <span class="preprocessor"></span><span class="preprocessor">#define NIF_STATE             0x00000008</span>
<a name="l04775"></a>04775 <span class="preprocessor"></span><span class="preprocessor">#define NIF_INFO              0x00000010</span>
<a name="l04776"></a>04776 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l04777"></a>04777 <span class="preprocessor"></span>
<a name="l04778"></a>04778 <span class="preprocessor">#pragma pack (push, 1)</span>
<a name="l04779"></a>04779 <span class="preprocessor"></span>
<a name="l04780"></a>04780 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l04781"></a>04781 <span class="preprocessor"></span>
<a name="l04782"></a>04782 <span class="keyword">struct </span>CONSOLE_FONT_INFO
<a name="l04783"></a>04783     {
<a name="l04784"></a>04784     DWORD  nFont;
<a name="l04785"></a>04785     COORD  dwFontSize;
<a name="l04786"></a>04786     };
<a name="l04787"></a>04787 
<a name="l04788"></a>04788 <span class="keyword">struct </span>NOTIFYICONDATA
<a name="l04789"></a>04789     {
<a name="l04790"></a>04790     DWORD cbSize;
<a name="l04791"></a>04791     HWND  hWnd;
<a name="l04792"></a>04792     UINT  uID;
<a name="l04793"></a>04793     UINT  uFlags;
<a name="l04794"></a>04794     UINT  uCallbackMessage;
<a name="l04795"></a>04795     HICON hIcon;
<a name="l04796"></a>04796 
<a name="l04797"></a>04797     CHAR  szTip[128];
<a name="l04798"></a>04798     DWORD dwState;
<a name="l04799"></a>04799     DWORD dwStateMask;
<a name="l04800"></a>04800     CHAR  szInfo[256];
<a name="l04801"></a>04801 
<a name="l04802"></a>04802     <span class="keyword">union </span>{
<a name="l04803"></a>04803         UINT uTimeout;
<a name="l04804"></a>04804         UINT uVersion;
<a name="l04805"></a>04805         } u;
<a name="l04806"></a>04806 
<a name="l04807"></a>04807     CHAR  szInfoTitle[64];
<a name="l04808"></a>04808     DWORD dwInfoFlags;
<a name="l04809"></a>04809     };
<a name="l04810"></a>04810 
<a name="l04811"></a>04811 <span class="preprocessor">#endif</span>
<a name="l04812"></a>04812 <span class="preprocessor"></span>
<a name="l04813"></a>04813 <span class="keyword">struct </span>CONSOLE_FONT_INFOEX
<a name="l04814"></a>04814     {
<a name="l04815"></a>04815     ULONG cbSize;
<a name="l04816"></a>04816     DWORD nFont;
<a name="l04817"></a>04817     COORD dwFontSize;
<a name="l04818"></a>04818     UINT  FontFamily;
<a name="l04819"></a>04819     UINT  FontWeight;
<a name="l04820"></a>04820     WCHAR FaceName[LF_FACESIZE];
<a name="l04821"></a>04821     };
<a name="l04822"></a>04822 
<a name="l04823"></a>04823 <span class="keyword">struct </span>DATABLOCK_HEADER
<a name="l04824"></a>04824     {
<a name="l04825"></a>04825     DWORD cbSize;
<a name="l04826"></a>04826     DWORD dwSignature;
<a name="l04827"></a>04827     };
<a name="l04828"></a>04828 
<a name="l04829"></a>04829 <span class="keyword">struct </span>NT_CONSOLE_PROPS
<a name="l04830"></a>04830     {
<a name="l04831"></a>04831     DATABLOCK_HEADER dbh;
<a name="l04832"></a>04832 
<a name="l04833"></a>04833     WORD  wFillAttribute;
<a name="l04834"></a>04834     WORD  wPopupFillAttribute;
<a name="l04835"></a>04835     COORD dwScreenBufferSize;
<a name="l04836"></a>04836     COORD dwWindowSize;
<a name="l04837"></a>04837     COORD dwWindowOrigin;
<a name="l04838"></a>04838     DWORD nFont;
<a name="l04839"></a>04839     DWORD nInputBufferSize;
<a name="l04840"></a>04840     COORD dwFontSize;
<a name="l04841"></a>04841     UINT  uFontFamily;
<a name="l04842"></a>04842     UINT  uFontWeight;
<a name="l04843"></a>04843     WCHAR FaceName[LF_FACESIZE];
<a name="l04844"></a>04844     UINT  uCursorSize;
<a name="l04845"></a>04845     BOOL  bFullScreen;
<a name="l04846"></a>04846     BOOL  bQuickEdit;
<a name="l04847"></a>04847     BOOL  bInsertMode;
<a name="l04848"></a>04848     BOOL  bAutoPosition;
<a name="l04849"></a>04849     UINT  uHistoryBufferSize;
<a name="l04850"></a>04850     UINT  uNumberOfHistoryBuffers;
<a name="l04851"></a>04851     BOOL  bHistoryNoDup;
<a name="l04852"></a>04852 
<a name="l04853"></a>04853     COLORREF ColorTable[16];
<a name="l04854"></a>04854     };
<a name="l04855"></a>04855 
<a name="l04856"></a>04856 <span class="preprocessor">#pragma pack (pop)</span>
<a name="l04857"></a>04857 <span class="preprocessor"></span>
<a name="l04858"></a>04858 <span class="preprocessor">#undef  INTERFACE</span>
<a name="l04859"></a>04859 <span class="preprocessor"></span><span class="preprocessor">#define INTERFACE IShellLinkDataList</span>
<a name="l04860"></a>04860 <span class="preprocessor"></span>
<a name="l04861"></a>04861 DECLARE_INTERFACE_ (IShellLinkDataList, IUnknown)
<a name="l04862"></a>04862     {
<a name="l04863"></a>04863     <span class="comment">// *** IUnknown methods ***</span>
<a name="l04864"></a>04864     STDMETHOD (QueryInterface)  (THIS_ REFIID iid, <span class="keywordtype">void</span>** value)    PURE;
<a name="l04865"></a>04865     STDMETHOD_(ULONG, AddRef)   (THIS)                              PURE;
<a name="l04866"></a>04866     STDMETHOD_(ULONG, Release)  (THIS)                              PURE;
<a name="l04867"></a>04867 
<a name="l04868"></a>04868     <span class="comment">// *** IShellLinkDataList methods ***</span>
<a name="l04869"></a>04869     STDMETHOD (AddDataBlock)    (THIS_ <span class="keywordtype">void</span>* dataBlock)             PURE;
<a name="l04870"></a>04870     STDMETHOD (CopyDataBlock)   (THIS_ DWORD sig, <span class="keywordtype">void</span>** dataBlock) PURE;
<a name="l04871"></a>04871     STDMETHOD (RemoveDataBlock) (THIS_ DWORD sig)                   PURE;
<a name="l04872"></a>04872     STDMETHOD (GetFlags)        (THIS_ DWORD* flags)                PURE;
<a name="l04873"></a>04873     STDMETHOD (SetFlags)        (THIS_ DWORD  flags)                PURE;
<a name="l04874"></a>04874 
<a name="l04875"></a>04875     <span class="keyword">protected</span>:
<a name="l04876"></a>04876     <span class="keyword">virtual</span> ~IShellLinkDataList();
<a name="l04877"></a>04877     };
<a name="l04878"></a>04878 
<a name="l04879"></a>04879 <span class="keyword">const</span> GUID IID_IShellLink         = {0x000214ee, 0x0000, 0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
<a name="l04880"></a>04880 <span class="keyword">const</span> GUID IID_IShellLinkDataList = {0x45e2b4ae, 0xb1c3, 0x11d0, {0xb9,0x2f,0x00,0xa0,0xc9,0x03,0x12,0xe1}};
<a name="l04881"></a>04881 <span class="keyword">const</span> GUID IID_IPersistFile       = {0x0000010b, 0x0000, 0x0000, {0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
<a name="l04882"></a>04882 
<a name="l04883"></a>04883 <span class="preprocessor">#undef  INTERFACE</span>
<a name="l04884"></a>04884 <span class="preprocessor"></span>
<a name="l04885"></a>04885 }  <span class="comment">// namespace Win32</span>
<a name="l04886"></a>04886 
<a name="l04887"></a>04887 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l04888"></a>04888 <span class="preprocessor"></span><span class="keyword">using namespace </span>Win32;
<a name="l04889"></a>04889 <span class="preprocessor">#endif</span>
<a name="l04890"></a>04890 <span class="preprocessor"></span>
<a name="l04891"></a>04891 <span class="comment">//} &lt;/tears&gt;</span>
<a name="l04892"></a>04892 
<a name="l04894"></a>04894 <span class="comment">//}</span>
<a name="l04895"></a>04895 <span class="comment">//=================================================================================================================</span>
<a name="l04896"></a>04896 
<a name="l04897"></a>04897 <span class="comment">//=================================================================================================================</span>
<a name="l04898"></a>04898 <span class="comment">//{          [Internal] Global data</span>
<a name="l04900"></a>04900 <span class="comment"></span><span class="comment">//</span>
<a name="l04901"></a>04901 <span class="comment">//           Данные не упакованы в структуру или класс, для того, чтобы это сделали Вы сами :)</span>
<a name="l04902"></a>04902 <span class="comment">//</span>
<a name="l04903"></a>04903 <span class="comment">//           Если вы пишете свою библиотеку и используете TXLib.h как примеру, не следуйте ему и не делайте так же.</span>
<a name="l04904"></a>04904 <span class="comment">//           Здесь это сделано только в образовательных целях.</span>
<a name="l04905"></a>04905 <span class="comment">//</span>
<a name="l04906"></a>04906 <span class="comment">//           Будьте практичнее, сделайте структуру и глобальную функцию для доступа к ней.</span>
<a name="l04907"></a>04907 <span class="comment">//=================================================================================================================</span>
<a name="l04909"></a>04909 <span class="comment"></span>
<a name="l04910"></a>04910 <span class="keywordtype">int</span>                     _txInitialized         = <a class="code" href="a00034.htm#gaab281ee20ea6be5eae34d0e15bf03dcf" title="Запрет ранней инициализации TXLib.">_TX_NOINIT</a> || _txInitialize();
<a name="l04911"></a>04911 
<a name="l04912"></a>04912 <span class="keywordtype">unsigned</span>       <span class="keyword">volatile</span> _txMainThreadId        = 0;      <span class="comment">// ID потока, где выполняется main()</span>
<a name="l04913"></a>04913 
<a name="l04914"></a>04914 <span class="keywordtype">unsigned</span>       <span class="keyword">volatile</span> _txCanvas_ThreadId     = 0;      <span class="comment">// ID потока, владеющего окном холста TXLib</span>
<a name="l04915"></a>04915 HANDLE         <span class="keyword">volatile</span> _txCanvas_Thread       = NULL;   <span class="comment">// Дексриптор этого потока</span>
<a name="l04916"></a>04916 HWND           <span class="keyword">volatile</span> _txCanvas_Window       = NULL;   <span class="comment">// Дескриптор окна холста TXLib</span>
<a name="l04917"></a>04917 
<a name="l04918"></a>04918 UINT                    _txCanvas_RefreshTimer = 0;      <span class="comment">// Timer to redraw TXLib window</span>
<a name="l04919"></a>04919 <span class="keywordtype">int</span>            <span class="keyword">volatile</span> _txCanvas_RefreshLock  = 0;      <span class="comment">// Blocks auto on-timer canvas update, see txBegin/txEnd</span>
<a name="l04920"></a>04920 
<a name="l04921"></a>04921 HDC                     _txCanvas_BackBuf[2]   = {NULL,  <span class="comment">// [0] Main working TXLib memory DC, where user picture lies</span>
<a name="l04922"></a>04922                                                   NULL}; <span class="comment">// [1] Image ready for auto-refresh, see txCanvas_OnPAINT()</span>
<a name="l04923"></a>04923 CRITICAL_SECTION        _txCanvas_LockBackBuf  = {0,-1}; <span class="comment">// Prevent simultaneous access to back buffer, see txLock()</span>
<a name="l04924"></a>04924 
<a name="l04925"></a>04925 std::vector&lt;HDC&gt;*       _txCanvas_UserDCs      = NULL;   <span class="comment">// List of DCs allocated, for auto-free</span>
<a name="l04926"></a>04926 
<a name="l04927"></a>04927 <span class="keywordtype">bool</span>           <span class="keyword">volatile</span> _txConsole_IsBlinking  = <span class="keyword">true</span>;   <span class="comment">// To blink or not to blink, that is the question.</span>
<a name="l04928"></a>04928 
<a name="l04929"></a>04929 <span class="keywordtype">bool</span>                    _txConsole             = <span class="keyword">false</span>;  <span class="comment">// Only first TXLib module in app owns it</span>
<a name="l04930"></a>04930 <span class="keywordtype">bool</span>                    _txMain                = <span class="keyword">false</span>;  <span class="comment">// First TXLib wnd opened (closing it terminates program)</span>
<a name="l04931"></a>04931 <span class="keywordtype">bool</span>                    _txIsDll               = <span class="keyword">false</span>;  <span class="comment">// TXLib module is in DLL</span>
<a name="l04932"></a>04932 <span class="keywordtype">bool</span>           <span class="keyword">volatile</span> _txRunning             = <span class="keyword">false</span>;  <span class="comment">// main() is still running</span>
<a name="l04933"></a>04933 <span class="keywordtype">bool</span>           <span class="keyword">volatile</span> _txExit                = <span class="keyword">false</span>;  <span class="comment">// exit() is active</span>
<a name="l04934"></a>04934 <span class="keywordtype">bool</span>           <span class="keyword">volatile</span> _txAllowTrace          = <span class="keyword">true</span>;   <span class="comment">// Internal TX trace is active</span>
<a name="l04935"></a>04935 
<a name="l04936"></a>04936 POINT                   _txMousePos            = {0};    <span class="comment">// Ask Captn Obviouos about it. See txCanvas_OnMOUSE()</span>
<a name="l04937"></a>04937 <span class="keywordtype">int</span>                     _txMouseButtons        =  0;
<a name="l04938"></a>04938 
<a name="l04939"></a>04939 WNDPROC        <span class="keyword">volatile</span> _txAltWndProc          = NULL;   <span class="comment">// Альтернативная оконная функция. См. txSetWindowsHook().</span>
<a name="l04940"></a>04940 
<a name="l04941"></a>04941 <span class="keyword">const</span> <span class="keywordtype">char</span>*    <span class="keyword">volatile</span> _txFile                = NULL;   <span class="comment">// Current execution point tracking, see $ macro</span>
<a name="l04942"></a>04942 <span class="keywordtype">int</span>            <span class="keyword">volatile</span> _txLine                = 0;
<a name="l04943"></a>04943 <span class="keyword">const</span> <span class="keywordtype">char</span>*    <span class="keyword">volatile</span> _txFunc                = NULL;
<a name="l04944"></a>04944 _TX_THREAD <span class="keywordtype">int</span> <span class="keyword">volatile</span> _txInTX                = 0;      <span class="comment">// We are inside one of TXLib&#39;s functions</span>
<a name="l04945"></a>04945 
<a name="l04947"></a>04947 <span class="comment">//}</span>
<a name="l04948"></a>04948 <span class="comment">//=================================================================================================================</span>
<a name="l04949"></a>04949 
<a name="l04950"></a>04950 <span class="comment">//=================================================================================================================</span>
<a name="l04951"></a>04951 <span class="comment">//{          TXLib engine init/check/cleanup</span>
<a name="l04953"></a>04953 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l04955"></a>04955 <span class="comment"></span>
<a name="l04956"></a>04956 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04957"></a>04957 <span class="comment">//{          Early initialization</span>
<a name="l04958"></a>04958 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l04959"></a>04959 
<a name="l04960"></a>04960 <span class="keywordtype">int</span> _txInitialize()
<a name="l04961"></a>04961     {
<a name="l04962"></a>04962 <span class="preprocessor">    #if defined (_TX_ALLOC_BREAK) &amp;&amp; defined (_MSC_VER)</span>
<a name="l04963"></a>04963 <span class="preprocessor"></span>    _CrtSetBreakAlloc (_TX_ALLOC_BREAK);
<a name="l04964"></a>04964 <span class="preprocessor">    #endif</span>
<a name="l04965"></a>04965 <span class="preprocessor"></span>
<a name="l04966"></a>04966     _TX_ON_DEBUG (OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l04967"></a>04967                   OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> <span class="stringliteral">&quot; - The Dumb Artist Library, &quot;</span> _TX_AUTHOR <span class="stringliteral">&quot;: \&quot;&quot;</span> __FILE__ <span class="stringliteral">&quot;\&quot; &quot;</span>
<a name="l04968"></a>04968                                      <span class="stringliteral">&quot;compiled &quot;</span> __DATE__ <span class="stringliteral">&quot; &quot;</span> __TIME__ <span class="stringliteral">&quot;, &quot;</span> <a class="code" href="a00032.htm#ga3e287c38947fea870d01588fbd2a5fc9" title="Имя режима сборки">_TX_BUILDMODE</a> <span class="stringliteral">&quot; mode, module: &quot;</span> <a class="code" href="a00032.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib, входит в диагностические сообщения.">_TX_MODULE</a> <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l04969"></a>04969                   OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>));
<a name="l04970"></a>04970 
<a name="l04971"></a>04971     _txMainThreadId = GetCurrentThreadId();
<a name="l04972"></a>04972 
<a name="l04973"></a>04973 $1  _txIsDll = _txInDll();
<a name="l04974"></a>04974 
<a name="l04975"></a>04975 $   <span class="keywordflow">if</span> (!_txIsDll)
<a name="l04976"></a>04976         {
<a name="l04977"></a>04977 $       _txConsole = ! FindAtom (<span class="stringliteral">&quot;_txConsole&quot;</span>);  <span class="comment">// Not a thread-safe</span>
<a name="l04978"></a>04978 $       (void)          AddAtom (<span class="stringliteral">&quot;_txConsole&quot;</span>);
<a name="l04979"></a>04979         }
<a name="l04980"></a>04980 
<a name="l04981"></a>04981 $   <span class="keywordflow">if</span> (_txConsole)
<a name="l04982"></a>04982         {
<a name="l04983"></a>04983 $       _txOnSignal();
<a name="l04984"></a>04984 $       SetErrorMode (SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);
<a name="l04985"></a>04985 
<a name="l04986"></a>04986 <span class="preprocessor">        #if defined (_MSC_VER)</span>
<a name="l04987"></a>04987 <span class="preprocessor"></span>$       _CrtSetDbgFlag    (_CRTDBG_ALLOC_MEM_DF | _CRTDBG_CHECK_ALWAYS_DF | _CRTDBG_LEAK_CHECK_DF);
<a name="l04988"></a>04988 $       _CrtSetReportMode (_CRT_WARN,   _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
<a name="l04989"></a>04989 $       _CrtSetReportMode (_CRT_ERROR,  _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG | _CRTDBG_MODE_WNDW);
<a name="l04990"></a>04990 $       _CrtSetReportMode (_CRT_ASSERT, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG | _CRTDBG_MODE_WNDW);
<a name="l04991"></a>04991 $       _CrtSetReportFile (_CRT_WARN,   _CRTDBG_FILE_STDERR);
<a name="l04992"></a>04992 $       _CrtSetReportFile (_CRT_ERROR,  _CRTDBG_FILE_STDERR);
<a name="l04993"></a>04993 $       _CrtSetReportFile (_CRT_ASSERT, _CRTDBG_FILE_STDERR);
<a name="l04994"></a>04994 <span class="preprocessor">        #endif</span>
<a name="l04995"></a>04995 <span class="preprocessor"></span>
<a name="l04996"></a>04996 <span class="preprocessor">        #ifndef _MSC_VER_6</span>
<a name="l04997"></a>04997 <span class="preprocessor"></span>$       std::set_unexpected (_txOnUnexpected);
<a name="l04998"></a>04998 $       std::set_terminate  (_txOnTerminate);
<a name="l04999"></a>04999 <span class="preprocessor">        #endif</span>
<a name="l05000"></a>05000 <span class="preprocessor"></span>
<a name="l05001"></a>05001 $       HWND console = _txConsole_Attach();
<a name="l05002"></a>05002 $       SetWindowTextA (console, <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>));
<a name="l05003"></a>05003         }
<a name="l05004"></a>05004 
<a name="l05005"></a>05005 $   InitializeCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l05006"></a>05006 
<a name="l05007"></a>05007 $   _txCanvas_UserDCs = <span class="keyword">new</span> std::vector &lt;HDC&gt;;
<a name="l05008"></a>05008 
<a name="l05009"></a>05009 <span class="preprocessor">#if defined (_GCC_VER)</span>
<a name="l05010"></a>05010 <span class="preprocessor"></span>$   _txSetProcAddress (GetModuleHandle (NULL), <span class="stringliteral">&quot;MSVCRT.DLL&quot;</span>, <span class="stringliteral">&quot;_cexit&quot;</span>, (PROC) _tx_cexit);  <span class="comment">// See _tx_cexit()</span>
<a name="l05011"></a>05011 <span class="preprocessor">#endif</span>
<a name="l05012"></a>05012 <span class="preprocessor"></span>
<a name="l05013"></a>05013 $   atexit (_txCleanup);
<a name="l05014"></a>05014 
<a name="l05015"></a>05015 $   (void) Win32::SetDIBitsToDevice;                     <span class="comment">// Just to suppress &quot;defined but not used&quot; warning</span>
<a name="l05016"></a>05016 $   (void) Win32::GetDIBits;
<a name="l05017"></a>05017 $   (void) Win32::RoundRect;
<a name="l05018"></a>05018 $   (void) Win32::CreateRectRgn;
<a name="l05019"></a>05019 $   (void) Win32::GetBitmapDimensionEx;
<a name="l05020"></a>05020 $   (void) Win32::GetConsoleFontInfo;
<a name="l05021"></a>05021 
<a name="l05022"></a>05022 $   <span class="keywordflow">if</span> (_txConsole)
<a name="l05023"></a>05023         {
<a name="l05024"></a>05024 $       <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x07);
<a name="l05025"></a>05025 $       SetLastError (0);
<a name="l05026"></a>05026 
<a name="l05027"></a>05027 $       <span class="keywordtype">unsigned</span> old87 = 0, new87 = 0x0008001C; <span class="comment">// _EM_INVALID | _EM_DENORMAL | _EM_ZERODIVIDE | _EM_OVERFLOW</span>
<a name="l05028"></a>05028 $       <span class="keywordflow">if</span> (_controlfp_s (&amp;old87, 0, 0) == 0)
<a name="l05029"></a>05029             { $ (void) _controlfp_s (&amp;old87, old87 &amp; ~new87, 0x0008001F <span class="comment">/* _MCW_EM */</span>); }
<a name="l05030"></a>05030         }
<a name="l05031"></a>05031 
<a name="l05032"></a>05032 $   <span class="keywordflow">return</span> 1;
<a name="l05033"></a>05033     }
<a name="l05034"></a>05034 
<a name="l05035"></a>05035 <span class="comment">//}</span>
<a name="l05036"></a>05036 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05037"></a>05037 
<a name="l05038"></a>05038 HWND <a class="code" href="a00029.htm#gafce21ce98474d5559f316b3d47cdbfab" title="Создание окна рисования">txCreateWindow</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, <span class="keywordtype">bool</span> centered <span class="comment">/*= true*/</span>)
<a name="l05039"></a>05039     {
<a name="l05040"></a>05040 $1  <span class="keywordflow">if</span> (!_txInitialized) _txInitialized = _txInitialize();
<a name="l05041"></a>05041 
<a name="l05042"></a>05042 $   <span class="keywordflow">if</span> (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>())
<a name="l05043"></a>05043         {
<a name="l05044"></a>05044 $       SetLastErrorEx (ERROR_INVALID_DATA, 0);
<a name="l05045"></a>05045 $       _TX_ON_DEBUG (<a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Окно рисования уже создано&quot;</span>));
<a name="l05046"></a>05046 $       <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l05047"></a>05047         }
<a name="l05048"></a>05048 
<a name="l05049"></a>05049 $   <span class="keywordflow">if</span> (!_txIsDll)
<a name="l05050"></a>05050         {
<a name="l05051"></a>05051 $       _txMain = ! FindAtom (<span class="stringliteral">&quot;_txMain&quot;</span>);  <span class="comment">// Not a thread-safe</span>
<a name="l05052"></a>05052 $       (void)       AddAtom (<span class="stringliteral">&quot;_txMain&quot;</span>);
<a name="l05053"></a>05053         }
<a name="l05054"></a>05054 
<a name="l05055"></a>05055 $   <span class="keywordflow">if</span> (<a class="code" href="a00034.htm#ga04cf6a2f12ea617b5a29ce939f673085" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a> &lt; 10) { $ <a class="code" href="a00034.htm#ga04cf6a2f12ea617b5a29ce939f673085" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a> = 10; }
<a name="l05056"></a>05056 
<a name="l05057"></a>05057 $   _txRunning = <span class="keyword">false</span>;
<a name="l05058"></a>05058 
<a name="l05059"></a>05059     <span class="comment">// Store the size</span>
<a name="l05060"></a>05060 
<a name="l05061"></a>05061 $   <span class="keyword">static</span> SIZE size = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeX), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeY) };
<a name="l05062"></a>05062 $   <span class="keywordflow">if</span> (centered) { size.cx *= -1; size.cy *= -1; }
<a name="l05063"></a>05063 
<a name="l05064"></a>05064     <span class="comment">// In Thread, where REAL creation lies...</span>
<a name="l05065"></a>05065 
<a name="l05066"></a>05066 <span class="preprocessor">    #if !( defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1400) &amp;&amp; !defined (_MT) )</span>
<a name="l05067"></a>05067 <span class="preprocessor"></span>$   <span class="keywordtype">unsigned</span> <span class="keywordtype">id</span> = 0;
<a name="l05068"></a>05068 $   _txCanvas_Thread = (HANDLE) _beginthreadex (NULL, 0,                        _txCanvas_ThreadProc, &amp;size, 0, &amp;<span class="keywordtype">id</span>);
<a name="l05069"></a>05069 <span class="preprocessor">    #else</span>
<a name="l05070"></a>05070 <span class="preprocessor"></span>$   DWORD    <span class="keywordtype">id</span> = 0;
<a name="l05071"></a>05071 $   _txCanvas_Thread =          CreateThread   (NULL, 0, (PTHREAD_START_ROUTINE)_txCanvas_ThreadProc, &amp;size, 0, &amp;<span class="keywordtype">id</span>);
<a name="l05072"></a>05072 <span class="preprocessor">    #endif</span>
<a name="l05073"></a>05073 <span class="preprocessor"></span>
<a name="l05074"></a>05074 $   <span class="keywordflow">if</span> (!_txCanvas_Thread) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot start canvas thread.&quot;</span>), (HWND)NULL;
<a name="l05075"></a>05075 
<a name="l05076"></a>05076 $   _txWaitFor (_txRunning, 30*<a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>);
<a name="l05077"></a>05077 
<a name="l05078"></a>05078 $   <span class="keywordflow">if</span> (!_txRunning)       <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Cannot create canvas window.&quot;</span>),(HWND)NULL;
<a name="l05079"></a>05079 $   <span class="keywordflow">if</span> (!<a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>())           <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;\a&quot;</span> <span class="stringliteral">&quot;Canvas window is not OK.&quot;</span>),    (HWND)NULL;
<a name="l05080"></a>05080 
<a name="l05081"></a>05081 $   Sleep (100);
<a name="l05082"></a>05082 
<a name="l05083"></a>05083 $   errno = _doserrno = 0;
<a name="l05084"></a>05084 $   SetLastError (0);
<a name="l05085"></a>05085 
<a name="l05086"></a>05086 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l05087"></a>05087     }
<a name="l05088"></a>05088 
<a name="l05089"></a>05089 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05090"></a>05090 
<a name="l05091"></a>05091 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gae05b7bb52b782b86796201f9f96d0f58" title="Установка параметров рисования по умолчанию.">txSetDefaults</a>()
<a name="l05092"></a>05092     {
<a name="l05093"></a>05093 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05094"></a>05094 
<a name="l05095"></a>05095 $   <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keyword">false</span>);
<a name="l05096"></a>05096 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l05097"></a>05097 
<a name="l05098"></a>05098 $   RECT r = {0};
<a name="l05099"></a>05099 
<a name="l05100"></a>05100 $   GetClientRect (_txCanvas_Window, &amp;r) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05101"></a>05101 $   SIZE szCanvas    = { r.right - r.left, r.bottom - r.top };
<a name="l05102"></a>05102 
<a name="l05103"></a>05103 $   GetClientRect (Win32::GetConsoleWindow(), &amp;r) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05104"></a>05104 $   SIZE szCon    = { r.right - r.left, r.bottom - r.top };
<a name="l05105"></a>05105 
<a name="l05106"></a>05106 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l05107"></a>05107 
<a name="l05108"></a>05108 $   CONSOLE_SCREEN_BUFFER_INFO con = {{80, 25}, {0}, 0, {0, 0, 80-1, 25-1}, {80, 25}};
<a name="l05109"></a>05109 $   GetConsoleScreenBufferInfo (out, &amp;con);
<a name="l05110"></a>05110 
<a name="l05111"></a>05111 $   SIZE szTxt = { (short) (con.srWindow.Right  - con.srWindow.Left + 1),
<a name="l05112"></a>05112                    (short) (con.srWindow.Bottom - con.srWindow.Top  + 1) };
<a name="l05113"></a>05113 
<a name="l05114"></a>05114 <span class="comment">//{ Set defaults for graphics layer</span>
<a name="l05115"></a>05115 
<a name="l05116"></a>05116 $   _txBuffer_Select (Win32::GetStockObject (WHITE_PEN),   <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05117"></a>05117 $   _txBuffer_Select (Win32::GetStockObject (WHITE_BRUSH), <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()) <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l05118"></a>05118 
<a name="l05119"></a>05119 $   _txBuffer_Select (Win32::CreateFont (szCon.cy/szTxt.cy, szCon.cx/szTxt.cx,
<a name="l05120"></a>05120                                          0, 0, FW_REGULAR, FALSE, FALSE, FALSE,
<a name="l05121"></a>05121                                          RUSSIAN_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l05122"></a>05122                                          DEFAULT_QUALITY, DEFAULT_PITCH, <a class="code" href="a00034.htm#ga61836072e0c3887ed70841ff2d12c0d9" title="Шрифт консоли">_txConsoleFont</a>),
<a name="l05123"></a>05123                       <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()) asserted;
<a name="l05124"></a>05124 
<a name="l05125"></a>05125 $   (Win32::SetTextColor (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a4992f4f094a8e2ae9fdb68cfff1f6025" title="Белый цвет.">TX_WHITE</a>) != CLR_INVALID) asserted;
<a name="l05126"></a>05126 $    Win32::SetBkMode    (txDC(), TRANSPARENT)              asserted;
<a name="l05127"></a>05127 
<a name="l05128"></a>05128 $    Win32::SetROP2      (txDC(), R2_COPYPEN)               asserted;
<a name="l05129"></a>05129 
<a name="l05130"></a>05130 <span class="comment">//}</span>
<a name="l05131"></a>05131 
<a name="l05132"></a>05132 <span class="comment">//{ Set defaults for console  layer</span>
<a name="l05133"></a>05133 
<a name="l05134"></a>05134 $   HGDIOBJ font = <a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (_txConsoleFont)?
<a name="l05135"></a>05135                        Win32::CreateFont ((<span class="keywordtype">int</span>) (1.0 * szCanvas.cy/szTxt.cy), (<span class="keywordtype">int</span>) (1.0 * szCanvas.cx/szTxt.cx),
<a name="l05136"></a>05136                                           0, 0, FW_REGULAR, FALSE, FALSE, FALSE,
<a name="l05137"></a>05137                                           RUSSIAN_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l05138"></a>05138                                           DEFAULT_QUALITY, FIXED_PITCH, _txConsoleFont)
<a name="l05139"></a>05139                        :
<a name="l05140"></a>05140                        Win32::GetStockObject (SYSTEM_FIXED_FONT);
<a name="l05141"></a>05141 
<a name="l05142"></a>05142 $   _txBuffer_Select (font, _txCanvas_BackBuf[1]) asserted;
<a name="l05143"></a>05143 <span class="comment">//}</span>
<a name="l05144"></a>05144 
<a name="l05145"></a>05145 <span class="comment">//{ Scroll the console for text to go above top of window and don&#39;t mix with graphics</span>
<a name="l05146"></a>05146 
<a name="l05147"></a>05147 $   if (con.dwCursorPosition.X) _putch (&#39;\n&#39;);
<a name="l05148"></a>05148 
<a name="l05149"></a>05149 $   <span class="keywordtype">short</span> delta = (<span class="keywordtype">short</span>) (con.dwCursorPosition.Y - con.srWindow.Top);
<a name="l05150"></a>05150 
<a name="l05151"></a>05151 $   con.srWindow.Top    = (<span class="keywordtype">short</span>) (con.srWindow.Top    + delta);
<a name="l05152"></a>05152 $   con.srWindow.Bottom = (<span class="keywordtype">short</span>) (con.srWindow.Bottom + delta);
<a name="l05153"></a>05153 
<a name="l05154"></a>05154 $   SMALL_RECT src  = {0, 0, (short) (con.dwSize.X - 1), (short) (con.dwSize.Y - 1) };
<a name="l05155"></a>05155 $   CHAR_INFO  fill = {{<span class="charliteral">&#39; &#39;</span>}, 0x07};        <span class="comment">// Fill with spaces, light-gray on black</span>
<a name="l05156"></a>05156 $   COORD      dest = {0, (short) -delta};  <span class="comment">// New UL-corner of src, scroll up</span>
<a name="l05157"></a>05157 
<a name="l05158"></a>05158 $   con.dwCursorPosition.X = 0;
<a name="l05159"></a>05159 $   con.dwCursorPosition.Y = (short) (con.dwCursorPosition.Y - delta);
<a name="l05160"></a>05160 
<a name="l05161"></a>05161 $   (con.srWindow.Bottom &lt; con.dwSize.Y &amp;&amp;                        <span class="comment">// Move the &quot;window&quot;</span>
<a name="l05162"></a>05162      SetConsoleWindowInfo      (out, <span class="keyword">true</span>, &amp;con.srWindow))
<a name="l05163"></a>05163     ||
<a name="l05164"></a>05164     (ScrollConsoleScreenBuffer (out, &amp;src, NULL, dest, &amp;fill),    <span class="comment">// Or scroll the buffer</span>
<a name="l05165"></a>05165      SetConsoleCursorPosition  (out, con.dwCursorPosition));
<a name="l05166"></a>05166 <span class="comment">//}</span>
<a name="l05167"></a>05167 
<a name="l05168"></a>05168 $   <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keyword">true</span>);
<a name="l05169"></a>05169 
<a name="l05170"></a>05170     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l05171"></a>05171     }
<a name="l05172"></a>05172 
<a name="l05173"></a>05173 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05174"></a>05174 
<a name="l05175"></a>05175 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga6971b22d5486b242e20a8dea1f21422a" title="Проверка правильности работы библиотеки">txOK</a>()
<a name="l05176"></a>05176     {
<a name="l05177"></a>05177 $1  <span class="keywordflow">return</span> _txCanvas_OK();
<a name="l05178"></a>05178     }
<a name="l05179"></a>05179 
<a name="l05180"></a>05180 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05181"></a>05181 
<a name="l05182"></a>05182 <span class="comment">// In GCC, implicit std(MSVCRT.dll)::_cexit() call before _txCleanup leads to hands in _cexit handlers chain.</span>
<a name="l05183"></a>05183 <span class="comment">// So redefining std::_cexit(). Do it dynamically via PE Import Table hook to avoid duplicate symbols in linking</span>
<a name="l05184"></a>05184 <span class="comment">// serveral modules including TXLib.h. See _txSetProcAddress() call in _txInitialize().</span>
<a name="l05185"></a>05185 
<a name="l05186"></a>05186 <span class="preprocessor">#if defined (_GCC_VER)</span>
<a name="l05187"></a>05187 <span class="preprocessor"></span>
<a name="l05188"></a>05188 <span class="keywordtype">void</span> _tx_cexit()
<a name="l05189"></a>05189     {
<a name="l05190"></a>05190 $1  _txCleanup();
<a name="l05191"></a>05191 
<a name="l05192"></a>05192     <span class="keywordflow">if</span> (Win32::_cexit) { $ Win32::_cexit(); }
<a name="l05193"></a>05193 
<a name="l05194"></a>05194 $   <span class="keywordflow">return</span>;
<a name="l05195"></a>05195     }
<a name="l05196"></a>05196 
<a name="l05197"></a>05197 <span class="preprocessor">#endif</span>
<a name="l05198"></a>05198 <span class="preprocessor"></span>
<a name="l05199"></a>05199 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05200"></a>05200 
<a name="l05201"></a>05201 <span class="keywordtype">void</span> _txCleanup()
<a name="l05202"></a>05202     {
<a name="l05203"></a>05203 $1  <span class="keywordflow">if</span> (!_txInitialized) <span class="keywordflow">return</span>;
<a name="l05204"></a>05204     <span class="keywordflow">else</span> _txInitialized = <span class="keyword">false</span>;
<a name="l05205"></a>05205 
<a name="l05206"></a>05206 $   <a class="code" href="a00029.htm#ga56227ddccbe156355eaca50264bf3334" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<a class="code" href="a00034.htm#ga04cf6a2f12ea617b5a29ce939f673085" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>);
<a name="l05207"></a>05207 
<a name="l05208"></a>05208 $   _txRunning = <span class="keyword">false</span>;
<a name="l05209"></a>05209 $   _txConsole_IsBlinking = <span class="keyword">false</span>;
<a name="l05210"></a>05210 
<a name="l05211"></a>05211 $   HWND canvas     = <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l05212"></a>05212 $   HWND console    = Win32::GetConsoleWindow();
<a name="l05213"></a>05213 $   <span class="keywordtype">unsigned</span> thread = GetCurrentThreadId();
<a name="l05214"></a>05214 
<a name="l05215"></a>05215 $   HWND wnd        = (canvas)? canvas : console;
<a name="l05216"></a>05216 
<a name="l05217"></a>05217 $   <span class="keywordtype">bool</span> externTerm = (thread != _txMainThreadId &amp;&amp;
<a name="l05218"></a>05218                        thread != _txCanvas_ThreadId);
<a name="l05219"></a>05219 $   DWORD parent = 0;
<a name="l05220"></a>05220 $   <span class="keywordtype">bool</span> waitableParent = !externTerm &amp;&amp; _txIsParentWaitable (&amp;parent);
<a name="l05221"></a>05221 
<a name="l05222"></a>05222 $   <span class="keywordflow">if</span> (_txConsole)
<a name="l05223"></a>05223         {
<a name="l05224"></a>05224 $       <span class="keywordflow">if</span> (_txMain) <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x07);
<a name="l05225"></a>05225 $       <span class="keywordflow">if</span> (console) EnableWindow (console, <span class="keyword">true</span>);
<a name="l05226"></a>05226         }
<a name="l05227"></a>05227 
<a name="l05228"></a>05228 $   <span class="keywordflow">if</span> (_txMain &amp;&amp; !externTerm &amp;&amp; wnd != NULL)
<a name="l05229"></a>05229         { $ _txSetFinishedText (wnd); }
<a name="l05230"></a>05230 
<a name="l05231"></a>05231 $   <span class="keywordflow">if</span> ((canvas? _txMain : _txConsole &amp;&amp; !waitableParent) &amp;&amp; !_txExit &amp;&amp;
<a name="l05232"></a>05232         thread == _txMainThreadId)
<a name="l05233"></a>05233         {
<a name="l05234"></a>05234 $       <span class="keywordflow">if</span> (wnd)
<a name="l05235"></a>05235             {
<a name="l05236"></a>05236 $           ShowWindow          (wnd, SW_SHOW);
<a name="l05237"></a>05237 $           EnableWindow        (wnd, <span class="keyword">true</span>);
<a name="l05238"></a>05238 $           SetForegroundWindow (wnd);
<a name="l05239"></a>05239 $           BringWindowToTop    (wnd);
<a name="l05240"></a>05240 $           RedrawWindow        (wnd, NULL, NULL, RDW_INVALIDATE | RDW_INTERNALPAINT | RDW_UPDATENOW);
<a name="l05241"></a>05241             }
<a name="l05242"></a>05242 
<a name="l05243"></a>05243 $       <span class="keywordflow">if</span> (console)
<a name="l05244"></a>05244             { $ _txPauseBeforeTermination (canvas); }
<a name="l05245"></a>05245         }
<a name="l05246"></a>05246 
<a name="l05247"></a>05247 $   <span class="keywordflow">if</span> (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>())
<a name="l05248"></a>05248         { $ SendNotifyMessage (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), WM_DESTROY, 0, 0); }
<a name="l05249"></a>05249 
<a name="l05250"></a>05250 $   _txWaitFor (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), 5*<a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>);
<a name="l05251"></a>05251 
<a name="l05252"></a>05252 $   <span class="keywordflow">if</span> (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>())
<a name="l05253"></a>05253         { $ DeleteCriticalSection (&amp;_txCanvas_LockBackBuf); _txCanvas_LockBackBuf = <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (CRITICAL_SECTION); }
<a name="l05254"></a>05254 
<a name="l05255"></a>05255 $   <span class="keywordflow">if</span> (_txCanvas_Thread)
<a name="l05256"></a>05256         { $ CloseHandle (_txCanvas_Thread) asserted; _txCanvas_Thread = NULL; }
<a name="l05257"></a>05257 
<a name="l05258"></a>05258 $   delete _txCanvas_UserDCs; _txCanvas_UserDCs = NULL;
<a name="l05259"></a>05259 
<a name="l05260"></a>05260 $   if (_txMain &amp;&amp; canvas &amp;&amp; waitableParent &amp;&amp; _txNOP (<a class="code" href="a00034.htm#ga9a495d013c6f08cd50220aca99ca56c2" title="Разрешать принудительное завершение вызывающих программ, ждущих нажатия клавиш после завершения TXLib...">_TX_ALLOW_KILL_PARENT</a>))
<a name="l05261"></a>05261         { $ waitableParent |= !_txKillProcess (parent); }
<a name="l05262"></a>05262 
<a name="l05263"></a>05263 $   <span class="keywordflow">if</span> (_txMain &amp;&amp; _txConsole)
<a name="l05264"></a>05264         { $ _txConsole_Detach (waitableParent &amp;&amp; !externTerm); }
<a name="l05265"></a>05265 
<a name="l05266"></a>05266     _TX_ON_DEBUG (OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l05267"></a>05267                   OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> <span class="stringliteral">&quot; - FINISHED: &quot;</span> <a class="code" href="a00032.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib, входит в диагностические сообщения.">_TX_MODULE</a> <span class="stringliteral">&quot;\n&quot;</span>);
<a name="l05268"></a>05268                   OutputDebugString (<span class="stringliteral">&quot;\n&quot;</span>));
<a name="l05269"></a>05269     }
<a name="l05270"></a>05270 
<a name="l05271"></a>05271 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05272"></a>05272 
<a name="l05273"></a>05273 <span class="keywordtype">int</span> _txSetFinishedText (HWND wnd)
<a name="l05274"></a>05274     {
<a name="l05275"></a>05275     <span class="keyword">struct </span>tools
<a name="l05276"></a>05276         {
<a name="l05277"></a>05277         <span class="keyword">static</span> LRESULT getWindowText (HWND window, <span class="keywordtype">wchar_t</span> text[], <span class="keywordtype">int</span> size)
<a name="l05278"></a>05278             {
<a name="l05279"></a>05279 $1          memset (text, 0, size * <span class="keyword">sizeof</span> (*text));
<a name="l05280"></a>05280 
<a name="l05281"></a>05281 $           <span class="keywordflow">return</span> SendMessageTimeoutW (window, WM_GETTEXT, (WPARAM) size, (LPARAM) text, SMTO_BLOCK | SMTO_ABORTIFHUNG, <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>, NULL);
<a name="l05282"></a>05282             }
<a name="l05283"></a>05283 
<a name="l05284"></a>05284         <span class="keyword">static</span> LRESULT setWindowText (HWND window, <span class="keywordtype">wchar_t</span> text[])
<a name="l05285"></a>05285             {
<a name="l05286"></a>05286 $1          <span class="keywordflow">return</span> SendMessageTimeoutW (window, WM_SETTEXT, 0,             (LPARAM) text, SMTO_BLOCK | SMTO_ABORTIFHUNG, <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>, NULL);
<a name="l05287"></a>05287             }
<a name="l05288"></a>05288         };
<a name="l05289"></a>05289 
<a name="l05290"></a>05290 $1  <span class="keyword">static</span> <span class="keywordtype">wchar_t</span> title [<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>+15] = L<span class="stringliteral">&quot;TXLib&quot;</span>;
<a name="l05291"></a>05291 
<a name="l05292"></a>05292 $   tools::getWindowText (wnd, title, <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1);
<a name="l05293"></a>05293 $   <span class="keywordtype">unsigned</span> len = (unsigned) wcslen (title); <span class="keywordflow">if</span> (len &gt;= <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>) len = <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1;
<a name="l05294"></a>05294 
<a name="l05295"></a>05295 $   MultiByteToWideChar (_TX_CP, 0, <span class="stringliteral">&quot; [ЗАВЕРШЕНО]&quot;</span>, -1, title + len, <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> - len);
<a name="l05296"></a>05296 
<a name="l05297"></a>05297 $   tools::setWindowText (wnd, title);
<a name="l05298"></a>05298 $   tools::getWindowText (wnd, title, <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1);
<a name="l05299"></a>05299 $   <span class="keywordflow">if</span> (len &lt;= <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1-2 &amp;&amp; title [len+2] == <span class="comment">/* &#39;З&#39; */</span> (<span class="keywordtype">wchar_t</span>) 0x0417) <span class="keywordflow">return</span> 0;
<a name="l05300"></a>05300 
<a name="l05301"></a>05301 $   MultiByteToWideChar (_TX_CP, 0, <span class="stringliteral">&quot; [FINISHED]&quot;</span>,  -1, title + len, <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a> - len);
<a name="l05302"></a>05302 
<a name="l05303"></a>05303 $   tools::setWindowText (wnd, title);
<a name="l05304"></a>05304 $   tools::getWindowText (wnd, title, <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1);
<a name="l05305"></a>05305 $   <span class="keywordflow">if</span> (len &lt;= <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>-1-2 &amp;&amp; title [len+2] == <span class="comment">/* &#39;F&#39; */</span> (<span class="keywordtype">wchar_t</span>) 0x0046) <span class="keywordflow">return</span> 1;
<a name="l05306"></a>05306 
<a name="l05307"></a>05307 $   <span class="keywordflow">return</span> 2;
<a name="l05308"></a>05308     }
<a name="l05309"></a>05309 
<a name="l05310"></a>05310 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05311"></a>05311 
<a name="l05312"></a>05312 <span class="keywordtype">void</span> _txPauseBeforeTermination (HWND canvas)
<a name="l05313"></a>05313     {
<a name="l05314"></a>05314 $1  <span class="keywordflow">while</span> (_kbhit()) (void)_getch();
<a name="l05315"></a>05315 
<a name="l05316"></a>05316 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l05317"></a>05317 $   <span class="keywordtype">bool</span> kbRedir = !GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con);
<a name="l05318"></a>05318 $   <span class="keywordtype">bool</span> kbWait  = (_txGetInput() == EOF);
<a name="l05319"></a>05319 $   <span class="keywordtype">bool</span> wine    = !!Win32::wine_get_version;
<a name="l05320"></a>05320 
<a name="l05321"></a>05321 $   <span class="keywordflow">if</span> (kbWait &amp;&amp; !canvas &amp;&amp; !kbRedir &amp;&amp; !wine)
<a name="l05322"></a>05322         {
<a name="l05323"></a>05323 $       printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;[Нажмите любую клавишу для завершения]&quot;</span>);
<a name="l05324"></a>05324         }
<a name="l05325"></a>05325 
<a name="l05326"></a>05326 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; ; i++)
<a name="l05327"></a>05327         {
<a name="l05328"></a>05328 $       Sleep (<a class="code" href="a00034.htm#ga04cf6a2f12ea617b5a29ce939f673085" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>);
<a name="l05329"></a>05329 
<a name="l05330"></a>05330         <span class="keywordflow">if</span> (!kbWait || (kbRedir &amp;&amp; !canvas)) { $ <span class="keywordflow">break</span>; }  <span class="comment">// No need to run and hide</span>
<a name="l05331"></a>05331 
<a name="l05332"></a>05332         <span class="keywordflow">if</span> (!wine &amp;&amp; _txGetInput() != EOF)   { $ <span class="keywordflow">break</span>; }  <span class="comment">// Somebody hit something.</span>
<a name="l05333"></a>05333 
<a name="l05334"></a>05334         <span class="keywordflow">if</span> (canvas &amp;&amp; !_txCanvas_ThreadId)   { $ <span class="keywordflow">break</span>; }  <span class="comment">// There was a window, and now there is not.</span>
<a name="l05335"></a>05335 
<a name="l05336"></a>05336         <span class="keywordflow">if</span> (!Win32::GetConsoleWindow())      { $ <span class="keywordflow">break</span>; }  <span class="comment">// Console was destroyed</span>
<a name="l05337"></a>05337 
<a name="l05338"></a>05338         <span class="keywordflow">if</span> (Win32::GhostWindowFromHungWindow &amp;&amp; Win32::GhostWindowFromHungWindow (canvas))
<a name="l05339"></a>05339             { $ <a class="code" href="a00032.htm#ga3e4a82a10130528f63b6f19476a0943a" title="Выводит развернутое диагностическое сообщение.">TX_ERROR</a> (<span class="stringliteral">&quot;Приложение зависло и будет закрыто.&quot;</span>); <span class="keywordflow">break</span>; }
<a name="l05340"></a>05340 
<a name="l05341"></a>05341         <span class="keywordflow">if</span> (canvas &amp;&amp; Win32::IsHungAppWindow &amp;&amp; Win32::IsHungAppWindow (canvas))
<a name="l05342"></a>05342             { $ _txTrace (__FILE__, __LINE__, <span class="stringliteral">&quot;WARNING: Приложение зависло и будет закрыто.&quot;</span>);     <span class="keywordflow">break</span>; }
<a name="l05343"></a>05343 
<a name="l05344"></a>05344         <span class="keywordflow">if</span> (canvas &amp;&amp; !SendMessageTimeout (canvas, WM_NULL, 0,0, SMTO_BLOCK | SMTO_ABORTIFHUNG, <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>, NULL))
<a name="l05345"></a>05345             { $ _txTrace (__FILE__, __LINE__, <span class="stringliteral">&quot;WARNING: Приложение не отвечает и будет закрыто.&quot;</span>); <span class="keywordflow">break</span>; }
<a name="l05346"></a>05346 
<a name="l05347"></a>05347         <span class="keywordflow">if</span> (!wine &amp;&amp; !(i % 100500))
<a name="l05348"></a>05348             { $ printf (<span class="stringliteral">&quot;\r&quot;</span> <span class="stringliteral">&quot;[Так нажмите же какую-нибудь клавишу для моего завершения]&quot;</span>); }
<a name="l05349"></a>05349         }
<a name="l05350"></a>05350 
<a name="l05351"></a>05351 $   <span class="keywordflow">while</span> (!wine &amp;&amp; _kbhit()) (void)_getch();
<a name="l05352"></a>05352 
<a name="l05353"></a>05353 $   printf (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l05354"></a>05354     }
<a name="l05355"></a>05355 
<a name="l05356"></a>05356 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05357"></a>05357 
<a name="l05358"></a>05358 <span class="keywordtype">int</span> _txGetInput()
<a name="l05359"></a>05359     {
<a name="l05360"></a>05360 $1  HANDLE con = GetStdHandle (STD_INPUT_HANDLE);
<a name="l05361"></a>05361 
<a name="l05362"></a>05362 $   DWORD nchars = 0;
<a name="l05363"></a>05363 $   <span class="keywordflow">if</span> (GetConsoleMode (con, &amp;nchars) == 0 &amp;&amp;
<a name="l05364"></a>05364         PeekNamedPipe  (con, NULL, 0, NULL, &amp;nchars, NULL))
<a name="l05365"></a>05365         {
<a name="l05366"></a>05366 $       <span class="keywordflow">return</span> (nchars)? fgetc (stdin) : EOF;
<a name="l05367"></a>05367         }
<a name="l05368"></a>05368 
<a name="l05369"></a>05369 $   <span class="keywordflow">if</span> (_kbhit())
<a name="l05370"></a>05370         {
<a name="l05371"></a>05371 $       <span class="keywordflow">return</span> _getch();
<a name="l05372"></a>05372         }
<a name="l05373"></a>05373 
<a name="l05374"></a>05374 <span class="preprocessor">#if defined (_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1700)</span>
<a name="l05375"></a>05375 <span class="preprocessor"></span>
<a name="l05376"></a>05376 $   <span class="keywordflow">if</span> (fseek (stdin, 1, SEEK_CUR) != EOF)
<a name="l05377"></a>05377         {
<a name="l05378"></a>05378 $       (void) fseek (stdin, -1, SEEK_CUR);
<a name="l05379"></a>05379 $       <span class="keywordflow">return</span> fgetc (stdin);                              <span class="comment">// This causes blocking in MSVC 2011 beta</span>
<a name="l05380"></a>05380         }
<a name="l05381"></a>05381 
<a name="l05382"></a>05382 <span class="preprocessor">#endif</span>
<a name="l05383"></a>05383 <span class="preprocessor"></span>
<a name="l05384"></a>05384 $   <span class="keywordflow">return</span> EOF;
<a name="l05385"></a>05385     }
<a name="l05386"></a>05386 
<a name="l05387"></a>05387 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05388"></a>05388 
<a name="l05389"></a>05389 <span class="keywordtype">bool</span> _txIsParentWaitable (DWORD* parentPID <span class="comment">/*= NULL*/</span>)
<a name="l05390"></a>05390     {
<a name="l05391"></a>05391 $1  PROCESSENTRY32* info = _txFindProcess();
<a name="l05392"></a>05392 $   <span class="keywordflow">if</span> (!info) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05393"></a>05393 
<a name="l05394"></a>05394 $   info = _txFindProcess (info-&gt;th32ParentProcessID);
<a name="l05395"></a>05395 $   <span class="keywordflow">if</span> (!info) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05396"></a>05396 
<a name="l05397"></a>05397 $   <span class="keywordtype">char</span> parent [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05398"></a>05398 $   strncpy_s (parent, info-&gt;szExeFile, sizeof (parent) - 1);
<a name="l05399"></a>05399 $   <span class="keywordflow">if</span> (parentPID) *parentPID = info-&gt;th32ProcessID;
<a name="l05400"></a>05400 
<a name="l05401"></a>05401 $   info = _txFindProcess (info-&gt;th32ParentProcessID);          <span class="comment">// info: grandparent</span>
<a name="l05402"></a>05402 
<a name="l05403"></a>05403 $   <span class="keywordtype">char</span> list[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <a class="code" href="a00034.htm#ga2c0a4fe0612f109c5c88d6d55a061db5" title="Список запускающих программ, которые ждут нажатия клавиши после завершения процесса TXLib...">_TX_WAITABLE_PARENTS</a>;
<a name="l05404"></a>05404 $   <span class="keywordtype">char</span>* ctx = NULL;
<a name="l05405"></a>05405 
<a name="l05406"></a>05406 $   <span class="keywordflow">for</span> (<span class="keywordtype">char</span>* p = strtok_s (list, <span class="stringliteral">&quot;, &quot;</span>, &amp;ctx); p; p = strtok_s (NULL, <span class="stringliteral">&quot;, &quot;</span>, &amp;ctx))
<a name="l05407"></a>05407         {
<a name="l05408"></a>05408 $       <span class="keywordtype">char</span>* gp = strchr (p, <span class="charliteral">&#39;:&#39;</span>);
<a name="l05409"></a>05409 
<a name="l05410"></a>05410 $       <span class="keywordflow">if</span> (gp)
<a name="l05411"></a>05411             {
<a name="l05412"></a>05412 $           *gp++ = 0;
<a name="l05413"></a>05413 $           <span class="keywordflow">if</span> (_stricmp (p, parent) != 0) { <span class="keywordflow">continue</span>; }
<a name="l05414"></a>05414 
<a name="l05415"></a>05415 $           <span class="keywordflow">if</span> (info) <span class="keywordflow">if</span> (_stricmp (gp, info-&gt;szExeFile) == 0)  <span class="comment">// Was &amp;&amp;, but OMG MSVC /analyze..</span>
<a name="l05416"></a>05416                 { $ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l05417"></a>05417             }
<a name="l05418"></a>05418         <span class="keywordflow">else</span>
<a name="l05419"></a>05419             {
<a name="l05420"></a>05420 $           <span class="keywordflow">if</span> (_stricmp (p, parent) == 0)
<a name="l05421"></a>05421                 { $ <span class="keywordflow">return</span> <span class="keyword">true</span>; }
<a name="l05422"></a>05422             }
<a name="l05423"></a>05423         }
<a name="l05424"></a>05424 
<a name="l05425"></a>05425 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05426"></a>05426     }
<a name="l05427"></a>05427 
<a name="l05428"></a>05428 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05429"></a>05429 
<a name="l05430"></a>05430 PROCESSENTRY32* _txFindProcess (<span class="keywordtype">unsigned</span> pid <span class="comment">/*= GetCurrentProcessId()*/</span>)
<a name="l05431"></a>05431     {
<a name="l05432"></a>05432 $1  <span class="keyword">static</span> PROCESSENTRY32 info = { <span class="keyword">sizeof</span> (info) };
<a name="l05433"></a>05433 $   <span class="keywordflow">if</span> (!pid) <span class="keywordflow">return</span> &amp;info;
<a name="l05434"></a>05434 
<a name="l05435"></a>05435 $   HANDLE sshot = CreateToolhelp32Snapshot (TH32CS_SNAPPROCESS, 0);
<a name="l05436"></a>05436 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (sshot); <span class="keywordflow">if</span> (!sshot) <span class="keywordflow">return</span> NULL;
<a name="l05437"></a>05437 
<a name="l05438"></a>05438 $   <span class="keywordflow">for</span> (<span class="keywordtype">bool</span> ok = !!Process32First (sshot, &amp;info); ok; ok = !!Process32Next (sshot, &amp;info))
<a name="l05439"></a>05439         <span class="keywordflow">if</span> (info.th32ProcessID == pid) <span class="keywordflow">break</span>;
<a name="l05440"></a>05440 
<a name="l05441"></a>05441 $   CloseHandle (sshot);
<a name="l05442"></a>05442 
<a name="l05443"></a>05443 $   <span class="keywordflow">return</span> &amp;info;
<a name="l05444"></a>05444     }
<a name="l05445"></a>05445 
<a name="l05446"></a>05446 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05447"></a>05447 
<a name="l05448"></a>05448 <span class="keywordtype">bool</span> _txInDll()
<a name="l05449"></a>05449     {
<a name="l05450"></a>05450 $1  MODULEENTRY32 mod = { <span class="keyword">sizeof</span> (mod) };
<a name="l05451"></a>05451 
<a name="l05452"></a>05452 $   HANDLE sshot = CreateToolhelp32Snapshot (TH32CS_SNAPMODULE, 0);
<a name="l05453"></a>05453 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (sshot); <span class="keywordflow">if</span> (!sshot) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05454"></a>05454 
<a name="l05455"></a>05455 $   <span class="keywordtype">bool</span> inDll = <span class="keyword">false</span>;
<a name="l05456"></a>05456 
<a name="l05457"></a>05457 $   <span class="keywordflow">for</span> (<span class="keywordtype">bool</span> ok = !!Module32First (sshot, &amp;mod); ok; ok = !!Module32Next (sshot, &amp;mod))
<a name="l05458"></a>05458         {
<a name="l05459"></a>05459 $       <span class="keywordflow">if</span> (!mod.modBaseAddr) <span class="keywordflow">continue</span>;
<a name="l05460"></a>05460 
<a name="l05461"></a>05461 $       IMAGE_DOS_HEADER* dosHdr = (IMAGE_DOS_HEADER*)  mod.modBaseAddr;
<a name="l05462"></a>05462 $       IMAGE_NT_HEADERS* ntHdr  = (IMAGE_NT_HEADERS*) (mod.modBaseAddr + dosHdr-&gt;e_lfanew);
<a name="l05463"></a>05463 
<a name="l05464"></a>05464 $       inDll = (dosHdr-&gt;e_magic  == IMAGE_DOS_SIGNATURE &amp;&amp;
<a name="l05465"></a>05465                  ntHdr-&gt;Signature == IMAGE_NT_SIGNATURE  &amp;&amp;
<a name="l05466"></a>05466                 (ntHdr-&gt;FileHeader.Characteristics &amp; IMAGE_FILE_DLL) != 0);
<a name="l05467"></a>05467 
<a name="l05468"></a>05468 $       <span class="keywordflow">if</span> (<a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> ((BYTE*)(ptrdiff_t)_txInDll, mod.modBaseAddr, mod.modBaseAddr + mod.modBaseSize)) <span class="keywordflow">break</span>;
<a name="l05469"></a>05469         }
<a name="l05470"></a>05470 
<a name="l05471"></a>05471 $   CloseHandle (sshot);
<a name="l05472"></a>05472 $   <span class="keywordflow">return</span> inDll;
<a name="l05473"></a>05473     }
<a name="l05474"></a>05474 
<a name="l05475"></a>05475 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05476"></a>05476 
<a name="l05477"></a>05477 <span class="comment">// You are here, little hacker?</span>
<a name="l05478"></a>05478 
<a name="l05479"></a>05479 <span class="keywordtype">bool</span> _txKillProcess (DWORD pid)
<a name="l05480"></a>05480     {
<a name="l05481"></a>05481 $1  _TX_IF_ARGUMENT_FAILED (pid) return false;
<a name="l05482"></a>05482 
<a name="l05483"></a>05483 $   HANDLE token = INVALID_HANDLE_VALUE;
<a name="l05484"></a>05484 $   OpenProcessToken (GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;token) asserted;
<a name="l05485"></a>05485 
<a name="l05486"></a>05486 $   LUID luid = {0};
<a name="l05487"></a>05487 $   LookupPrivilegeValue (NULL, SE_DEBUG_NAME, &amp;luid) asserted;
<a name="l05488"></a>05488 
<a name="l05489"></a>05489 $   TOKEN_PRIVILEGES priv = { 1, {{{ luid.LowPart, luid.HighPart}, SE_PRIVILEGE_ENABLED }}};
<a name="l05490"></a>05490 $   TOKEN_PRIVILEGES old  = {0};
<a name="l05491"></a>05491 
<a name="l05492"></a>05492 $   DWORD oldSz = 0;
<a name="l05493"></a>05493 $   AdjustTokenPrivileges (token, <span class="keyword">false</span>, &amp;priv, <span class="keyword">sizeof</span> (priv), &amp;old, &amp;oldSz) asserted;
<a name="l05494"></a>05494 
<a name="l05495"></a>05495 $   HANDLE proc = OpenProcess (PROCESS_ALL_ACCESS, 0, pid);
<a name="l05496"></a>05496 $   if (!proc) return false;
<a name="l05497"></a>05497 
<a name="l05498"></a>05498 $   <span class="keywordtype">bool</span> ok = !!TerminateProcess (proc, 0);
<a name="l05499"></a>05499 $   CloseHandle (proc);
<a name="l05500"></a>05500 
<a name="l05501"></a>05501 $   return ok;
<a name="l05502"></a>05502     }
<a name="l05503"></a>05503 
<a name="l05504"></a>05504 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05505"></a>05505 
<a name="l05506"></a>05506 <span class="comment">// TXLib continues to hack the reality to make your life better, sweeter and easier</span>
<a name="l05507"></a>05507 
<a name="l05508"></a>05508 PROC _txSetProcAddress (HMODULE module, const <span class="keywordtype">char</span>* dllName, const <span class="keywordtype">char</span>* funcName, PROC newFunc)
<a name="l05509"></a>05509     {
<a name="l05510"></a>05510 $1  _TX_IF_ARGUMENT_FAILED (module)  return NULL;
<a name="l05511"></a>05511 $   _TX_IF_ARGUMENT_FAILED (dllName) return NULL;
<a name="l05512"></a>05512 $   _TX_IF_ARGUMENT_FAILED (newFunc) return NULL;
<a name="l05513"></a>05513 
<a name="l05514"></a>05514 $   HMODULE dll = GetModuleHandle (dllName);
<a name="l05515"></a>05515 $   if (!dll) return NULL;
<a name="l05516"></a>05516 
<a name="l05517"></a>05517 $   PROC oldFunc = GetProcAddress (dll, funcName);
<a name="l05518"></a>05518 $   if (!oldFunc) return NULL;
<a name="l05519"></a>05519 
<a name="l05520"></a>05520     <span class="preprocessor">#define RVA_( type, addr )  ( (type) ((ptrdiff_t) module + (ptrdiff_t) (addr)) )</span>
<a name="l05521"></a>05521 <span class="preprocessor"></span>
<a name="l05522"></a>05522 $   IMAGE_DOS_HEADER* dosHdr = RVA_ (IMAGE_DOS_HEADER*, 0);
<a name="l05523"></a>05523 $   IMAGE_NT_HEADERS* ntHdr  = RVA_ (IMAGE_NT_HEADERS*, dosHdr-&gt;e_lfanew);
<a name="l05524"></a>05524 
<a name="l05525"></a>05525 $   <span class="keywordflow">if</span> (dosHdr-&gt;e_magic   != IMAGE_DOS_SIGNATURE ||
<a name="l05526"></a>05526         ntHdr -&gt;Signature != IMAGE_NT_SIGNATURE) <span class="keywordflow">return</span> NULL;
<a name="l05527"></a>05527 
<a name="l05528"></a>05528 $   DWORD impOffset = ntHdr-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress;
<a name="l05529"></a>05529 $   IMAGE_IMPORT_DESCRIPTOR* desc = RVA_ (IMAGE_IMPORT_DESCRIPTOR*, impOffset);
<a name="l05530"></a>05530 
<a name="l05531"></a>05531 $   <span class="keywordflow">if</span> (desc == (IMAGE_IMPORT_DESCRIPTOR*) ntHdr) <span class="keywordflow">return</span> NULL;
<a name="l05532"></a>05532 
<a name="l05533"></a>05533 $   IMAGE_THUNK_DATA* thunk = NULL;
<a name="l05534"></a>05534 $   <span class="keywordtype">bool</span> found = <span class="keyword">false</span>;
<a name="l05535"></a>05535 
<a name="l05536"></a>05536     <span class="keywordflow">for</span> (; desc-&gt;Name; desc++)
<a name="l05537"></a>05537         {
<a name="l05538"></a>05538 $       <span class="keywordflow">if</span> (_stricmp (RVA_ (<span class="keyword">const</span> <span class="keywordtype">char</span>*, desc-&gt;Name), dllName) != 0) <span class="keywordflow">continue</span>;
<a name="l05539"></a>05539 
<a name="l05540"></a>05540 $       <span class="keywordflow">for</span> (thunk = RVA_ (IMAGE_THUNK_DATA*, desc-&gt;FirstThunk); thunk-&gt;u1.Function; thunk++)
<a name="l05541"></a>05541             <span class="keywordflow">if</span> ((ptrdiff_t) thunk-&gt;u1.Function == (ptrdiff_t) oldFunc) { found = <span class="keyword">true</span>; <span class="keywordflow">break</span>; }
<a name="l05542"></a>05542 
<a name="l05543"></a>05543 $       <span class="keywordflow">if</span> (found) <span class="keywordflow">break</span>;
<a name="l05544"></a>05544         }
<a name="l05545"></a>05545 
<a name="l05546"></a>05546 $   <span class="keywordflow">if</span> (!found) <span class="keywordflow">return</span> NULL;
<a name="l05547"></a>05547 
<a name="l05548"></a>05548 $   *(PROC*)&amp; thunk-&gt;u1.Function = newFunc;  <span class="comment">// In different MS-SDKs this field has different types (DWORD/DWORD*/etc)</span>
<a name="l05549"></a>05549 
<a name="l05550"></a>05550 $   <span class="keywordflow">return</span> oldFunc;
<a name="l05551"></a>05551 
<a name="l05552"></a>05552     #undef RVA_
<a name="l05553"></a>05553     }
<a name="l05554"></a>05554 
<a name="l05556"></a>05556 <span class="comment">//}</span>
<a name="l05557"></a>05557 <span class="comment">//=================================================================================================================</span>
<a name="l05558"></a>05558 
<a name="l05559"></a>05559 <span class="comment">//=================================================================================================================</span>
<a name="l05560"></a>05560 <span class="comment">//{          [Internal] TXLib window functions     (_txCanvas...)</span>
<a name="l05562"></a>05562 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l05563"></a>05563 
<a name="l05564"></a>05564 <span class="comment">//{</span>
<a name="l05565"></a>05565 <span class="preprocessor">#if defined (_MSC_VER_6) || defined (_GCC_VER) &amp;&amp; (_GCC_VER &lt;= 345)</span>
<a name="l05566"></a>05566 <span class="preprocessor"></span>
<a name="l05567"></a>05567 <span class="preprocessor">    #define SetClassLong_  SetClassLong</span>
<a name="l05568"></a>05568 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HICON_     GCL_HICON</span>
<a name="l05569"></a>05569 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HICONSM_   GCL_HICONSM</span>
<a name="l05570"></a>05570 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HCURSOR_   GCL_HCURSOR</span>
<a name="l05571"></a>05571 <span class="preprocessor"></span>
<a name="l05572"></a>05572 <span class="preprocessor">#else</span>
<a name="l05573"></a>05573 <span class="preprocessor"></span><span class="preprocessor">    #define SetClassLong_  SetClassLongPtr</span>
<a name="l05574"></a>05574 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HICON_     GCLP_HICON</span>
<a name="l05575"></a>05575 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HICONSM_   GCLP_HICONSM</span>
<a name="l05576"></a>05576 <span class="preprocessor"></span><span class="preprocessor">    #define GCL_HCURSOR_   GCLP_HCURSOR</span>
<a name="l05577"></a>05577 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l05578"></a>05578 <span class="preprocessor"></span><span class="comment">//}</span>
<a name="l05579"></a>05579 
<a name="l05580"></a>05580 <span class="keywordtype">unsigned</span> WINAPI _txCanvas_ThreadProc (<span class="keywordtype">void</span>* data)
<a name="l05581"></a>05581     {
<a name="l05582"></a>05582 $1  _txCanvas_ThreadId = GetCurrentThreadId();
<a name="l05583"></a>05583 
<a name="l05584"></a>05584 $   _TX_IF_ARGUMENT_FAILED (data) return false;
<a name="l05585"></a>05585 
<a name="l05586"></a>05586 $   HWND wnd = _txCanvas_CreateWindow ((SIZE*) data);
<a name="l05587"></a>05587 $   if (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()) return <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (&quot;\a&quot; &quot;Cannot create canvas&quot;), 0;
<a name="l05588"></a>05588 
<a name="l05589"></a>05589 $   HICON   icon32 = LoadIcon   (GetModuleHandle (NULL), &quot;_TX_ICON&quot;);
<a name="l05590"></a>05590 $   HICON   icon16 = LoadIcon   (GetModuleHandle (NULL), &quot;_TX_ICONSM&quot;);
<a name="l05591"></a>05591 $   HCURSOR cursor = LoadCursor (GetModuleHandle (NULL), &quot;_TX_CURSOR&quot;);
<a name="l05592"></a>05592 
<a name="l05593"></a>05593 $   SetClassLong_ (wnd, GCL_HICON_,   (DWORD)(ptrdiff_t) (icon32? icon32 : _txCreateTXIcon (32)));
<a name="l05594"></a>05594 $   SetClassLong_ (wnd, GCL_HICONSM_, (DWORD)(ptrdiff_t) (icon16? icon16 : _txCreateTXIcon (16)));
<a name="l05595"></a>05595 $   SetClassLong_ (wnd, GCL_HCURSOR_, (DWORD)(ptrdiff_t) (cursor? cursor : LoadCursor (NULL, IDC_ARROW)));
<a name="l05596"></a>05596 
<a name="l05597"></a>05597 $   HACCEL accel = LoadAccelerators (NULL, &quot;_TX_ACCELERATORS&quot;);
<a name="l05598"></a>05598 
<a name="l05599"></a>05599     _TX_ON_DEBUG (OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> &quot; - STARTED: &quot; <a class="code" href="a00032.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib, входит в диагностические сообщения.">_TX_MODULE</a> &quot;\n&quot;));
<a name="l05600"></a>05600 
<a name="l05601"></a>05601 $   _txRunning = true;
<a name="l05602"></a>05602 
<a name="l05603"></a>05603 $   ShowWindow          (wnd, SW_SHOW);
<a name="l05604"></a>05604 $   SetForegroundWindow (wnd);
<a name="l05605"></a>05605 $   UpdateWindow        (wnd);
<a name="l05606"></a>05606 
<a name="l05607"></a>05607 $   MSG msg = {0};
<a name="l05608"></a>05608 $   <span class="keywordflow">while</span> (GetMessage (&amp;msg, NULL, 0, 0))
<a name="l05609"></a>05609         {
<a name="l05610"></a>05610 $       <span class="keywordflow">if</span> (!msg.hwnd) <span class="keywordflow">continue</span>;
<a name="l05611"></a>05611 
<a name="l05612"></a>05612 $       <span class="keywordflow">if</span> (accel != NULL &amp;&amp; TranslateAccelerator (wnd, accel, &amp;msg)) <span class="keywordflow">continue</span>;
<a name="l05613"></a>05613 
<a name="l05614"></a>05614 $       TranslateMessage (&amp;msg);
<a name="l05615"></a>05615 $       DispatchMessage  (&amp;msg);
<a name="l05616"></a>05616 
<a name="l05617"></a>05617 $       Sleep (0);
<a name="l05618"></a>05618         }
<a name="l05619"></a>05619 
<a name="l05620"></a>05620 $   <span class="keywordflow">if</span> (icon16) DestroyIcon (icon16);  <span class="comment">// If Explorer is displaying Tray Notification, these</span>
<a name="l05621"></a>05621 $   <span class="keywordflow">if</span> (icon32) DestroyIcon (icon32);  <span class="comment">// calls will possibly fail, and we&#39;ll get resource leak.</span>
<a name="l05622"></a>05622 
<a name="l05623"></a>05623 $   LeaveCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l05624"></a>05624 
<a name="l05625"></a>05625 $   <span class="keywordflow">if</span> (_txRunning &amp;&amp; _txMain)         <span class="comment">// Main window is destroyed but main() is still running.</span>
<a name="l05626"></a>05626         {                              <span class="comment">// No chances for good termination, so use exit().</span>
<a name="l05627"></a>05627 $       exit ((<span class="keywordtype">int</span>) msg.wParam);
<a name="l05628"></a>05628         }
<a name="l05629"></a>05629 
<a name="l05630"></a>05630     _TX_ON_DEBUG (OutputDebugString (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> <span class="stringliteral">&quot; - STOPPED: &quot;</span> <a class="code" href="a00032.htm#ga43d277b4418068ebef1fd2bdbaf550f6" title="Имя модуля TXLib, входит в диагностические сообщения.">_TX_MODULE</a> <span class="stringliteral">&quot;\n&quot;</span>));
<a name="l05631"></a>05631 
<a name="l05632"></a>05632 $   _txCanvas_ThreadId = 0;
<a name="l05633"></a>05633 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l05634"></a>05634     }
<a name="l05635"></a>05635 
<a name="l05636"></a>05636 <span class="comment">//{</span>
<a name="l05637"></a>05637 <span class="preprocessor">#undef SetClassLong</span>
<a name="l05638"></a>05638 <span class="preprocessor"></span><span class="preprocessor">#undef GCL_HICON_</span>
<a name="l05639"></a>05639 <span class="preprocessor"></span><span class="preprocessor">#undef GCL_HICONSM_</span>
<a name="l05640"></a>05640 <span class="preprocessor"></span><span class="preprocessor">#undef GCL_HCURSOR_</span>
<a name="l05641"></a>05641 <span class="preprocessor"></span><span class="comment">//}</span>
<a name="l05642"></a>05642 
<a name="l05643"></a>05643 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05644"></a>05644 
<a name="l05645"></a>05645 HWND _txCanvas_CreateWindow (SIZE* size)
<a name="l05646"></a>05646     {
<a name="l05647"></a>05647 $1  _TX_IF_ARGUMENT_FAILED (size) return NULL;
<a name="l05648"></a>05648 
<a name="l05649"></a>05649 $   static <span class="keywordtype">char</span> className[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = &quot;&quot;;
<a name="l05650"></a>05650 $   _snprintf_s (className, sizeof (className) - 1 _TX_TRUNCATE,
<a name="l05651"></a>05651                  &quot;<span class="comment">/*---[TXLib]-------------------------- &quot;</span>
<a name="l05652"></a>05652 <span class="comment">                 _TX_VERSION &quot;  &quot; __FILE__ &quot;  WndClass %08X &quot;</span>
<a name="l05653"></a>05653 <span class="comment">                  &quot;--------------------------[TXLib]---*/</span>&quot;, (<span class="keywordtype">int</span>) GetTickCount());
<a name="l05654"></a>05654 
<a name="l05655"></a>05655 $   WNDCLASSEX wc    = { <span class="keyword">sizeof</span> (wc) };
<a name="l05656"></a>05656 $   wc.style         = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
<a name="l05657"></a>05657 $   wc.lpfnWndProc   = _txCanvas_WndProc;
<a name="l05658"></a>05658 $   wc.hCursor       = LoadCursor (NULL, IDC_ARROW);
<a name="l05659"></a>05659 $   wc.hbrBackground = (HBRUSH) Win32::GetStockObject (HOLLOW_BRUSH);
<a name="l05660"></a>05660 $   wc.lpszClassName = className;
<a name="l05661"></a>05661 
<a name="l05662"></a>05662 $   ATOM wndclass = RegisterClassEx (&amp;wc);
<a name="l05663"></a>05663 $   <span class="keywordflow">if</span> (!wndclass) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;RegisterClass (\&quot;%s\&quot;) failed&quot;</span> <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> className), (HWND) NULL;
<a name="l05664"></a>05664 
<a name="l05665"></a>05665 $   <span class="keywordtype">int</span> centered = <span class="keyword">false</span>;
<a name="l05666"></a>05666 $   <span class="keywordflow">if</span> (size-&gt;cx &lt; 0 &amp;&amp; size-&gt;cy &lt; 0) { size-&gt;cx *= -1; size-&gt;cy *= -1; centered = <span class="keyword">true</span>; }
<a name="l05667"></a>05667 
<a name="l05668"></a>05668 $   SIZE scr = { GetSystemMetrics (SM_CXSCREEN), GetSystemMetrics (SM_CYSCREEN) };
<a name="l05669"></a>05669 $   RECT r   = { 0, 0, size-&gt;cx, size-&gt;cy }; AdjustWindowRect (&amp;r, <a class="code" href="a00034.htm#ga5df0d089d6da4f25e603b4fe726f702d" title="Стиль графического окна библиотеки.">_txWindowStyle</a>, <span class="keyword">false</span>);
<a name="l05670"></a>05670 $   SIZE sz  = { r.right - r.left, r.bottom - r.top };
<a name="l05671"></a>05671 
<a name="l05672"></a>05672 $   HWND wnd = CreateWindowEx (WS_EX_APPWINDOW, className, <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keyword">false</span>), <a class="code" href="a00034.htm#ga5df0d089d6da4f25e603b4fe726f702d" title="Стиль графического окна библиотеки.">_txWindowStyle</a>,
<a name="l05673"></a>05673                                centered? scr.cx/2 - sz.cx/2 : CW_USEDEFAULT,
<a name="l05674"></a>05674                                centered? scr.cy/2 - sz.cy/2 : CW_USEDEFAULT,
<a name="l05675"></a>05675                                sz.cx, sz.cy, NULL, NULL, NULL, NULL);
<a name="l05676"></a>05676 
<a name="l05677"></a>05677 $   <span class="keywordflow">if</span> (!wnd || !<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create canvas: CreateWindowEx (\&quot;%s\&quot;) failed&quot;</span> <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> className), (HWND) NULL;
<a name="l05678"></a>05678 $   HMENU menu = GetSystemMenu (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), <span class="keyword">false</span>);
<a name="l05679"></a>05679 $   <span class="keywordflow">if</span> (!menu) <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l05680"></a>05680 
<a name="l05681"></a>05681 $   AppendMenu (menu, MF_SEPARATOR, 0, NULL)                       asserted;
<a name="l05682"></a>05682 $   AppendMenu (menu, MF_STRING, _TX_IDM_CONSOLE, &quot;Show &amp;Console&quot;) asserted;
<a name="l05683"></a>05683 $   AppendMenu (menu, MF_STRING, _TX_IDM_ABOUT,   &quot;&amp;About...&quot;)     asserted;
<a name="l05684"></a>05684 
<a name="l05685"></a>05685 $   HWND console = Win32::GetConsoleWindow();
<a name="l05686"></a>05686 
<a name="l05687"></a>05687 $   DWORD proc = 0;
<a name="l05688"></a>05688 $   GetWindowThreadProcessId (console, &amp;proc);
<a name="l05689"></a>05689 
<a name="l05690"></a>05690 $   if (console &amp;&amp; (proc == GetCurrentProcessId() || _txIsParentWaitable()))
<a name="l05691"></a>05691         { $ ShowWindow (console, <a class="code" href="a00034.htm#ga05631a37d79a52c0289b3dfa90215250" title="Режим отображения консольного окна. Допустимы любые флаги функции ShowWindow.">_txConsoleMode</a>); }
<a name="l05692"></a>05692 
<a name="l05693"></a>05693 $   CheckMenuItem (menu, _TX_IDM_CONSOLE, (console? (IsWindowVisible (console)? MF_CHECKED : 0) : MF_DISABLED));
<a name="l05694"></a>05694 
<a name="l05695"></a>05695 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l05696"></a>05696     }
<a name="l05697"></a>05697 
<a name="l05698"></a>05698 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05699"></a>05699 
<a name="l05700"></a>05700 <span class="keyword">inline</span> <span class="keywordtype">bool</span> _txCanvas_OK()
<a name="l05701"></a>05701     {
<a name="l05702"></a>05702 $1  <span class="keywordflow">return</span> _txCanvas_ThreadId   &amp;&amp;
<a name="l05703"></a>05703            _txCanvas_Window     &amp;&amp;
<a name="l05704"></a>05704            _txCanvas_BackBuf[0] &amp;&amp;
<a name="l05705"></a>05705            _txCanvas_BackBuf[1];
<a name="l05706"></a>05706     }
<a name="l05707"></a>05707 
<a name="l05708"></a>05708 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05709"></a>05709 
<a name="l05710"></a>05710 <span class="keywordtype">int</span> _txCanvas_SetRefreshLock (<span class="keywordtype">int</span> count)
<a name="l05711"></a>05711     {
<a name="l05712"></a>05712 $1  <span class="keywordtype">int</span> oldCount = _txCanvas_RefreshLock;
<a name="l05713"></a>05713 
<a name="l05714"></a>05714 $   _txCanvas_RefreshLock = count;
<a name="l05715"></a>05715 
<a name="l05716"></a>05716 $   HWND wnd = <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>();
<a name="l05717"></a>05717 
<a name="l05718"></a>05718 $   <span class="keywordflow">if</span> ((_txCanvas_RefreshLock &lt;= 0 || oldCount &lt;= 0) &amp;&amp; wnd)
<a name="l05719"></a>05719         { $ RedrawWindow (wnd, NULL, NULL, RDW_INVALIDATE | RDW_INTERNALPAINT | RDW_UPDATENOW); }
<a name="l05720"></a>05720 
<a name="l05721"></a>05721 $   <span class="keywordflow">return</span> oldCount;
<a name="l05722"></a>05722     }
<a name="l05723"></a>05723 
<a name="l05724"></a>05724 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05725"></a>05725 
<a name="l05726"></a>05726 HICON _txCreateTXIcon (<span class="keywordtype">int</span> size)
<a name="l05727"></a>05727     {
<a name="l05728"></a>05728 $1  _TX_IF_ARGUMENT_FAILED (size == 32 || size == 16) return NULL;
<a name="l05729"></a>05729 
<a name="l05730"></a>05730 $   const <span class="keywordtype">char</span> image32 [32*32+1] =
<a name="l05731"></a>05731         &quot;00000000000000000000000000000000&quot;&quot;0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0&quot;&quot;0F0000000000000000000000000000F0&quot;&quot;0F0000000000000000000000000000F0&quot;
<a name="l05732"></a>05732         &quot;0F0000000000000099999999999900F0&quot;&quot;0F0000000000000090300333330900F0&quot;&quot;0F0000000990000090000000000900F0&quot;&quot;0F00000099990000900BB000000900F0&quot;
<a name="l05733"></a>05733         &quot;0F0000039999000090B00090900900F0&quot;&quot;0F0000009999000090B00999990900F0&quot;&quot;0F00000009903799900BB090900900F0&quot;&quot;0F000000009BB70090000010000900F0&quot;
<a name="l05734"></a>05734         &quot;0F0000000B90000090000000000900F0&quot;&quot;0F000000B0B0000099999999999900F0&quot;&quot;0F00007B30B0000090000000000000F0&quot;&quot;0F00007300B0000090000000000000F0&quot;
<a name="l05735"></a>05735         &quot;0F00000000B3000090000000000000F0&quot;&quot;0F0000000B0B000090000000000000F0&quot;&quot;0F000000B303B00090000000000000F0&quot;&quot;0F000003B000B00090000000000000F0&quot;
<a name="l05736"></a>05736         &quot;0F00003B00003B0090000000000000F0&quot;&quot;0F0000300000030090000000000000F0&quot;&quot;0F0000000448888888888844000000F0&quot;&quot;0F00004886E6E6E60E66E6EEEE4400F0&quot;
<a name="l05737"></a>05737         &quot;0F4488866E0E60E00660E06E66EEE4F0&quot;&quot;0F868806E06E06E666E66E00E06EE6F0&quot;&quot;0F08606E66E0066000E006E66E00E6F0&quot;&quot;0F8666E006600E00006600E006E00EF0&quot;
<a name="l05738"></a>05738         &quot;0F000E066888888888888888606660F0&quot;&quot;0F66EEE6EE000E00000E00086EEEE6F0&quot;&quot;0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0&quot;&quot;00000000000000000000000000000000&quot;;
<a name="l05739"></a>05739 
<a name="l05740"></a>05740 $   const <span class="keywordtype">char</span> image16 [16*16+1] =
<a name="l05741"></a>05741         &quot;0000000000000000&quot;&quot;0000000999999990&quot;&quot;0009000900000090&quot;&quot;0099900909973090&quot;&quot;0059700909009390&quot;&quot;0009799909973090&quot;&quot;0099000900000090&quot;&quot;0959330999999990&quot;
<a name="l05742"></a>05742         &quot;0709500900000000&quot;&quot;0095930900000000&quot;&quot;0090393900000000&quot;&quot;0790073900000000&quot;&quot;0900000900000000&quot;&quot;000EE6E6E6E6E000&quot;&quot;0EE6E6E6E6E6EEE0&quot;&quot;0000000000000000&quot;;
<a name="l05743"></a>05743 
<a name="l05744"></a>05744 $   const COLORREF pal[&#39;F&#39;-&#39;0&#39;+1] = { 0x000000, 0x002b2b, 0x555500, 0x005555, 0x808000, 0x008080, 0xaaaa00, 0x00aaaa, 0xd5d500, 0x00d5d5, 0,0,0,0,0,0,0,
<a name="l05745"></a>05745                                       0xffff00, 0x00ffff, 0xffffaa, 0xaaffff, 0xd5d500, 0xffffff };
<a name="l05746"></a>05746 
<a name="l05747"></a>05747 $   <span class="keyword">const</span> <span class="keywordtype">char</span>* image = (size == 32)? image32 : image16;
<a name="l05748"></a>05748 
<a name="l05749"></a>05749 $   POINT sz = { size, size };
<a name="l05750"></a>05750 $   HDC dcMask  = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;sz); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (dcMask);
<a name="l05751"></a>05751 $   HDC dcColor = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;sz); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (dcColor);
<a name="l05752"></a>05752 
<a name="l05753"></a>05753 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size*size; i++)
<a name="l05754"></a>05754         {
<a name="l05755"></a>05755         <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (<a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (image[i], <span class="charliteral">&#39;0&#39;</span>, <span class="charliteral">&#39;9&#39;</span>) || <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (image[i], <span class="charliteral">&#39;A&#39;</span>, <span class="charliteral">&#39;F&#39;</span>));
<a name="l05756"></a>05756 
<a name="l05757"></a>05757         Win32::SetPixel (dcColor, i % size, i / size, pal [image[i] - <span class="charliteral">&#39;0&#39;</span>]);
<a name="l05758"></a>05758         }
<a name="l05759"></a>05759 
<a name="l05760"></a>05760 $   ICONINFO info = { <span class="keyword">true</span>, 0, 0, (HBITMAP) Win32::GetCurrentObject (dcMask,  OBJ_BITMAP),
<a name="l05761"></a>05761                                   (HBITMAP) Win32::GetCurrentObject (dcColor, OBJ_BITMAP) };
<a name="l05762"></a>05762 
<a name="l05763"></a>05763 $   HICON icon = CreateIconIndirect (&amp;info);
<a name="l05764"></a>05764 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (icon);
<a name="l05765"></a>05765 
<a name="l05766"></a>05766 $   _txBuffer_Delete (&amp;dcMask)  asserted;
<a name="l05767"></a>05767 $   _txBuffer_Delete (&amp;dcColor) asserted;
<a name="l05768"></a>05768 
<a name="l05769"></a>05769 $   return icon;
<a name="l05770"></a>05770     }
<a name="l05771"></a>05771 
<a name="l05773"></a>05773 <span class="comment">//}</span>
<a name="l05774"></a>05774 <span class="comment">//=================================================================================================================</span>
<a name="l05775"></a>05775 
<a name="l05776"></a>05776 <span class="comment">//=================================================================================================================</span>
<a name="l05777"></a>05777 <span class="comment">//{          [Internal] Main window event handlers (_txCanvas_On...)</span>
<a name="l05779"></a>05779 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l05781"></a>05781 <span class="comment"></span>
<a name="l05782"></a>05782 LRESULT CALLBACK _txCanvas_WndProc (HWND wnd, UINT msg, WPARAM wpar, LPARAM lpar)
<a name="l05783"></a>05783     {
<a name="l05784"></a>05784 <span class="preprocessor">#ifdef _TX_ALLOW_TRACE</span>
<a name="l05785"></a>05785 <span class="preprocessor"></span>
<a name="l05786"></a>05786     _txInTX++;
<a name="l05787"></a>05787 
<a name="l05788"></a>05788     <span class="keywordflow">if</span> (_txAllowTrace) _txTrace (__FILE__, __LINE__, <a class="code" href="a00032.htm#gab170f39ac0e379c324c73495f14a1309" title="Имя текущей функции">__TX_FUNCTION__</a>,
<a name="l05789"></a>05789                                 <span class="stringliteral">&quot;%*s&quot;</span> <span class="stringliteral">&quot;0x%X &lt;- 0x%03X (0x%08X, 0x%08lX)&quot;</span>, 12 - _txInTX*2, <span class="stringliteral">&quot;&quot;</span>, wnd, msg, wpar, lpar);
<a name="l05790"></a>05790     _txInTX--;
<a name="l05791"></a>05791 
<a name="l05792"></a>05792 <span class="preprocessor">#endif</span>
<a name="l05793"></a>05793 <span class="preprocessor"></span>
<a name="l05794"></a>05794 $1  <span class="keywordflow">if</span> (msg == WM_KEYDOWN &amp;&amp; wpar == VK_F12 &amp;&amp;
<a name="l05795"></a>05795         GetKeyState (VK_SHIFT) &amp;&amp; GetKeyState (VK_CONTROL) &amp;&amp; GetKeyState (VK_MENU))
<a name="l05796"></a>05796         {
<a name="l05797"></a>05797 $       _txCanvas_OnCmdABOUT (wnd,      wpar);
<a name="l05798"></a>05798 $       <span class="keywordflow">return</span> DefWindowProc (wnd, msg, wpar, lpar);
<a name="l05799"></a>05799         }
<a name="l05800"></a>05800 
<a name="l05801"></a>05801     WNDPROC altWndProc = _txAltWndProc;  <span class="comment">// Cache to prevent change from main thread</span>
<a name="l05802"></a>05802     <span class="keywordflow">if</span> (altWndProc)
<a name="l05803"></a>05803         {
<a name="l05804"></a>05804 $       LRESULT res = altWndProc (wnd, msg, wpar, lpar);
<a name="l05805"></a>05805 $       <span class="keywordflow">if</span> (res) <span class="keywordflow">return</span> res;
<a name="l05806"></a>05806         }
<a name="l05807"></a>05807 
<a name="l05808"></a>05808     <span class="keywordflow">switch</span> (msg)
<a name="l05809"></a>05809         {
<a name="l05810"></a>05810         <span class="keywordflow">case</span> WM_CREATE:       $     _txCanvas_OnCREATE     (wnd);             <span class="keywordflow">return</span> 0;
<a name="l05811"></a>05811 
<a name="l05812"></a>05812         <span class="keywordflow">case</span> WM_CLOSE:        $ <span class="keywordflow">if</span> (_txCanvas_OnCLOSE      (wnd)) <span class="keywordflow">break</span>; <span class="keywordflow">else</span> <span class="keywordflow">return</span> 0;
<a name="l05813"></a>05813         <span class="keywordflow">case</span> WM_DESTROY:      $     _txCanvas_OnDESTROY    (wnd);             <span class="keywordflow">return</span> 0;
<a name="l05814"></a>05814 
<a name="l05815"></a>05815         <span class="keywordflow">case</span> WM_PAINT:        $     _txCanvas_OnPAINT      (wnd);             <span class="keywordflow">return</span> 0;
<a name="l05816"></a>05816         <span class="keywordflow">case</span> WM_TIMER:        $     _txCanvas_OnTIMER      (wnd, wpar);       <span class="keywordflow">return</span> 0;
<a name="l05817"></a>05817 
<a name="l05818"></a>05818         <span class="keywordflow">case</span> WM_KEYDOWN:      $     _txCanvas_OnKEYDOWN    (wnd, wpar, lpar); <span class="keywordflow">return</span> 0;
<a name="l05819"></a>05819         <span class="keywordflow">case</span> WM_CHAR:         $     _txCanvas_OnCHAR       (wnd, wpar, lpar); <span class="keywordflow">return</span> 0;
<a name="l05820"></a>05820 
<a name="l05821"></a>05821         <span class="keywordflow">case</span> WM_LBUTTONUP:
<a name="l05822"></a>05822         <span class="keywordflow">case</span> WM_LBUTTONDOWN:
<a name="l05823"></a>05823         <span class="keywordflow">case</span> WM_RBUTTONUP:
<a name="l05824"></a>05824         <span class="keywordflow">case</span> WM_RBUTTONDOWN:
<a name="l05825"></a>05825         <span class="keywordflow">case</span> WM_MBUTTONUP:
<a name="l05826"></a>05826         <span class="keywordflow">case</span> WM_MBUTTONDOWN:
<a name="l05827"></a>05827         <span class="keywordflow">case</span> WM_MOUSEMOVE:    $     _txCanvas_OnMOUSEMOVE  (wnd, wpar, lpar); <span class="keywordflow">return</span> 0;
<a name="l05828"></a>05828 
<a name="l05829"></a>05829         <span class="keywordflow">default</span>: <span class="keywordflow">break</span>;
<a name="l05830"></a>05830         }
<a name="l05831"></a>05831 
<a name="l05832"></a>05832     <span class="keywordflow">if</span> (msg == WM_SYSCOMMAND) <span class="keywordflow">switch</span> (wpar)
<a name="l05833"></a>05833         {
<a name="l05834"></a>05834         <span class="keywordflow">case</span> _TX_IDM_ABOUT:   $     _txCanvas_OnCmdABOUT   (wnd, wpar);       <span class="keywordflow">return</span> 0;
<a name="l05835"></a>05835         <span class="keywordflow">case</span> _TX_IDM_CONSOLE: $     _txCanvas_OnCmdCONSOLE (wnd, wpar);       <span class="keywordflow">return</span> 0;
<a name="l05836"></a>05836 
<a name="l05837"></a>05837         <span class="keywordflow">default</span>: <span class="keywordflow">break</span>;
<a name="l05838"></a>05838         }
<a name="l05839"></a>05839 
<a name="l05840"></a>05840 $   <span class="keywordflow">return</span> DefWindowProc (wnd, msg, wpar, lpar);
<a name="l05841"></a>05841     }
<a name="l05842"></a>05842 
<a name="l05843"></a>05843 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05844"></a>05844 
<a name="l05845"></a>05845 <span class="keywordtype">bool</span> _txCanvas_OnCREATE (HWND wnd)
<a name="l05846"></a>05846     {
<a name="l05847"></a>05847 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l05848"></a>05848 
<a name="l05849"></a>05849 $   _txCanvas_BackBuf[0] = _txBuffer_Create (wnd); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (_txCanvas_BackBuf[0]);
<a name="l05850"></a>05850 $   _txCanvas_BackBuf[1] = _txBuffer_Create (wnd); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (_txCanvas_BackBuf[1]);
<a name="l05851"></a>05851 
<a name="l05852"></a>05852 $   SetTimer (wnd, _txCanvas_RefreshTimer, <a class="code" href="a00034.htm#ga04cf6a2f12ea617b5a29ce939f673085" title="Интервал обновления холста (мс)">_txWindowUpdateInterval</a>, NULL) asserted;
<a name="l05853"></a>05853 
<a name="l05854"></a>05854 $   _txCanvas_Window = wnd;
<a name="l05855"></a>05855 
<a name="l05856"></a>05856 $   <a class="code" href="a00029.htm#gae05b7bb52b782b86796201f9f96d0f58" title="Установка параметров рисования по умолчанию.">txSetDefaults</a>();
<a name="l05857"></a>05857 
<a name="l05858"></a>05858 $   return true;
<a name="l05859"></a>05859     }
<a name="l05860"></a>05860 
<a name="l05861"></a>05861 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05862"></a>05862 
<a name="l05863"></a>05863 <span class="keywordtype">bool</span> _txCanvas_OnDESTROY (HWND wnd)
<a name="l05864"></a>05864     {
<a name="l05865"></a>05865 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l05866"></a>05866 
<a name="l05867"></a>05867     <span class="comment">// Инициируем остановку цикла сообщений</span>
<a name="l05868"></a>05868 
<a name="l05869"></a>05869 $   PostQuitMessage (_txRunning? WM_DESTROY : EXIT_SUCCESS);
<a name="l05870"></a>05870 
<a name="l05871"></a>05871 $   if (!_txCanvas_Window) return false;
<a name="l05872"></a>05872 
<a name="l05873"></a>05873     <span class="comment">// Indicate that we are about to manually terminate</span>
<a name="l05874"></a>05874 
<a name="l05875"></a>05875 $   _txExit = true;
<a name="l05876"></a>05876 
<a name="l05877"></a>05877     <span class="comment">// Lock GDI resources</span>
<a name="l05878"></a>05878 
<a name="l05879"></a>05879 $   <span class="keywordtype">bool</span> locked = false;
<a name="l05880"></a>05880 $   _txWaitFor ((locked = <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (false), locked), <a class="code" href="a00034.htm#ga7859e95fc4faec435abe372989f4f8ac" title="Таймаут операций ожидания (мс)">_TX_TIMEOUT</a>);
<a name="l05881"></a>05881 $   if (!locked) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (&quot;Cannot lock GDI to free resources&quot;);
<a name="l05882"></a>05882 
<a name="l05883"></a>05883     <span class="comment">// Освобождаем пользовательские ресурсы</span>
<a name="l05884"></a>05884 
<a name="l05885"></a>05885 $   if (_txCanvas_UserDCs &amp;&amp; _txCanvas_UserDCs-&gt;size())
<a name="l05886"></a>05886         {
<a name="l05887"></a>05887 $       <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_ERROR, NULL, <span class="stringliteral">&quot;Вы забыли освободить %d HDC.&quot;</span>, (<span class="keywordtype">int</span>) _txCanvas_UserDCs-&gt;size());
<a name="l05888"></a>05888 $       Sleep (_TX_TIMEOUT);
<a name="l05889"></a>05889 
<a name="l05890"></a>05890 $       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; _txCanvas_UserDCs-&gt;size(); i++) _txBuffer_Delete (&amp;_txCanvas_UserDCs-&gt;at (i));
<a name="l05891"></a>05891 $       _txCanvas_UserDCs-&gt;clear();
<a name="l05892"></a>05892         }
<a name="l05893"></a>05893 
<a name="l05894"></a>05894     <span class="comment">// Освобождаем ресурсы, связанные с окном</span>
<a name="l05895"></a>05895 
<a name="l05896"></a>05896 $   <span class="keywordflow">if</span> (_txCanvas_RefreshTimer) KillTimer (wnd, _txCanvas_RefreshTimer) asserted;
<a name="l05897"></a>05897 
<a name="l05898"></a>05898 $   if (_txCanvas_BackBuf[1]) _txBuffer_Delete (&amp;_txCanvas_BackBuf[1])  asserted;
<a name="l05899"></a>05899 $   if (_txCanvas_BackBuf[0]) _txBuffer_Delete (&amp;_txCanvas_BackBuf[0])  asserted;
<a name="l05900"></a>05900 
<a name="l05901"></a>05901 $   <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l05902"></a>05902 
<a name="l05903"></a>05903     <span class="comment">// Indicate that we are destroyed</span>
<a name="l05904"></a>05904 
<a name="l05905"></a>05905 $   _txCanvas_Window = NULL;
<a name="l05906"></a>05906 
<a name="l05907"></a>05907 $   return true;
<a name="l05908"></a>05908     }
<a name="l05909"></a>05909 
<a name="l05910"></a>05910 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05911"></a>05911 
<a name="l05912"></a>05912 <span class="keywordtype">bool</span> _txCanvas_OnCLOSE (HWND wnd)
<a name="l05913"></a>05913     {
<a name="l05914"></a>05914 $1  _TX_IF_ARGUMENT_FAILED (wnd &amp;&amp; _txCanvas_OK()) return false;
<a name="l05915"></a>05915 
<a name="l05916"></a>05916 $   if (_txMain &amp;&amp; _txRunning &amp;&amp;
<a name="l05917"></a>05917         <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (&quot;Функция main() не завершена. Программа все еще работает. Прервать аварийно?    \n\n&quot;
<a name="l05918"></a>05918                       &quot;Лучше подождать, когда main() завершится - это отображается в заголовке окна.&quot;,
<a name="l05919"></a>05919                       <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (false), MB_OKCANCEL | MB_ICONSTOP) != IDOK) return false;
<a name="l05920"></a>05920 $   return true;
<a name="l05921"></a>05921     }
<a name="l05922"></a>05922 
<a name="l05923"></a>05923 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05924"></a>05924 
<a name="l05925"></a>05925 <span class="keywordtype">bool</span> _txCanvas_OnTIMER (HWND wnd, WPARAM)
<a name="l05926"></a>05926     {
<a name="l05927"></a>05927 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l05928"></a>05928 
<a name="l05929"></a>05929 $   if (_txCanvas_RefreshLock &gt; 0 || !_txRunning) return false;
<a name="l05930"></a>05930 
<a name="l05931"></a>05931 $   InvalidateRect (wnd, NULL, false) asserted;
<a name="l05932"></a>05932 $   UpdateWindow   (wnd)              asserted;
<a name="l05933"></a>05933 
<a name="l05934"></a>05934 $   return true;
<a name="l05935"></a>05935     }
<a name="l05936"></a>05936 
<a name="l05937"></a>05937 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05938"></a>05938 
<a name="l05939"></a>05939 <span class="keywordtype">bool</span> _txCanvas_OnPAINT (HWND wnd)
<a name="l05940"></a>05940     {
<a name="l05941"></a>05941 $1  _TX_IF_ARGUMENT_FAILED (wnd &amp;&amp; _txCanvas_OK()) return false;
<a name="l05942"></a>05942 
<a name="l05943"></a>05943 $   <span class="keywordtype">bool</span> forceRedraw   = GetAsyncKeyState (VK_MENU)  &amp;&amp; GetAsyncKeyState (VK_CONTROL) &amp;&amp;
<a name="l05944"></a>05944                          GetAsyncKeyState (VK_SHIFT) &amp;&amp; GetAsyncKeyState (VK_SNAPSHOT);
<a name="l05945"></a>05945 
<a name="l05946"></a>05946 $   PAINTSTRUCT ps = {0};
<a name="l05947"></a>05947 $   HDC dc = BeginPaint (wnd, &amp;ps);
<a name="l05948"></a>05948 $   <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05949"></a>05949 
<a name="l05950"></a>05950 $   RECT r = {0};
<a name="l05951"></a>05951 $   GetClientRect (wnd, &amp;r) asserted;
<a name="l05952"></a>05952 $   POINT size = { r.right - r.left, r.bottom - r.top };
<a name="l05953"></a>05953 
<a name="l05954"></a>05954 $   <span class="keywordflow">if</span> ((_txCanvas_RefreshLock &lt;= 0 || forceRedraw) &amp;&amp;
<a name="l05955"></a>05955         <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keyword">false</span>))
<a name="l05956"></a>05956         {
<a name="l05957"></a>05957 $       Win32::BitBlt (_txCanvas_BackBuf[1], 0, 0, size.x, size.y, txDC(), 0, 0, SRCCOPY);
<a name="l05958"></a>05958 
<a name="l05959"></a>05959 $       _txConsole_Draw (_txCanvas_BackBuf[1]);
<a name="l05960"></a>05960 
<a name="l05961"></a>05961 $       <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l05962"></a>05962         }
<a name="l05963"></a>05963 
<a name="l05964"></a>05964     <span class="comment">// Magic 100500 value is used to completely block screen refresh.</span>
<a name="l05965"></a>05965     <span class="comment">// Since no value can be 100500 or above, this condition is always true and the refresh cannot be blocked IRL.</span>
<a name="l05966"></a>05966     <span class="comment">// Do not use 100501 because it may lead to errors on some compilers and possible may crash the compilers</span>
<a name="l05967"></a>05967     <span class="comment">// themselves.</span>
<a name="l05968"></a>05968     <span class="comment">// Yes guys, with all your software installed. :(</span>
<a name="l05969"></a>05969 
<a name="l05970"></a>05970 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock != 100500)
<a name="l05971"></a>05971         { $ Win32::BitBlt (dc, 0, 0, size.x, size.y, _txCanvas_BackBuf[1], 0, 0, SRCCOPY); }
<a name="l05972"></a>05972 
<a name="l05973"></a>05973 $   EndPaint (wnd, &amp;ps) asserted;
<a name="l05974"></a>05974 
<a name="l05975"></a>05975 $   return true;
<a name="l05976"></a>05976     }
<a name="l05977"></a>05977 
<a name="l05978"></a>05978 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l05979"></a>05979 
<a name="l05980"></a>05980 <span class="keywordtype">bool</span> _txCanvas_OnKEYDOWN (HWND, WPARAM vk, LPARAM info)
<a name="l05981"></a>05981     {
<a name="l05982"></a>05982 $1  INPUT_RECORD evt = {0};
<a name="l05983"></a>05983 
<a name="l05984"></a>05984 $   evt.EventType                        = KEY_EVENT;
<a name="l05985"></a>05985 $   evt.Event.KeyEvent.bKeyDown          = <span class="keyword">true</span>;
<a name="l05986"></a>05986 $   evt.Event.KeyEvent.wRepeatCount      = 1;
<a name="l05987"></a>05987 $   evt.Event.KeyEvent.uChar.AsciiChar   = (<span class="keywordtype">unsigned</span> char) MapVirtualKey ((WORD) vk, 2);   <span class="comment">// 2 == MAPVK_VK_TO_CHAR</span>
<a name="l05988"></a>05988 $   evt.Event.KeyEvent.wVirtualScanCode  = (<span class="keywordtype">unsigned</span> char) (info &gt;&gt; 16);
<a name="l05989"></a>05989 $   evt.Event.KeyEvent.wVirtualKeyCode   = (WORD) vk;
<a name="l05990"></a>05990 $   evt.Event.KeyEvent.dwControlKeyState = (info &amp; (1 &lt;&lt; 24))? ENHANCED_KEY : 0;
<a name="l05991"></a>05991 
<a name="l05992"></a>05992 $   <span class="keywordflow">if</span> (evt.Event.KeyEvent.uChar.AsciiChar) <span class="keywordflow">return</span> <span class="keyword">false</span>;  <span class="comment">// Let TranslateMessage() and WM_CHAR do the job</span>
<a name="l05993"></a>05993 
<a name="l05994"></a>05994 $   DWORD written = 0;
<a name="l05995"></a>05995 $   WriteConsoleInput (GetStdHandle (STD_INPUT_HANDLE), &amp;evt, 1, &amp;written);
<a name="l05996"></a>05996 
<a name="l05997"></a>05997 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l05998"></a>05998     }
<a name="l05999"></a>05999 
<a name="l06000"></a>06000 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06001"></a>06001 
<a name="l06002"></a>06002 <span class="keywordtype">bool</span> _txCanvas_OnCHAR (HWND, WPARAM ch, LPARAM info)
<a name="l06003"></a>06003     {
<a name="l06004"></a>06004 $1  INPUT_RECORD evt = {0};
<a name="l06005"></a>06005 
<a name="l06006"></a>06006 $   evt.EventType                        = KEY_EVENT;
<a name="l06007"></a>06007 $   evt.Event.KeyEvent.bKeyDown          = <span class="keyword">true</span>;
<a name="l06008"></a>06008 $   evt.Event.KeyEvent.wRepeatCount      = 1;
<a name="l06009"></a>06009 $   evt.Event.KeyEvent.uChar.AsciiChar   = (<span class="keywordtype">unsigned</span> char) (ch);
<a name="l06010"></a>06010 $   evt.Event.KeyEvent.wVirtualScanCode  = (<span class="keywordtype">unsigned</span> char) (info &gt;&gt; 16);
<a name="l06011"></a>06011 $   evt.Event.KeyEvent.wVirtualKeyCode   = (WORD) MapVirtualKey ((WORD) (info &gt;&gt; 16), 3);  <span class="comment">// 3 == MAPVK_VSC_TO_VK_EX</span>
<a name="l06012"></a>06012 $   evt.Event.KeyEvent.dwControlKeyState = 0;
<a name="l06013"></a>06013 
<a name="l06014"></a>06014 $   DWORD written = 0;
<a name="l06015"></a>06015 $   WriteConsoleInput (GetStdHandle (STD_INPUT_HANDLE), &amp;evt, 1, &amp;written);
<a name="l06016"></a>06016 
<a name="l06017"></a>06017 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l06018"></a>06018     }
<a name="l06019"></a>06019 
<a name="l06020"></a>06020 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06021"></a>06021 
<a name="l06022"></a>06022 <span class="keywordtype">bool</span> _txCanvas_OnMOUSEMOVE (HWND, WPARAM buttons, LPARAM coords)
<a name="l06023"></a>06023     {
<a name="l06024"></a>06024 $1  _TX_IF_ARGUMENT_FAILED (_txCanvas_OK()) return false;
<a name="l06025"></a>06025 
<a name="l06026"></a>06026 $   _txMousePos.x   = LOWORD (coords);
<a name="l06027"></a>06027 $   _txMousePos.y   = HIWORD (coords);
<a name="l06028"></a>06028 $   _txMouseButtons = (<span class="keywordtype">int</span>) buttons;
<a name="l06029"></a>06029 
<a name="l06030"></a>06030 $   return true;
<a name="l06031"></a>06031     }
<a name="l06032"></a>06032 
<a name="l06033"></a>06033 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06034"></a>06034 
<a name="l06035"></a>06035 <span class="keywordtype">bool</span> _txCanvas_OnCmdCONSOLE (HWND wnd, WPARAM cmd)
<a name="l06036"></a>06036     {
<a name="l06037"></a>06037 $1  _TX_IF_ARGUMENT_FAILED (wnd) return false;
<a name="l06038"></a>06038 
<a name="l06039"></a>06039 $   HWND console = Win32::GetConsoleWindow();
<a name="l06040"></a>06040 $   if (!console) return false;
<a name="l06041"></a>06041 
<a name="l06042"></a>06042 $   <span class="keywordtype">bool</span> visible = !!IsWindowVisible (console);
<a name="l06043"></a>06043 
<a name="l06044"></a>06044 $   ShowWindow (console, visible? SW_HIDE : SW_SHOW);
<a name="l06045"></a>06045 
<a name="l06046"></a>06046 $   visible = !!IsWindowVisible (console);
<a name="l06047"></a>06047 $   CheckMenuItem (GetSystemMenu (wnd, false), (<span class="keywordtype">int</span>) cmd, visible? MF_CHECKED : MF_UNCHECKED);
<a name="l06048"></a>06048 
<a name="l06049"></a>06049 $   return true;
<a name="l06050"></a>06050     }
<a name="l06051"></a>06051 
<a name="l06052"></a>06052 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06053"></a>06053 
<a name="l06054"></a>06054 <span class="keywordtype">bool</span> _txCanvas_OnCmdABOUT (HWND, WPARAM)
<a name="l06055"></a>06055     {
<a name="l06056"></a>06056 $1  <span class="comment">//{ Overriding the missing names, if the set is uncomplete</span>
<a name="l06057"></a>06057 
<a name="l06058"></a>06058 <span class="preprocessor">    #if defined (__MODULE)</span>
<a name="l06059"></a>06059 <span class="preprocessor"></span><span class="preprocessor">        #define ABOUT_NAME_    __MODULE</span>
<a name="l06060"></a>06060 <span class="preprocessor"></span><span class="preprocessor">    #else</span>
<a name="l06061"></a>06061 <span class="preprocessor"></span><span class="preprocessor">        #define ABOUT_NAME_    &quot;TXLib&quot;</span>
<a name="l06062"></a>06062 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l06063"></a>06063 <span class="preprocessor"></span>
<a name="l06064"></a>06064 <span class="preprocessor">    #if defined (__MODULE) || defined (__VERSION) || defined (__DESCRIPTION) || defined (__AUTHOR)</span>
<a name="l06065"></a>06065 <span class="preprocessor"></span>
<a name="l06066"></a>06066 <span class="preprocessor">        #ifndef __MODULE</span>
<a name="l06067"></a>06067 <span class="preprocessor"></span><span class="preprocessor">        #define __MODULE       &quot;TXLib&quot;                           &quot;\n&quot;  &quot;#define __MODULE to set the name.\n&quot;</span>
<a name="l06068"></a>06068 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l06069"></a>06069 <span class="preprocessor"></span>
<a name="l06070"></a>06070 <span class="preprocessor">        #ifndef __VERSION</span>
<a name="l06071"></a>06071 <span class="preprocessor"></span><span class="preprocessor">        #define __VERSION      &quot;(0.000000000).&quot;                  &quot;\n&quot; &quot;#define __VERSION to set the string value.\n&quot;</span>
<a name="l06072"></a>06072 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l06073"></a>06073 <span class="preprocessor"></span>
<a name="l06074"></a>06074 <span class="preprocessor">        #ifndef __DESCRIPTION</span>
<a name="l06075"></a>06075 <span class="preprocessor"></span><span class="preprocessor">        #define __DESCRIPTION  &quot;(Да, мне лень задать описание).&quot; &quot;\n&quot; &quot;#define __DESCRIPTION to override project role.\n&quot;</span>
<a name="l06076"></a>06076 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l06077"></a>06077 <span class="preprocessor"></span>
<a name="l06078"></a>06078 <span class="preprocessor">        #ifndef __AUTHOR</span>
<a name="l06079"></a>06079 <span class="preprocessor"></span><span class="preprocessor">        #define __AUTHOR       &quot;(Непонятно кто).&quot;                &quot;\n&quot; &quot;#define __AUTHOR to override this name.&quot;</span>
<a name="l06080"></a>06080 <span class="preprocessor"></span><span class="preprocessor">        #endif</span>
<a name="l06081"></a>06081 <span class="preprocessor"></span>
<a name="l06082"></a>06082 <span class="preprocessor">    #endif</span>
<a name="l06083"></a>06083 <span class="preprocessor"></span>    <span class="comment">//}</span>
<a name="l06084"></a>06084 
<a name="l06085"></a>06085 $   time_t timeT     = time (NULL) - clock()/CLOCKS_PER_SEC;
<a name="l06086"></a>06086 $   <span class="keywordtype">char</span>   timeS[32] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06087"></a>06087 $   ctime_s (timeS, <span class="keyword">sizeof</span> (timeS), &amp;timeT);
<a name="l06088"></a>06088 
<a name="l06089"></a>06089 $   <span class="keyword">static</span> <span class="keywordtype">char</span> text[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06090"></a>06090 $   <span class="keywordtype">char</span> cwd [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06091"></a>06091 
<a name="l06092"></a>06092 $   _snprintf_s (text, <span class="keyword">sizeof</span> (text) - 1 _TX_TRUNCATE,
<a name="l06093"></a>06093 
<a name="l06094"></a>06094                  <span class="stringliteral">&quot;Application:\n&quot;</span>
<a name="l06095"></a>06095 
<a name="l06096"></a>06096                  #<span class="keywordflow">if</span> defined (__MODULE) || defined (__VERSION) || defined (__DESCRIPTION) || defined (__AUTHOR)
<a name="l06097"></a>06097                      __MODULE <span class="stringliteral">&quot; version &quot;</span> __VERSION <span class="stringliteral">&quot;\n&quot;</span> __DESCRIPTION <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Copyright (c) &quot;</span> __AUTHOR <span class="stringliteral">&quot;\n&quot;</span>
<a name="l06098"></a>06098                  #<span class="keywordflow">else</span>
<a name="l06099"></a>06099                      <span class="stringliteral">&quot;Здесь могла бы быть Ваша реклама :)\n&quot;</span>
<a name="l06100"></a>06100                      <span class="stringliteral">&quot;#define __MODULE to \&quot;your program name\&quot; before including TXLib.h to use this billboard...\n&quot;</span>
<a name="l06101"></a>06101                  #endif
<a name="l06102"></a>06102 
<a name="l06103"></a>06103                  <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Developed with:\n\n&quot;</span>
<a name="l06104"></a>06104                  <span class="stringliteral">&quot;The Dumb Artist Library (TX Library) - &quot;</span> <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> <span class="stringliteral">&quot;\n&quot;</span> _TX_AUTHOR <span class="stringliteral">&quot;\n&quot;</span>
<a name="l06105"></a>06105                  <span class="stringliteral">&quot;See license on: http://txlib.ru\n\n&quot;</span>
<a name="l06106"></a>06106 
<a name="l06107"></a>06107                  <span class="stringliteral">&quot;TXLib file:&quot;</span> <span class="stringliteral">&quot;\t&quot;</span> __FILE__ <span class="stringliteral">&quot;\n&quot;</span>
<a name="l06108"></a>06108                  <span class="stringliteral">&quot;Compiled:&quot;</span>   <span class="stringliteral">&quot;\t&quot;</span> __DATE__ <span class="stringliteral">&quot; &quot;</span> __TIME__ <span class="stringliteral">&quot;, &quot;</span> <a class="code" href="a00032.htm#ga3e287c38947fea870d01588fbd2a5fc9" title="Имя режима сборки">_TX_BUILDMODE</a> <span class="stringliteral">&quot;, &quot;</span> <a class="code" href="a00032.htm#gadd1c9ccd036228402b807abaea14f7ee" title="Имя и версия текущего компилятора">__TX_COMPILER__</a> <span class="stringliteral">&quot;\n&quot;</span>
<a name="l06109"></a>06109                  <span class="stringliteral">&quot;Started:&quot;</span>    <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%.6s %.4s %.8s\n\n&quot;</span>
<a name="l06110"></a>06110 
<a name="l06111"></a>06111                  <span class="stringliteral">&quot;Run file:&quot;</span>   <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%s\n&quot;</span>
<a name="l06112"></a>06112                  <span class="stringliteral">&quot;Directory:&quot;</span>  <span class="stringliteral">&quot;\t&quot;</span> <span class="stringliteral">&quot;%s&quot;</span>,
<a name="l06113"></a>06113 
<a name="l06114"></a>06114                  timeS + 4, timeS + 20, timeS + 11,  <span class="comment">// These offsets are ANSI standardized</span>
<a name="l06115"></a>06115                  <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a>(),
<a name="l06116"></a>06116                  _getcwd (cwd, <span class="keyword">sizeof</span> (cwd) - 1));
<a name="l06117"></a>06117 
<a name="l06118"></a>06118 $   <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (text, <span class="stringliteral">&quot;About &quot;</span> ABOUT_NAME_, MB_ICONINFORMATION);
<a name="l06119"></a>06119 
<a name="l06120"></a>06120     <span class="comment">// And a bit of HTTP-code in C++ function:</span>
<a name="l06121"></a>06121 
<a name="l06122"></a>06122     <span class="keywordflow">goto</span> http;
<a name="l06123"></a>06123     http:<span class="comment">//txlib.ru                                  // See valuable refs here :)</span>
<a name="l06124"></a>06124 
<a name="l06125"></a>06125 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l06126"></a>06126 
<a name="l06127"></a>06127 <span class="preprocessor">    #undef ABOUT_NAME_</span>
<a name="l06128"></a>06128 <span class="preprocessor"></span>    }
<a name="l06129"></a>06129 
<a name="l06131"></a>06131 <span class="comment">//}</span>
<a name="l06132"></a>06132 <span class="comment">//=================================================================================================================</span>
<a name="l06133"></a>06133 
<a name="l06134"></a>06134 <span class="comment">//=================================================================================================================</span>
<a name="l06135"></a>06135 <span class="comment">//{          [Internal] Console-support functions  (_txConsole...)</span>
<a name="l06137"></a>06137 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l06139"></a>06139 <span class="comment"></span>
<a name="l06140"></a>06140 HWND _txConsole_Attach()
<a name="l06141"></a>06141     {
<a name="l06142"></a>06142 $1  HWND console = Win32::GetConsoleWindow();
<a name="l06143"></a>06143 
<a name="l06144"></a>06144 $   <span class="keywordflow">if</span> (!console)
<a name="l06145"></a>06145         {
<a name="l06146"></a>06146 $       FreeConsole();
<a name="l06147"></a>06147 $       AllocConsole();
<a name="l06148"></a>06148         }
<a name="l06149"></a>06149 
<a name="l06150"></a>06150 $   console = Win32::GetConsoleWindow();
<a name="l06151"></a>06151 $   <span class="keywordflow">if</span> (!console) <span class="keywordflow">return</span> NULL;
<a name="l06152"></a>06152 
<a name="l06153"></a>06153     <span class="comment">// Linux::Wine v1.2.2+ compatibility.</span>
<a name="l06154"></a>06154     <span class="comment">// Beer compatibility will be added in future versions.</span>
<a name="l06155"></a>06155     <span class="comment">// Минздрав РФ предупреждает: чрезмерное употребление wine вредит Вашему здоровью.</span>
<a name="l06156"></a>06156 
<a name="l06157"></a>06157 $   <span class="keywordflow">if</span> (Win32::wine_get_version)
<a name="l06158"></a>06158         {
<a name="l06159"></a>06159 $       Win32::GetNumberOfConsoleFonts = NULL;
<a name="l06160"></a>06160 $       Win32::GetCurrentConsoleFont   = NULL;
<a name="l06161"></a>06161 $       Win32::SetConsoleFont          = NULL;
<a name="l06162"></a>06162         }
<a name="l06163"></a>06163 
<a name="l06164"></a>06164     <span class="comment">// Устанавливаем русскую кодовую страницу для консоли Windows</span>
<a name="l06165"></a>06165 
<a name="l06166"></a>06166 $   SetConsoleCP       (_TX_CP);  <span class="comment">// 1251</span>
<a name="l06167"></a>06167 $   SetConsoleOutputCP (_TX_CP);  <span class="comment">// 1251</span>
<a name="l06168"></a>06168 
<a name="l06169"></a>06169     <span class="comment">// Устанавливаем русскую кодовую страницу для стандартной библиотеки, иначе не будут работать Unicode-версии</span>
<a name="l06170"></a>06170     <span class="comment">// функций (wprintf, ...). Если компилите с помощью gcc и собираетесь использовать L&quot;unicode-строки&quot; с русским</span>
<a name="l06171"></a>06171     <span class="comment">// языком, укажите опции в командной строке компилятора g++: -finput-charset=CP1251 -fexec-charset=CP1251.</span>
<a name="l06172"></a>06172 
<a name="l06173"></a>06173 $   setlocale (LC_CTYPE, _TX_LC_CTYPE);                                    <span class="comment">//  &quot;Russian&quot;</span>
<a name="l06174"></a>06174 $   <span class="keywordflow">if</span> (!Win32::wine_get_version) _wsetlocale (LC_CTYPE, _TX_LC_CTYPE_W);  <span class="comment">// L&quot;Russian_Russia.ACP&quot;</span>
<a name="l06175"></a>06175 
<a name="l06176"></a>06176 $   <span class="keyword">static</span> <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l06177"></a>06177 $   <span class="keywordflow">if</span> (done) <span class="keywordflow">return</span> console;
<a name="l06178"></a>06178 
<a name="l06179"></a>06179     <span class="comment">// Впечатлительным лучше сюда не смотреть.</span>
<a name="l06180"></a>06180 
<a name="l06181"></a>06181 $   <span class="keywordflow">if</span> (!Win32::wine_get_version)
<a name="l06182"></a>06182         { $ _txConsole_SetUnicodeFont(); }
<a name="l06183"></a>06183 
<a name="l06184"></a>06184 <span class="preprocessor">#ifndef _CONSOLE</span>
<a name="l06185"></a>06185 <span class="preprocessor"></span>
<a name="l06186"></a>06186     <span class="comment">// Переоткрываем заново &lt;s&gt;Америку&lt;/s&gt; потоки ввода-вывода, если subsystem != console</span>
<a name="l06187"></a>06187 
<a name="l06188"></a>06188 $                    *stdin  = *_fdopen (_open_osfhandle ((DWORD)(ptrdiff_t) GetStdHandle (STD_INPUT_HANDLE),  _O_TEXT), <span class="stringliteral">&quot;r&quot;</span>);
<a name="l06189"></a>06189 $   fflush (stdout); *stdout = *_fdopen (_open_osfhandle ((DWORD)(ptrdiff_t) GetStdHandle (STD_OUTPUT_HANDLE), _O_TEXT), <span class="stringliteral">&quot;w&quot;</span>);
<a name="l06190"></a>06190 $   fflush (stderr); *stderr = *_fdopen (_open_osfhandle ((DWORD)(ptrdiff_t) GetStdHandle (STD_ERROR_HANDLE),  _O_TEXT), <span class="stringliteral">&quot;w&quot;</span>);
<a name="l06191"></a>06191 
<a name="l06192"></a>06192 $   setvbuf (stdin,  NULL, _IONBF, 0);
<a name="l06193"></a>06193 $   setvbuf (stdout, NULL, _IONBF, 0);
<a name="l06194"></a>06194 $   setvbuf (stderr, NULL, _IONBF, 0);
<a name="l06195"></a>06195 
<a name="l06196"></a>06196 $   std::ios::sync_with_stdio();
<a name="l06197"></a>06197 
<a name="l06198"></a>06198 <span class="preprocessor">#endif</span>
<a name="l06199"></a>06199 <span class="preprocessor"></span>
<a name="l06200"></a>06200     <span class="comment">// That&#39;s all, folks</span>
<a name="l06201"></a>06201 
<a name="l06202"></a>06202 $   done = <span class="keyword">true</span>;
<a name="l06203"></a>06203 $   <span class="keywordflow">return</span> console;
<a name="l06204"></a>06204     }
<a name="l06205"></a>06205 
<a name="l06206"></a>06206 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06207"></a>06207 
<a name="l06208"></a>06208 <span class="keyword">inline</span> <span class="keywordtype">bool</span> _txConsole_OK()
<a name="l06209"></a>06209     {
<a name="l06210"></a>06210 $1  <span class="keywordflow">return</span> Win32::GetConsoleWindow() != NULL;
<a name="l06211"></a>06211     }
<a name="l06212"></a>06212 
<a name="l06213"></a>06213 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06214"></a>06214 
<a name="l06215"></a>06215 <span class="keywordtype">bool</span> _txConsole_Detach (<span class="keywordtype">bool</span> activate)
<a name="l06216"></a>06216     {
<a name="l06217"></a>06217 $1  HWND console = Win32::GetConsoleWindow();
<a name="l06218"></a>06218 $   <span class="keywordflow">if</span> (!console) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06219"></a>06219 
<a name="l06220"></a>06220 $   EnableWindow (console, <span class="keyword">true</span>);
<a name="l06221"></a>06221 $   ShowWindow   (console, SW_SHOW);
<a name="l06222"></a>06222 
<a name="l06223"></a>06223 $   <span class="keywordflow">if</span> (activate)
<a name="l06224"></a>06224         {
<a name="l06225"></a>06225 $       SetForegroundWindow (console);
<a name="l06226"></a>06226 $       BringWindowToTop    (console);
<a name="l06227"></a>06227         }
<a name="l06228"></a>06228 
<a name="l06229"></a>06229 $   <span class="keywordflow">return</span> !!FreeConsole();
<a name="l06230"></a>06230     }
<a name="l06231"></a>06231 
<a name="l06232"></a>06232 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06233"></a>06233 
<a name="l06234"></a>06234 <span class="keywordtype">bool</span> _txConsole_Draw (HDC dc)
<a name="l06235"></a>06235     {
<a name="l06236"></a>06236 $1  _TX_IF_ARGUMENT_FAILED (dc) return false;
<a name="l06237"></a>06237 
<a name="l06238"></a>06238 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l06239"></a>06239 
<a name="l06240"></a>06240 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l06241"></a>06241 $   BOOL ok = GetConsoleScreenBufferInfo (out, &amp;con);
<a name="l06242"></a>06242 $   <span class="keywordflow">if</span> (!ok) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06243"></a>06243 
<a name="l06244"></a>06244 $   POINT size = { con.srWindow.Right  - con.srWindow.Left + 1,
<a name="l06245"></a>06245                    con.srWindow.Bottom - con.srWindow.Top  + 1 };
<a name="l06246"></a>06246 
<a name="l06247"></a>06247 $   SIZE fontSz = { 12, 16 };
<a name="l06248"></a>06248 $   Win32::GetTextExtentPoint32 (dc, <span class="stringliteral">&quot;W&quot;</span>, 1, &amp;fontSz) asserted;
<a name="l06249"></a>06249 
<a name="l06250"></a>06250 $   COLORREF pal [16] = { 0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xC0C0C0,
<a name="l06251"></a>06251                           0x808080, 0xFF0000, 0x00FF00, 0xFFFF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFFFF };
<a name="l06252"></a>06252 
<a name="l06253"></a>06253 $   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = 0; y &lt; size.y; y++)
<a name="l06254"></a>06254         {
<a name="l06255"></a>06255         <span class="keyword">static</span> <span class="keywordtype">char</span> chr [_TX_BUFSIZE + 1] = <span class="stringliteral">&quot;&quot;</span>;  <span class="comment">// [con.dwSize.X + 1]; maybe will be truncated</span>
<a name="l06256"></a>06256         <span class="keyword">static</span> WORD atr [_TX_BUFSIZE + 1] = {0}; <span class="comment">// [con.dwSize.X + 1]; maybe will be truncated</span>
<a name="l06257"></a>06257         COORD coord = { (short) (con.srWindow.Left), (short) (y + con.srWindow.Top) };
<a name="l06258"></a>06258         DWORD read  = 0;
<a name="l06259"></a>06259 
<a name="l06260"></a>06260         <span class="keywordflow">if</span> (!ReadConsoleOutputCharacter (out, chr, <a class="code" href="a00032.htm#ga3379d227f91f891ac97d068ab90ee871">SIZEARR</a> (chr) - 1, coord, &amp;read)) <span class="keywordflow">continue</span>;
<a name="l06261"></a>06261         <span class="keywordflow">if</span> (!ReadConsoleOutputAttribute (out, atr, <a class="code" href="a00032.htm#ga3379d227f91f891ac97d068ab90ee871">SIZEARR</a> (atr) - 1, coord, &amp;read)) <span class="keywordflow">continue</span>;
<a name="l06262"></a>06262 
<a name="l06263"></a>06263         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0, xEnd = size.x; x &lt; size.x; x = xEnd)
<a name="l06264"></a>06264             {
<a name="l06265"></a>06265             Win32::SetTextColor (dc, pal [ atr[x]       &amp; 0x0F]);
<a name="l06266"></a>06266             Win32::SetBkColor   (dc, pal [(atr[x] &gt;&gt; 4) &amp; 0x0F]);
<a name="l06267"></a>06267             Win32::SetBkMode    (dc,      (atr[x]       &amp; 0xF0)? OPAQUE : TRANSPARENT);
<a name="l06268"></a>06268 
<a name="l06269"></a>06269             <span class="keywordflow">for</span> (xEnd = x+1; atr[xEnd] == atr[x] &amp;&amp; xEnd &lt; size.x; xEnd++) ;
<a name="l06270"></a>06270 
<a name="l06271"></a>06271             Win32::TextOut (dc, <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cx * (x + con.srWindow.Left)),
<a name="l06272"></a>06272                                 <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cy *  y), chr + x, xEnd - x) asserted;
<a name="l06273"></a>06273             }
<a name="l06274"></a>06274         }
<a name="l06275"></a>06275 
<a name="l06276"></a>06276 $   Win32::SetTextColor (dc, pal [ con.wAttributes       &amp; 0x0F]);
<a name="l06277"></a>06277 $   Win32::SetBkColor   (dc, pal [(con.wAttributes &gt;&gt; 4) &amp; 0x0F]);
<a name="l06278"></a>06278 $   Win32::SetBkMode    (dc, TRANSPARENT);
<a name="l06279"></a>06279 
<a name="l06280"></a>06280 $   if (_txConsole_IsBlinking &amp;&amp;
<a name="l06281"></a>06281         <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (con.dwCursorPosition, con.srWindow) &amp;&amp;
<a name="l06282"></a>06282         GetTickCount() % <a class="code" href="a00034.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3" title="Интервал мигания курсора консоли (мс)">_txCursorBlinkInterval</a>*2 &gt; <a class="code" href="a00034.htm#gacc95bfbcf7a0f9124e8cd5e80d0b3cd3" title="Интервал мигания курсора консоли (мс)">_txCursorBlinkInterval</a> &amp;&amp;
<a name="l06283"></a>06283         GetForegroundWindow() == <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>())
<a name="l06284"></a>06284         {
<a name="l06285"></a>06285 $       Win32::TextOut (dc, <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cx * (con.dwCursorPosition.X - con.srWindow.Left)),
<a name="l06286"></a>06286                             <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (fontSz.cy * (con.dwCursorPosition.Y - con.srWindow.Top)) + 1,
<a name="l06287"></a>06287                             <span class="stringliteral">&quot;_&quot;</span>, 1) asserted;
<a name="l06288"></a>06288         }
<a name="l06289"></a>06289 
<a name="l06290"></a>06290 $   return true;
<a name="l06291"></a>06291     }
<a name="l06292"></a>06292 
<a name="l06293"></a>06293 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06294"></a>06294 <span class="comment">//{          Welcome to the Duck Side! Together we will rule the Bathroom!</span>
<a name="l06295"></a>06295 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06296"></a>06296 
<a name="l06297"></a>06297 <span class="keywordtype">bool</span> _txConsole_SetUnicodeFont()
<a name="l06298"></a>06298     {
<a name="l06299"></a>06299     <span class="comment">// Начиная с Висты все хорошо...</span>
<a name="l06300"></a>06300 
<a name="l06301"></a>06301 $1  <span class="keywordflow">if</span> (Win32::GetCurrentConsoleFontEx &amp;&amp; Win32::SetCurrentConsoleFontEx)
<a name="l06302"></a>06302         {
<a name="l06303"></a>06303 $       HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l06304"></a>06304 
<a name="l06305"></a>06305 $       Win32::CONSOLE_FONT_INFOEX info = { <span class="keyword">sizeof</span> (info) };
<a name="l06306"></a>06306 $       <span class="keywordflow">if</span> (!Win32::GetCurrentConsoleFontEx (out, <span class="keyword">false</span>, &amp;info)) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06307"></a>06307 
<a name="l06308"></a>06308 $       info.FontFamily = 0x36;                                                    <span class="comment">// Unicode fixed-pitch</span>
<a name="l06309"></a>06309 $       <span class="keywordflow">if</span> (!*info.FaceName) info.dwFontSize.Y = (SHORT) (info.dwFontSize.Y + 2);  <span class="comment">// Terminal font is too small</span>
<a name="l06310"></a>06310 $       wcsncpy_s (info.FaceName, L<span class="stringliteral">&quot;Lucida Console&quot;</span>, <a class="code" href="a00032.htm#ga3379d227f91f891ac97d068ab90ee871">SIZEARR</a> (info.FaceName));
<a name="l06311"></a>06311 
<a name="l06312"></a>06312 $       <span class="keywordflow">return</span> !!Win32::SetCurrentConsoleFontEx (out, <span class="keyword">false</span>, &amp;info);
<a name="l06313"></a>06313         }
<a name="l06314"></a>06314 
<a name="l06315"></a>06315     <span class="comment">// ...а до этого все не так сладко</span>
<a name="l06316"></a>06316 
<a name="l06317"></a>06317 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> uniFont = 10;  <span class="comment">// The Internet and W2K sources know this magic number</span>
<a name="l06318"></a>06318 $   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> uniSize = 20;  <span class="comment">// Size of the font desired, should be &gt; max of Raster Fonts</span>
<a name="l06319"></a>06319 $   <span class="keywordtype">bool</span> ok = <span class="keyword">true</span>;
<a name="l06320"></a>06320 
<a name="l06321"></a>06321     <span class="comment">// Force Windows to use Unicode font by creating and run the console shortcut tuned to use that font.</span>
<a name="l06322"></a>06322 
<a name="l06323"></a>06323 $   HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l06324"></a>06324 
<a name="l06325"></a>06325 $   <span class="keywordflow">if</span> (Win32::GetNumberOfConsoleFonts &amp;&amp; Win32::GetNumberOfConsoleFonts() &lt;= uniFont)
<a name="l06326"></a>06326         {
<a name="l06327"></a>06327 $       HRESULT init = Win32::CoInitialize (NULL);
<a name="l06328"></a>06328 $       <span class="keywordtype">size_t</span> sz = 0;
<a name="l06329"></a>06329 
<a name="l06330"></a>06330 $       <span class="keywordtype">char</span> link [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06331"></a>06331 $       getenv_s (&amp;sz, link, <span class="keyword">sizeof</span> (link) - 1, <span class="stringliteral">&quot;TEMP&quot;</span>);
<a name="l06332"></a>06332 $       strncat_s (link, <span class="stringliteral">&quot;\\~txLink.lnk&quot;</span>, <span class="keyword">sizeof</span> (link) - 1);
<a name="l06333"></a>06333 
<a name="l06334"></a>06334 $       <span class="keywordtype">char</span> comspec [MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06335"></a>06335 $       getenv_s (&amp;sz, comspec, <span class="keyword">sizeof</span> (comspec), <span class="stringliteral">&quot;COMSPEC&quot;</span>);
<a name="l06336"></a>06336 
<a name="l06337"></a>06337 $       (void) _unlink (link);
<a name="l06338"></a>06338 
<a name="l06339"></a>06339 $       _txCreateShortcut (link, comspec, <span class="stringliteral">&quot;/c exit&quot;</span>, NULL, NULL, SW_SHOWMINNOACTIVE, NULL, 0, uniSize) asserted;
<a name="l06340"></a>06340 
<a name="l06341"></a>06341 $       ok = (Win32::ShellExecuteA (NULL, NULL, link, NULL, NULL, SW_SHOWMINNOACTIVE) &gt; (<span class="keywordtype">void</span>*)32);  <span class="comment">// Sic!</span>
<a name="l06342"></a>06342         if (ok) { $ _txWaitFor (FindWindow (NULL, <span class="stringliteral">&quot;~txLink&quot;</span>), _TX_TIMEOUT); }
<a name="l06343"></a>06343 
<a name="l06344"></a>06344 $       (void) _unlink (link);
<a name="l06345"></a>06345 
<a name="l06346"></a>06346 $       <span class="keywordflow">if</span> (init == S_OK) Win32::CoUninitialize();
<a name="l06347"></a>06347         }
<a name="l06348"></a>06348 
<a name="l06349"></a>06349     <span class="comment">// If Unicode font is not already set, do set it.</span>
<a name="l06350"></a>06350 
<a name="l06351"></a>06351 $   CONSOLE_FONT_INFO cur = {0};
<a name="l06352"></a>06352     <span class="keywordflow">if</span> (Win32::GetCurrentConsoleFont) { $ Win32::GetCurrentConsoleFont (out, <span class="keyword">false</span>, &amp;cur); }
<a name="l06353"></a>06353 
<a name="l06354"></a>06354 $   ok &amp;= (cur.nFont &gt;= uniFont);
<a name="l06355"></a>06355     <span class="keywordflow">if</span> (!ok) { $ ok &amp;= Win32::SetConsoleFont &amp;&amp; Win32::SetConsoleFont (out, uniFont); }
<a name="l06356"></a>06356 
<a name="l06357"></a>06357 $   HWND console = Win32::GetConsoleWindow();
<a name="l06358"></a>06358 $   InvalidateRect (console, NULL, <span class="keyword">false</span>);
<a name="l06359"></a>06359 $   UpdateWindow   (console);
<a name="l06360"></a>06360 
<a name="l06361"></a>06361 $   <span class="keywordflow">return</span> ok;
<a name="l06362"></a>06362     }
<a name="l06363"></a>06363 
<a name="l06364"></a>06364 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06365"></a>06365 <span class="comment">//{          The nightmare helpers</span>
<a name="l06366"></a>06366 
<a name="l06367"></a>06367 <span class="preprocessor">#define      _TX_TRY                { goto __tx_try; } __tx_try: { int __tx_error = S_OK; (void)__tx_error;</span>
<a name="l06368"></a>06368 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_CHECKED( cmd )     { if (FAILED (__tx_error = (cmd))) goto __tx_catch; }</span>
<a name="l06369"></a>06369 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_FAIL               { __tx_error = E_FAIL; goto __tx_catch; }</span>
<a name="l06370"></a>06370 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_RETRY              { __tx_error = S_OK;   goto __tx_try;   }</span>
<a name="l06371"></a>06371 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_OK                 ( SUCCEEDED (__tx_error) )</span>
<a name="l06372"></a>06372 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_CATCH              goto __tx_finally; __tx_catch:</span>
<a name="l06373"></a>06373 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_RETURN             goto __tx_finally;</span>
<a name="l06374"></a>06374 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_FINALLY            __tx_finally:</span>
<a name="l06375"></a>06375 <span class="preprocessor"></span><span class="preprocessor">#define      _TX_ENDTRY             }</span>
<a name="l06376"></a>06376 <span class="preprocessor"></span>
<a name="l06377"></a>06377 <span class="comment">//}</span>
<a name="l06378"></a>06378 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06379"></a>06379 
<a name="l06380"></a>06380 <span class="comment">// Мало не покажется</span>
<a name="l06381"></a>06381 
<a name="l06382"></a>06382 <span class="keywordtype">bool</span> _txCreateShortcut (<span class="keyword">const</span> <span class="keywordtype">char</span> shortcutName[],
<a name="l06383"></a>06383                         <span class="keyword">const</span> <span class="keywordtype">char</span> fileToLink[], <span class="keyword">const</span> <span class="keywordtype">char</span> args[] <span class="comment">/*= NULL*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> workDir[] <span class="comment">/*= NULL*/</span>,
<a name="l06384"></a>06384                         <span class="keyword">const</span> <span class="keywordtype">char</span> description[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> cmdShow <span class="comment">/*= SW_SHOWNORMAL*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> iconFile[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> iconIndex <span class="comment">/*= 0*/</span>,
<a name="l06385"></a>06385                         <span class="keywordtype">int</span> fontSize <span class="comment">/*= 0*/</span>, COORD bufSize <span class="comment">/*= ZERO (COORD)*/</span>, COORD wndSize <span class="comment">/*= ZERO (COORD)*/</span>, COORD wndOrg <span class="comment">/*=ZERO (COORD)*/</span>)
<a name="l06386"></a>06386     {
<a name="l06387"></a>06387 $1  _TX_IF_ARGUMENT_FAILED (shortcutName &amp;&amp; *shortcutName) return false;
<a name="l06388"></a>06388 $   _TX_IF_ARGUMENT_FAILED (fileToLink   &amp;&amp; *fileToLink)   return false;
<a name="l06389"></a>06389 
<a name="l06390"></a>06390 $   IShellLink* shellLink = NULL;
<a name="l06391"></a>06391 $   Win32::IShellLinkDataList* dataList = NULL;
<a name="l06392"></a>06392 $   IPersistFile* file = NULL;
<a name="l06393"></a>06393 
<a name="l06394"></a>06394 $   HRESULT init = Win32::CoInitialize (NULL);
<a name="l06395"></a>06395 
<a name="l06396"></a>06396     _TX_TRY
<a name="l06397"></a>06397         {
<a name="l06398"></a>06398 $       _TX_CHECKED (Win32::CoCreateInstance (CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, Win32::IID_IShellLink, (<span class="keywordtype">void</span>**) &amp;shellLink));
<a name="l06399"></a>06399 $       <span class="keywordflow">if</span> (!shellLink) _TX_FAIL;
<a name="l06400"></a>06400 
<a name="l06401"></a>06401 $       shellLink-&gt;SetPath (fileToLink);
<a name="l06402"></a>06402 $       shellLink-&gt;SetArguments (args);
<a name="l06403"></a>06403 $       shellLink-&gt;SetWorkingDirectory (workDir);
<a name="l06404"></a>06404 $       shellLink-&gt;SetDescription (description);
<a name="l06405"></a>06405 $       shellLink-&gt;SetShowCmd (cmdShow);
<a name="l06406"></a>06406 $       shellLink-&gt;SetIconLocation (iconFile, iconIndex);
<a name="l06407"></a>06407 
<a name="l06408"></a>06408 $       _TX_CHECKED (shellLink-&gt;QueryInterface (Win32::IID_IShellLinkDataList, (<span class="keywordtype">void</span>**) &amp;dataList));
<a name="l06409"></a>06409 $       <span class="keywordflow">if</span> (!dataList) _TX_FAIL;
<a name="l06410"></a>06410 
<a name="l06411"></a>06411 $       Win32::NT_CONSOLE_PROPS props =
<a name="l06412"></a>06412           {{<span class="keyword">sizeof</span> (props), NT_CONSOLE_PROPS_SIG},
<a name="l06413"></a>06413 
<a name="l06414"></a>06414             0x07, 0xF5,                                 <span class="comment">// wFillAttribute, wPopupFillAttribute</span>
<a name="l06415"></a>06415            {bufSize.X, bufSize.Y},                      <span class="comment">// dwScreenBufferSize</span>
<a name="l06416"></a>06416            {wndSize.X, wndSize.Y},                      <span class="comment">// dwWindowSize</span>
<a name="l06417"></a>06417            {wndOrg.X,  wndOrg.Y},                       <span class="comment">// dwWindowOrigin</span>
<a name="l06418"></a>06418             0,                                          <span class="comment">// nFont</span>
<a name="l06419"></a>06419             0,                                          <span class="comment">// nInputBufferSize</span>
<a name="l06420"></a>06420            {0, (short) fontSize},                       <span class="comment">// dwFontSize</span>
<a name="l06421"></a>06421             0x36, 400, L<span class="stringliteral">&quot;Lucida Console&quot;</span>,               <span class="comment">// uFontFamily, uFontWeight, FaceName. We&#39;re dancing for this!</span>
<a name="l06422"></a>06422             15,                                         <span class="comment">// uCursorSize</span>
<a name="l06423"></a>06423             0,  1, 1, 0,                                <span class="comment">// bFullScreen, bQuickEdit, bInsertMode, bAutoPosition</span>
<a name="l06424"></a>06424             50, 4, 0,                                   <span class="comment">// uHistoryBufferSize, uNumberOfHistoryBuffers, bHistoryNoDup</span>
<a name="l06425"></a>06425 
<a name="l06426"></a>06426            {0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xC0C0C0,
<a name="l06427"></a>06427             0x808080, 0xFF0000, 0x00FF00, 0xFFFF00, 0x0000FF, 0xFF00FF, 0x00FFFF, 0xFFFFFF}
<a name="l06428"></a>06428             };
<a name="l06429"></a>06429 
<a name="l06430"></a>06430 $       _TX_CHECKED (dataList-&gt;AddDataBlock (&amp;props));
<a name="l06431"></a>06431 
<a name="l06432"></a>06432 $       _TX_CHECKED (shellLink-&gt;QueryInterface (Win32::IID_IPersistFile, (<span class="keywordtype">void</span>**) &amp;file));
<a name="l06433"></a>06433 $       <span class="keywordflow">if</span> (!file) _TX_FAIL;
<a name="l06434"></a>06434 
<a name="l06435"></a>06435 $       <span class="keywordtype">wchar_t</span> wName[MAX_PATH] = L<span class="stringliteral">&quot;&quot;</span>;
<a name="l06436"></a>06436 $       MultiByteToWideChar (_TX_CP, 0, shortcutName, -1, wName, MAX_PATH) || ZeroMemory (wName, <span class="keyword">sizeof</span> (wName));
<a name="l06437"></a>06437 
<a name="l06438"></a>06438 $       _TX_CHECKED (file-&gt;Save (wName, <span class="keyword">true</span>));
<a name="l06439"></a>06439         }
<a name="l06440"></a>06440 
<a name="l06441"></a>06441 $   _TX_CATCH
<a name="l06442"></a>06442 $   _TX_FINALLY
<a name="l06443"></a>06443 
<a name="l06444"></a>06444 $   <span class="keywordflow">if</span> (file)      file     -&gt;Release();
<a name="l06445"></a>06445 $   <span class="keywordflow">if</span> (dataList)  dataList -&gt;Release();
<a name="l06446"></a>06446 $   <span class="keywordflow">if</span> (shellLink) shellLink-&gt;Release();
<a name="l06447"></a>06447 
<a name="l06448"></a>06448 $   <span class="keywordflow">if</span> (init == S_OK) Win32::CoUninitialize();
<a name="l06449"></a>06449 
<a name="l06450"></a>06450 $   <span class="keywordflow">return</span> _TX_OK;
<a name="l06451"></a>06451     _TX_ENDTRY
<a name="l06452"></a>06452     }
<a name="l06453"></a>06453 
<a name="l06454"></a>06454 <span class="comment">//}</span>
<a name="l06455"></a>06455 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06456"></a>06456 
<a name="l06458"></a>06458 <span class="comment">//}</span>
<a name="l06459"></a>06459 <span class="comment">//=================================================================================================================</span>
<a name="l06460"></a>06460 
<a name="l06461"></a>06461 <span class="comment">//=================================================================================================================</span>
<a name="l06462"></a>06462 <span class="comment">//{          [Internal] Memory DC functions        (_txBuffer...)</span>
<a name="l06464"></a>06464 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l06466"></a>06466 <span class="comment"></span>
<a name="l06467"></a>06467 HDC _txBuffer_Create (HWND wnd, <span class="keyword">const</span> POINT* size, HBITMAP bitmap)
<a name="l06468"></a>06468     {
<a name="l06469"></a>06469 $1  <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l06470"></a>06470 
<a name="l06471"></a>06471 $   HDC wndDC = GetDC (wnd);
<a name="l06472"></a>06472 $   <span class="keywordflow">if</span> (!wndDC) <span class="keywordflow">return</span> NULL;
<a name="l06473"></a>06473 
<a name="l06474"></a>06474 $   RECT r = {0};
<a name="l06475"></a>06475 $   <span class="keywordflow">if</span> (wnd) GetClientRect (wnd, &amp;r) asserted;
<a name="l06476"></a>06476 $   POINT sz = { r.right - r.left, r.bottom - r.top };
<a name="l06477"></a>06477 $   <span class="keywordflow">if</span> (!size) size = &amp;sz;
<a name="l06478"></a>06478 
<a name="l06479"></a>06479 $   HDC dc = Win32::CreateCompatibleDC (wndDC);
<a name="l06480"></a>06480 $   <span class="keywordflow">if</span> (!dc) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create buffer: CreateCompatibleDC() failed&quot;</span>);
<a name="l06481"></a>06481 
<a name="l06482"></a>06482 $   HBITMAP bmap = bitmap? bitmap : Win32::CreateCompatibleBitmap (wndDC, size-&gt;x, size-&gt;y);
<a name="l06483"></a>06483 $   <span class="keywordflow">if</span> (!bmap) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Cannot create buffer: CreateCompatibleBitmap() failed&quot;</span>);
<a name="l06484"></a>06484 
<a name="l06485"></a>06485 $   Win32::SelectObject (dc, bmap) asserted;
<a name="l06486"></a>06486 
<a name="l06487"></a>06487 $   if (!bitmap) Win32::PatBlt (dc, 0, 0, size-&gt;x, size-&gt;y, BLACKNESS) asserted;
<a name="l06488"></a>06488 
<a name="l06489"></a>06489 $   ReleaseDC (wnd, wndDC) asserted;
<a name="l06490"></a>06490 
<a name="l06491"></a>06491 $   return dc;
<a name="l06492"></a>06492     }
<a name="l06493"></a>06493 
<a name="l06494"></a>06494 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06495"></a>06495 
<a name="l06496"></a>06496 <span class="keywordtype">bool</span> _txBuffer_Delete (HDC* dc)
<a name="l06497"></a>06497     {
<a name="l06498"></a>06498 $1  _TX_IF_ARGUMENT_FAILED (dc) return false;
<a name="l06499"></a>06499 $   if (!*dc) return false;
<a name="l06500"></a>06500 
<a name="l06501"></a>06501 $   if (!Win32::GetObjectType (Win32::GetCurrentObject (*dc, OBJ_BITMAP))) return false;
<a name="l06502"></a>06502 
<a name="l06503"></a>06503 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l06504"></a>06504 
<a name="l06505"></a>06505 $   _txBuffer_Select (Win32::GetStockObject         (NULL_PEN),    *dc) asserted;
<a name="l06506"></a>06506 $   _txBuffer_Select (Win32::GetStockObject         (NULL_BRUSH),  *dc) asserted;
<a name="l06507"></a>06507 $   _txBuffer_Select (Win32::GetStockObject         (SYSTEM_FONT), *dc) asserted;
<a name="l06508"></a>06508 $   _txBuffer_Select (Win32::CreateCompatibleBitmap (*dc, 0, 0),   *dc) asserted;
<a name="l06509"></a>06509 
<a name="l06510"></a>06510 $   Win32::DeleteObject (Win32::GetCurrentObject (*dc, OBJ_BITMAP)) asserted;
<a name="l06511"></a>06511 
<a name="l06512"></a>06512 $   Win32::DeleteDC (*dc) asserted;
<a name="l06513"></a>06513 
<a name="l06514"></a>06514 $   *dc = NULL;
<a name="l06515"></a>06515 
<a name="l06516"></a>06516 $   return true;
<a name="l06517"></a>06517     }
<a name="l06518"></a>06518 
<a name="l06519"></a>06519 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06520"></a>06520 
<a name="l06521"></a>06521 <span class="keywordtype">bool</span> _txBuffer_Select (HGDIOBJ obj, HDC dc <span class="comment">/*= txDC()*/</span>)
<a name="l06522"></a>06522     {
<a name="l06523"></a>06523 $1  _TX_IF_ARGUMENT_FAILED (obj) return false;
<a name="l06524"></a>06524 $   _TX_IF_ARGUMENT_FAILED (dc)  return false;
<a name="l06525"></a>06525 
<a name="l06526"></a>06526 $   if (!Win32::GetObjectType (obj)) <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (&quot;Invalid GDI <span class="keywordtype">object</span> type&quot;);
<a name="l06527"></a>06527 
<a name="l06528"></a>06528 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l06529"></a>06529 
<a name="l06530"></a>06530 $   obj = Win32::SelectObject (dc, obj);
<a name="l06531"></a>06531 $   if (obj) Win32::DeleteObject (obj) asserted;
<a name="l06532"></a>06532 
<a name="l06533"></a>06533 $   return obj != NULL;
<a name="l06534"></a>06534     }
<a name="l06535"></a>06535 
<a name="l06537"></a>06537 <span class="comment">//}</span>
<a name="l06538"></a>06538 <span class="comment">//=================================================================================================================</span>
<a name="l06539"></a>06539 
<a name="l06540"></a>06540 <span class="comment">//=================================================================================================================</span>
<a name="l06541"></a>06541 <span class="comment">//{          Diagnostics</span>
<a name="l06543"></a>06543 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l06545"></a>06545 <span class="comment"></span>
<a name="l06546"></a>06546 <span class="keywordtype">void</span> _txOnSignal (<span class="keywordtype">int</span> sig<span class="comment">/* = 0*/</span>, <span class="keywordtype">int</span> fpe<span class="comment">/* = 0*/</span>)
<a name="l06547"></a>06547     {
<a name="l06548"></a>06548     <span class="keywordflow">if</span> (!sig &amp;&amp; !fpe)
<a name="l06549"></a>06549         {
<a name="l06550"></a>06550 $1      signal (SIGSEGV, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l06551"></a>06551 $       signal (SIGFPE,  (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l06552"></a>06552 $       signal (SIGABRT, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l06553"></a>06553 $       signal (SIGILL,  (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l06554"></a>06554 $       signal (SIGTERM, (<span class="keywordtype">void</span>(*)(<span class="keywordtype">int</span>))_txOnSignal) != SIG_ERR <a class="code" href="a00032.htm#ga889b74443b3e918adee3e31fad4653f7" title="Выводит диагностическое сообщение в случае нулевого или ложного результата.">asserted</a>;
<a name="l06555"></a>06555 $       <span class="keywordflow">return</span>;
<a name="l06556"></a>06556         }
<a name="l06557"></a>06557 
<a name="l06558"></a>06558     <span class="keyword">const</span> <span class="keywordtype">char</span>* sSig = <span class="stringliteral">&quot;: Неизвестный тип сигнала&quot;</span>;
<a name="l06559"></a>06559     <span class="keyword">const</span> <span class="keywordtype">char</span>* sFPE = <span class="stringliteral">&quot;: Неизвестный тип исключения&quot;</span>;
<a name="l06560"></a>06560 
<a name="l06561"></a>06561 <span class="preprocessor">    #define GET_DESCR_( str, code, descr )  case (code): { (str) = #code &quot;: &quot; descr; break; }</span>
<a name="l06562"></a>06562 <span class="preprocessor"></span>
<a name="l06563"></a>06563     <span class="keywordflow">switch</span> (sig)
<a name="l06564"></a>06564         {
<a name="l06565"></a>06565         GET_DESCR_ (sSig, SIGSEGV, <span class="stringliteral">&quot;Доступ по неверному указателю. Ставьте ассерты!&quot;</span>)
<a name="l06566"></a>06566         GET_DESCR_ (sSig, SIGILL,  &quot;Попытка выполнить недопустимую операцию. Проверьте указатели на функции.&quot;)
<a name="l06567"></a>06567         GET_DESCR_ (sSig, SIGABRT, &quot;Аварийное завершение программы, вызвана функция abort().&quot;)
<a name="l06568"></a>06568         GET_DESCR_ (sSig, SIGTERM, &quot;Получен сигнал принудительного завершения программы.&quot;)
<a name="l06569"></a>06569         GET_DESCR_ (sSig, SIGFPE,  &quot;Грубая ошибка в вычислениях, деление на 0 или что-нибудь еще&quot;)
<a name="l06570"></a>06570         default:   break;
<a name="l06571"></a>06571         }
<a name="l06572"></a>06572 
<a name="l06573"></a>06573     if (sig == SIGFPE) switch (fpe)
<a name="l06574"></a>06574         {
<a name="l06575"></a>06575         GET_DESCR_ (sFPE, 0x81 <span class="comment">/* _FPE_INVALID        */</span>, <span class="stringliteral">&quot;Результат неверен&quot;</span>)
<a name="l06576"></a>06576         GET_DESCR_ (sFPE, 0x82 <span class="comment">/* _FPE_DENORMAL       */</span>, &quot;Денормализация&quot;)
<a name="l06577"></a>06577         GET_DESCR_ (sFPE, 0x83 <span class="comment">/* _FPE_ZERODIVIDE     */</span>, &quot;Деление на ноль&quot;)
<a name="l06578"></a>06578         GET_DESCR_ (sFPE, 0x84 <span class="comment">/* _FPE_OVERFLOW       */</span>, &quot;Результат слишком большой&quot;)
<a name="l06579"></a>06579         GET_DESCR_ (sFPE, 0x85 <span class="comment">/* _FPE_UNDERFLOW      */</span>, &quot;Результат слишком маленький&quot;)
<a name="l06580"></a>06580         GET_DESCR_ (sFPE, 0x86 <span class="comment">/* _FPE_INEXACT        */</span>, &quot;Неточный результат&quot;)
<a name="l06581"></a>06581         GET_DESCR_ (sFPE, 0x87 <span class="comment">/* _FPE_UNEMULATED     */</span>, &quot;Операция не поддерживается&quot;)
<a name="l06582"></a>06582         GET_DESCR_ (sFPE, 0x88 <span class="comment">/* _FPE_SQRTNEG        */</span>, &quot;Квадратный корень из отрицательного числа&quot;)
<a name="l06583"></a>06583         GET_DESCR_ (sFPE, 0x8A <span class="comment">/* _FPE_STACKOVERFLOW  */</span>, &quot;Переполнение стека сопроцессора&quot;)
<a name="l06584"></a>06584         GET_DESCR_ (sFPE, 0x8B <span class="comment">/* _FPE_STACKUNDERFLOW */</span>, &quot;В стеке сопроцессора не хватает данных&quot;)
<a name="l06585"></a>06585         GET_DESCR_ (sFPE, 0x8C <span class="comment">/* _FPE_EXPLICITGEN    */</span>, &quot;Явный вызов исключения&quot;)
<a name="l06586"></a>06586         default:   break;
<a name="l06587"></a>06587         }
<a name="l06588"></a>06588 
<a name="l06589"></a>06589     <span class="preprocessor">#undef GET_DESCR_</span>
<a name="l06590"></a>06590 <span class="preprocessor"></span>
<a name="l06591"></a>06591     _fpreset();
<a name="l06592"></a>06592 
<a name="l06593"></a>06593     <span class="keywordflow">if</span> (sig == SIGFPE &amp;&amp; fpe)
<a name="l06594"></a>06594         _txError (NULL, 0, NULL, <span class="stringliteral">&quot;signal (%d, 0x%02X): %s, %s.&quot;</span> <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sig <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> fpe <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sSig <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sFPE);
<a name="l06595"></a>06595     <span class="keywordflow">else</span>
<a name="l06596"></a>06596         _txError (NULL, 0, NULL, <span class="stringliteral">&quot;signal (%d): %s&quot;</span>              <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sig       <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> sSig);
<a name="l06597"></a>06597 
<a name="l06598"></a>06598     _txExit = <span class="keyword">true</span>;
<a name="l06599"></a>06599 
<a name="l06600"></a>06600     _txCleanup();
<a name="l06601"></a>06601     }
<a name="l06602"></a>06602 
<a name="l06603"></a>06603 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06604"></a>06604 
<a name="l06605"></a>06605 <span class="keywordtype">void</span> _txOnUnexpected()
<a name="l06606"></a>06606     {
<a name="l06607"></a>06607     _txError (NULL, 0, NULL,
<a name="l06608"></a>06608               <span class="stringliteral">&quot;std::unexpected(): Необработанное исключение. Проверьте свои catch-блоки. Перехватите catch (...).    \n\n&quot;</span>
<a name="l06609"></a>06609               <span class="stringliteral">&quot;Если вы (зря) используете спецификацию исключений для функций, проверьте, не нарушена ли она.&quot;</span>);
<a name="l06610"></a>06610     }
<a name="l06611"></a>06611 
<a name="l06612"></a>06612 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06613"></a>06613 
<a name="l06614"></a>06614 <span class="keywordtype">void</span> _txOnTerminate()
<a name="l06615"></a>06615     {
<a name="l06616"></a>06616     _txError (NULL, 0, NULL,
<a name="l06617"></a>06617               <span class="stringliteral">&quot;std::terminate(): Программа будет завершена из-за неперехваченного исключения в функции main() или в деструкторе.    \n\n&quot;</span>
<a name="l06618"></a>06618               <span class="stringliteral">&quot;Используйте try/catch блоки, перехватывайте catch (...), разбирайтесь, в чем дело.&quot;</span>);
<a name="l06619"></a>06619     }
<a name="l06620"></a>06620 
<a name="l06621"></a>06621 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06622"></a>06622 
<a name="l06623"></a>06623 <span class="keyword">const</span> <span class="keywordtype">char</span>* _txError (<span class="keyword">const</span> <span class="keywordtype">char</span> file[] <span class="comment">/*= NULL*/</span>, <span class="keywordtype">int</span> line <span class="comment">/*= 0*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> func[] <span class="comment">/*= NULL*/</span>,
<a name="l06624"></a>06624                       <span class="keyword">const</span> <span class="keywordtype">char</span> msg [] <span class="comment">/*= NULL*/</span>, ...)
<a name="l06625"></a>06625     {
<a name="l06626"></a>06626     va_list arg; va_start (arg, msg);
<a name="l06627"></a>06627 
<a name="l06628"></a>06628     <span class="keyword">static</span> <span class="keywordtype">int</span> nCalls = 0; nCalls++;
<a name="l06629"></a>06629 
<a name="l06630"></a>06630     DWORD    winerr   = GetLastError();
<a name="l06631"></a>06631     <span class="keywordtype">int</span>      crterr   = errno;
<a name="l06632"></a>06632     <span class="keywordtype">int</span>      doserr   = _doserrno;
<a name="l06633"></a>06633     <span class="keywordtype">unsigned</span> threadId = GetCurrentThreadId();
<a name="l06634"></a>06634 
<a name="l06635"></a>06635     <span class="keywordtype">bool</span> isFatal = (msg &amp;&amp; *msg == <span class="charliteral">&#39;\a&#39;</span>)? (msg++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l06636"></a>06636     <span class="keywordtype">bool</span> fmtOnly = (msg &amp;&amp; *msg == <span class="charliteral">&#39;\f&#39;</span>)? (msg++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l06637"></a>06637 
<a name="l06638"></a>06638     <span class="keyword">static</span> <span class="keywordtype">char</span> what[<a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06639"></a>06639     <span class="keyword">static</span> <span class="keywordtype">char</span> str [<a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06640"></a>06640     <span class="keywordtype">char</span> *s = what;
<a name="l06641"></a>06641 
<a name="l06642"></a>06642 <span class="preprocessor">    #define SZARG_(n)  sizeof (what) - 1 - (n) - (s-what) _TX_TRUNCATE</span>
<a name="l06643"></a>06643 <span class="preprocessor"></span>
<a name="l06644"></a>06644                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;TXLib сообщает:\n\n&quot;</span>);
<a name="l06645"></a>06645 
<a name="l06646"></a>06646                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;Программа: %s, &quot;</span>, <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a>());
<a name="l06647"></a>06647     <span class="keywordflow">if</span> (file)   s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;файл: %s, &quot;</span>,      file);
<a name="l06648"></a>06648     <span class="keywordflow">if</span> (line)   s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;строка: %d, &quot;</span>,    line);
<a name="l06649"></a>06649     <span class="keywordflow">if</span> (func)   s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;функция: %s.&quot;</span>,    func);
<a name="l06650"></a>06650                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;\n\n&quot;</span>);
<a name="l06651"></a>06651 
<a name="l06652"></a>06652     <span class="keywordflow">if</span> (msg)    s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;%s: &quot;</span>, (file || line || func)? <span class="stringliteral">&quot;Сообщение&quot;</span> : <span class="stringliteral">&quot;ВНЕЗАПНО&quot;</span>),
<a name="l06653"></a>06653                 s += _vsnprintf_s  (s, SZARG_(1), msg, arg),
<a name="l06654"></a>06654                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;\n\n&quot;</span>);
<a name="l06655"></a>06655 
<a name="l06656"></a>06656                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;#%d: %s, Instance: 0x%p, Flags: %c%c%c%c%c%c, Thread: 0x%08X%s&quot;</span>,
<a name="l06657"></a>06657                                                   nCalls, <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>, (<span class="keywordtype">void</span>*) &amp;_txInitialized,
<a name="l06658"></a>06658                                                   <span class="stringliteral">&quot;cC&quot;</span>[_txConsole], <span class="stringliteral">&quot;mM&quot;</span>[_txMain], <span class="stringliteral">&quot;dD&quot;</span>[_txIsDll], <span class="stringliteral">&quot;rR&quot;</span>[_txRunning], <span class="stringliteral">&quot;eE&quot;</span>[_txExit], <span class="stringliteral">&quot;tT&quot;</span>[_txAllowTrace],
<a name="l06659"></a>06659                                                   threadId,
<a name="l06660"></a>06660                                                   (threadId == _txMainThreadId)?    <span class="stringliteral">&quot; (Main)&quot;</span>   :
<a name="l06661"></a>06661                                                   (threadId == _txCanvas_ThreadId)? <span class="stringliteral">&quot; (Canvas)&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l06662"></a>06662 
<a name="l06663"></a>06663     <span class="keywordflow">if</span> (winerr) s +=  _snprintf_s  (s, SZARG_(0), <span class="stringliteral">&quot;, GetLastError(): %lu (&quot;</span>, winerr),
<a name="l06664"></a>06664                 s += FormatMessage (FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
<a name="l06665"></a>06665                                     NULL, winerr, MAKELANGID (LANG_NEUTRAL, SUBLANG_DEFAULT),
<a name="l06666"></a>06666                                     s, (DWORD) (<span class="keyword">sizeof</span> (what) - (s-what)), NULL) - 2,
<a name="l06667"></a>06667                 s -=  (s[-1] == <span class="charliteral">&#39;.&#39;</span>)? 1 : 0,
<a name="l06668"></a>06668                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;)&quot;</span>);
<a name="l06669"></a>06669 
<a name="l06670"></a>06670     <span class="keywordflow">if</span> (crterr) s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;, errno: %d (%s)&quot;</span>,     crterr, (strerror_s (str, crterr), str));
<a name="l06671"></a>06671 
<a name="l06672"></a>06672     <span class="keywordflow">if</span> (doserr) s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;, _doserrno: %d (%s)&quot;</span>, doserr, (strerror_s (str, doserr), str));
<a name="l06673"></a>06673 
<a name="l06674"></a>06674                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;. %s\n&quot;</span>, std::uncaught_exception()? <span class="stringliteral">&quot;std::uncaught_exception(): true.&quot;</span> : <span class="stringliteral">&quot;&quot;</span>);
<a name="l06675"></a>06675 
<a name="l06676"></a>06676     <span class="keywordflow">if</span> (_txInTX &gt; 0 &amp;&amp; !(_txLine == line &amp;&amp; file &amp;&amp; _stricmp (_txFile, file) == 0))
<a name="l06677"></a>06677                 s +=  _snprintf_s  (s, SZARG_(1), <span class="stringliteral">&quot;From: %s (%d) %s.\n&quot;</span>, _txFile, _txLine, _txFunc);
<a name="l06678"></a>06678 
<a name="l06679"></a>06679 <span class="preprocessor">    #undef SZARG_</span>
<a name="l06680"></a>06680 <span class="preprocessor"></span>    va_end (arg);
<a name="l06681"></a>06681 
<a name="l06682"></a>06682     <span class="keyword">struct </span>tools
<a name="l06683"></a>06683         {
<a name="l06684"></a>06684         <span class="keyword">static</span> <span class="keywordtype">char</span>* compressSpaces (<span class="keywordtype">char</span>* dest, <span class="keyword">const</span> <span class="keywordtype">char</span>* src)
<a name="l06685"></a>06685             {
<a name="l06686"></a>06686             <span class="keywordtype">char</span>* dst = dest;
<a name="l06687"></a>06687 
<a name="l06688"></a>06688             <span class="keywordflow">for</span> (<span class="keywordtype">char</span> last = <span class="charliteral">&#39; &#39;</span>; *src; src++)
<a name="l06689"></a>06689                 <span class="keywordflow">if</span> (isspace ((<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)(*src))) { <span class="keywordflow">if</span> (last != <span class="charliteral">&#39; &#39;</span>) *dst++ = last = <span class="charliteral">&#39; &#39;</span>; }
<a name="l06690"></a>06690                 <span class="keywordflow">else</span>                                                    *dst++ = last = *src;
<a name="l06691"></a>06691 
<a name="l06692"></a>06692             <span class="keywordflow">if</span> (dst &gt; dest &amp;&amp; dst[-1] == <span class="charliteral">&#39; &#39;</span>) dst--;
<a name="l06693"></a>06693             *dst++ = <span class="charliteral">&#39;\n&#39;</span>; *dst++ = 0;
<a name="l06694"></a>06694 
<a name="l06695"></a>06695             <span class="keywordflow">return</span> dest;
<a name="l06696"></a>06696             }
<a name="l06697"></a>06697 
<a name="l06698"></a>06698         <span class="keyword">static</span> <span class="keywordtype">char</span>* replace (<span class="keywordtype">char</span>* dest, <span class="keyword">const</span> <span class="keywordtype">char</span>* src, <span class="keywordtype">char</span> find, <span class="keywordtype">char</span> repl)
<a name="l06699"></a>06699             {
<a name="l06700"></a>06700             <span class="keywordtype">size_t</span> i = 0;
<a name="l06701"></a>06701             <span class="keywordflow">for</span> (; src[i]; i++) dest[i] = (src[i] == find)? repl : src[i];
<a name="l06702"></a>06702             dest[i] = 0;
<a name="l06703"></a>06703 
<a name="l06704"></a>06704             <span class="keywordflow">return</span> dest;
<a name="l06705"></a>06705             }
<a name="l06706"></a>06706         };
<a name="l06707"></a>06707 
<a name="l06708"></a>06708 $   <a class="code" href="a00032.htm#gaa924f43cd62016e5e6a8500336add06a" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="stringliteral">&quot;%s - %s&quot;</span>, <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>, tools::compressSpaces (str, what));
<a name="l06709"></a>06709 
<a name="l06710"></a>06710     <span class="keywordflow">if</span> (fmtOnly) <span class="keywordflow">return</span> what;
<a name="l06711"></a>06711 
<a name="l06712"></a>06712     tools::replace (str, what, <span class="charliteral">&#39;\v&#39;</span>, <span class="charliteral">&#39; &#39;</span>);
<a name="l06713"></a>06713     printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>
<a name="l06714"></a>06714                  <span class="stringliteral">&quot;%s&quot;</span>
<a name="l06715"></a>06715                  <span class="stringliteral">&quot;--------------------------------------------------\n&quot;</span>, str);
<a name="l06716"></a>06716 
<a name="l06717"></a>06717     tools::replace (str, what, <span class="charliteral">&#39;\v&#39;</span>, <span class="charliteral">&#39;\n&#39;</span>);
<a name="l06718"></a>06718     <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (str, isFatal? <span class="stringliteral">&quot;Фатальная ошибка&quot;</span> : <span class="stringliteral">&quot;Ошибка в программе&quot;</span>, MB_ICONSTOP | MB_TOPMOST | MB_SYSTEMMODAL);
<a name="l06719"></a>06719 
<a name="l06720"></a>06720     <span class="keywordflow">if</span> (!isFatal) <span class="keywordflow">return</span> what;
<a name="l06721"></a>06721 
<a name="l06722"></a>06722     <span class="keywordflow">if</span> (!IsDebuggerPresent()) exit (EXIT_FAILURE);
<a name="l06723"></a>06723 
<a name="l06724"></a>06724 <span class="comment">//  vvvvvvvvvvvvvvvvvv</span>
<a name="l06725"></a>06725     DebugBreak();   <span class="comment">//&gt;&gt;&gt; Вы в отладчике. Есть шанс посмотреть переменные и разобраться.</span>
<a name="l06726"></a>06726 <span class="comment">//  ^^^^^^^^^^^^^^^^^^</span>
<a name="l06727"></a>06727 
<a name="l06728"></a>06728     <span class="keywordflow">return</span> what;    <span class="comment">//&gt;&gt;&gt; Уходите из функции пошаговой отладкой (F10/F11). Следите за стеком вызовов (Alt+7).</span>
<a name="l06729"></a>06729     }
<a name="l06730"></a>06730 
<a name="l06731"></a>06731 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06732"></a>06732 
<a name="l06733"></a>06733 <span class="keywordtype">int</span> <a class="code" href="a00032.htm#gaa924f43cd62016e5e6a8500336add06a" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...)
<a name="l06734"></a>06734     {
<a name="l06735"></a>06735     <span class="keywordflow">if</span> (!format) <span class="keywordflow">return</span> 0;
<a name="l06736"></a>06736 
<a name="l06737"></a>06737     <span class="keywordtype">bool</span> msgbox = (*format == <span class="charliteral">&#39;\a&#39;</span>)? (format++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l06738"></a>06738     <span class="keywordtype">bool</span> print  = (*format == <span class="charliteral">&#39;\f&#39;</span>)? (format++, <span class="keyword">true</span>) : <span class="keyword">false</span>;
<a name="l06739"></a>06739 
<a name="l06740"></a>06740     <span class="keywordtype">char</span> str[<a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06741"></a>06741 
<a name="l06742"></a>06742     va_list arg; va_start (arg, format);
<a name="l06743"></a>06743     <span class="keywordtype">int</span> n = _vsnprintf_s (str, <span class="keyword">sizeof</span> (str) - 1 _TX_TRUNCATE, format, arg);
<a name="l06744"></a>06744     va_end (arg);
<a name="l06745"></a>06745 
<a name="l06746"></a>06746     OutputDebugString (str);
<a name="l06747"></a>06747 
<a name="l06748"></a>06748     <span class="keywordflow">if</span> (print)
<a name="l06749"></a>06749         fprintf (stderr, <span class="stringliteral">&quot;%s&quot;</span>, str);
<a name="l06750"></a>06750 
<a name="l06751"></a>06751     <span class="keywordflow">if</span> (msgbox)
<a name="l06752"></a>06752         <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (str, <span class="stringliteral">&quot;Оказывается, что&quot;</span>, MB_ICONEXCLAMATION | MB_TOPMOST);
<a name="l06753"></a>06753 
<a name="l06754"></a>06754     <span class="keywordflow">return</span> n;
<a name="l06755"></a>06755     }
<a name="l06756"></a>06756 
<a name="l06757"></a>06757 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06758"></a>06758 
<a name="l06759"></a>06759 <span class="keywordtype">unsigned</span> <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="keyword">const</span> <span class="keywordtype">char</span>* text, <span class="keyword">const</span> <span class="keywordtype">char</span>* header, <span class="keywordtype">unsigned</span> flags <span class="comment">/*= 0*/</span>)
<a name="l06760"></a>06760     {
<a name="l06761"></a>06761     <span class="keyword">static</span> <span class="keywordtype">wchar_t</span> textW   [<a class="code" href="a00034.htm#gaa7273b2f613970c283053c5d9136addd" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BIGBUFSIZE</a> * <span class="keyword">sizeof</span> (wchar_t)] = L<span class="stringliteral">&quot;[NULL text]&quot;</span>;
<a name="l06762"></a>06762     <span class="keyword">static</span> <span class="keywordtype">wchar_t</span> headerW [_TX_BUFSIZE    * <span class="keyword">sizeof</span> (wchar_t)] = L<span class="stringliteral">&quot;[NULL header]&quot;</span>;
<a name="l06763"></a>06763 
<a name="l06764"></a>06764     <span class="keywordflow">if</span> (text)   MultiByteToWideChar (_TX_CP, 0, text,   -1, textW,   <a class="code" href="a00032.htm#ga3379d227f91f891ac97d068ab90ee871">SIZEARR</a> (textW))   || memset (textW,   0, <span class="keyword">sizeof</span> (textW));
<a name="l06765"></a>06765     <span class="keywordflow">if</span> (header) MultiByteToWideChar (_TX_CP, 0, header, -1, headerW, <a class="code" href="a00032.htm#ga3379d227f91f891ac97d068ab90ee871">SIZEARR</a> (headerW)) || memset (headerW, 0, <span class="keyword">sizeof</span> (headerW));
<a name="l06766"></a>06766 
<a name="l06767"></a>06767     HWND wnd = _txCanvas_Window;
<a name="l06768"></a>06768     <span class="keywordflow">return</span> MessageBoxW ((wnd? wnd : Win32::GetConsoleWindow()), textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
<a name="l06769"></a>06769     }
<a name="l06770"></a>06770 
<a name="l06771"></a>06771 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06772"></a>06772 
<a name="l06773"></a>06773 <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#gab8f6180cff1fe90819e3bbb541a90508" title="Возвращает имя исполняемого файла или изначальный заголовок окна TXLib.">txGetModuleFileName</a> (<span class="keywordtype">bool</span> fileNameOnly <span class="comment">/*= true*/</span>)
<a name="l06774"></a>06774     {
<a name="l06775"></a>06775     <span class="keyword">static</span> <span class="keywordtype">char</span> name[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06776"></a>06776 
<a name="l06777"></a>06777     <span class="keywordflow">if</span> (!*name) GetModuleFileName (NULL, name, <span class="keyword">sizeof</span> (name) - 1) || strcpy_s (name, <span class="stringliteral">&quot;&quot;</span>);
<a name="l06778"></a>06778     <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (*name);
<a name="l06779"></a>06779 
<a name="l06780"></a>06780     <span class="keywordflow">if</span> (fileNameOnly) <span class="keywordflow">return</span> name;
<a name="l06781"></a>06781 
<a name="l06782"></a>06782     <span class="keyword">static</span> <span class="keywordtype">char</span> fullName[MAX_PATH] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06783"></a>06783     strncpy_s (fullName, name, <span class="keyword">sizeof</span> (fullName) - 1);
<a name="l06784"></a>06784 
<a name="l06785"></a>06785     <span class="keywordtype">char</span>* title = strrchr (fullName, <span class="charliteral">&#39;\\&#39;</span>); <span class="keywordflow">if</span> (!title) title = fullName;
<a name="l06786"></a>06786     <span class="keywordtype">char</span>* ext   = strrchr (fullName,  <span class="charliteral">&#39;.&#39;</span>); <span class="keywordflow">if</span> (!ext)   ext   = fullName + strlen (fullName);
<a name="l06787"></a>06787 
<a name="l06788"></a>06788     <span class="keywordtype">size_t</span> sz = <span class="keyword">sizeof</span> (fullName) - (ext - fullName) - 1;
<a name="l06789"></a>06789 
<a name="l06790"></a>06790 <span class="preprocessor">    #if defined (_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES) &amp;&amp; _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES</span>
<a name="l06791"></a>06791 <span class="preprocessor"></span>    strncpy_s (ext, sz, <span class="stringliteral">&quot; - TXLib&quot;</span>, sz);
<a name="l06792"></a>06792 <span class="preprocessor">    #else</span>
<a name="l06793"></a>06793 <span class="preprocessor"></span>    strncpy   (ext,     <span class="stringliteral">&quot; - TXLib&quot;</span>, sz);
<a name="l06794"></a>06794 <span class="preprocessor">    #endif</span>
<a name="l06795"></a>06795 <span class="preprocessor"></span>
<a name="l06796"></a>06796     <span class="keywordflow">return</span> title + 1;
<a name="l06797"></a>06797     }
<a name="l06798"></a>06798 
<a name="l06799"></a>06799 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06800"></a>06800 
<a name="l06801"></a>06801 <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (<span class="keywordtype">unsigned</span> flags, <span class="keyword">const</span> <span class="keywordtype">char</span> title[], <span class="keyword">const</span> <span class="keywordtype">char</span> format[], ...)
<a name="l06802"></a>06802     {
<a name="l06803"></a>06803 $1  _TX_IF_ARGUMENT_FAILED (format) return false;
<a name="l06804"></a>06804 
<a name="l06805"></a>06805 $   va_list arg; va_start (arg, format);
<a name="l06806"></a>06806 $   <span class="keywordtype">bool</span> ok = true;
<a name="l06807"></a>06807 
<a name="l06808"></a>06808     <span class="preprocessor">#if defined (_WIN32_IE) &amp;&amp; (_WIN32_IE &gt;= 0x0500)</span>
<a name="l06809"></a>06809 <span class="preprocessor"></span>
<a name="l06810"></a>06810 $   NOTIFYICONDATA nid = { <span class="keyword">sizeof</span> (nid) };
<a name="l06811"></a>06811 
<a name="l06812"></a>06812 $   nid.uFlags = NIF_ICON | NIF_TIP | NIF_INFO;
<a name="l06813"></a>06813 $   nid.hWnd   = NULL;
<a name="l06814"></a>06814 $   nid.uID    = 1;
<a name="l06815"></a>06815 $   nid.hIcon  = _txCreateTXIcon (16); <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (nid.hIcon);
<a name="l06816"></a>06816 $   strncpy_s    (nid.szTip, <span class="stringliteral">&quot;TXLib Information&quot;</span>, sizeof (nid.szTip));
<a name="l06817"></a>06817 $   strncpy_s    (nid.szInfoTitle, (title? title : <span class="stringliteral">&quot;TXLib сообщает&quot;</span>), sizeof (nid.szInfoTitle) - 1);
<a name="l06818"></a>06818 $   _vsnprintf_s (nid.szInfo, sizeof (nid.szInfo) _TX_TRUNCATE, format, arg);
<a name="l06819"></a>06819 $   nid.dwInfoFlags = flags;
<a name="l06820"></a>06820 
<a name="l06821"></a>06821 $   <a class="code" href="a00032.htm#gaa924f43cd62016e5e6a8500336add06a" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> <span class="stringliteral">&quot; - Icon notification: %s: %s\n&quot;</span>, nid.szInfoTitle, nid.szInfo);
<a name="l06822"></a>06822 
<a name="l06823"></a>06823 $   ok &amp;= !!Shell_NotifyIcon (NIM_ADD,    (::NOTIFYICONDATA*) &amp;nid);
<a name="l06824"></a>06824 $   ok &amp;= !!Shell_NotifyIcon (NIM_MODIFY, (::NOTIFYICONDATA*) &amp;nid);
<a name="l06825"></a>06825 
<a name="l06826"></a>06826 $   <span class="keywordflow">if</span> (nid.hIcon) DestroyIcon (nid.hIcon) asserted;
<a name="l06827"></a>06827 
<a name="l06828"></a>06828     <span class="preprocessor">#else</span>
<a name="l06829"></a>06829 <span class="preprocessor"></span>
<a name="l06830"></a>06830 $   <span class="keywordtype">char</span> nid_szInfo[<a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>] = <span class="stringliteral">&quot;&quot;</span>;
<a name="l06831"></a>06831 $   _vsnprintf_s (nid_szInfo, <span class="keyword">sizeof</span> (nid_szInfo) _TX_TRUNCATE, format, arg);
<a name="l06832"></a>06832 $   <a class="code" href="a00032.htm#gaa924f43cd62016e5e6a8500336add06a" title="Выводит сообщение в отладчике.">txOutputDebugPrintf</a> (<a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a> <span class="stringliteral">&quot; - Icon notification (NOT displayed): %s: %s\n&quot;</span>, title, nid_szInfo);
<a name="l06833"></a>06833 $   ok = <span class="keyword">false</span>;
<a name="l06834"></a>06834 
<a name="l06835"></a>06835 $   (void)flags; (void)title;
<a name="l06836"></a>06836 
<a name="l06837"></a>06837 <span class="preprocessor">    #endif</span>
<a name="l06838"></a>06838 <span class="preprocessor"></span>
<a name="l06839"></a>06839 $   va_end (arg);
<a name="l06840"></a>06840 $   <span class="keywordflow">return</span> ok;
<a name="l06841"></a>06841     }
<a name="l06842"></a>06842 
<a name="l06844"></a>06844 <span class="comment">//}</span>
<a name="l06845"></a>06845 <span class="comment">//=================================================================================================================</span>
<a name="l06846"></a>06846 
<a name="l06847"></a>06847 <span class="comment">//=================================================================================================================</span>
<a name="l06848"></a>06848 <span class="comment">//{          TXLib API implementation</span>
<a name="l06849"></a>06849 <span class="comment">//           Реализация TXLib API</span>
<a name="l06850"></a>06850 <span class="comment">//=================================================================================================================</span>
<a name="l06851"></a>06851 
<a name="l06852"></a>06852 <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="a00029.htm#ga732d4db1467f11a4b569b9d6f2383749" title="Возвращает строку с информацией о текущей версии библиотеки.">txVersion</a>()
<a name="l06853"></a>06853     {
<a name="l06854"></a>06854     <span class="keywordflow">return</span> <a class="code" href="a00034.htm#gaddc6398e255e44934e56e22f91874d19" title="Текущая версия библиотеки.">_TX_VERSION</a>;
<a name="l06855"></a>06855     }
<a name="l06856"></a>06856 
<a name="l06857"></a>06857 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06858"></a>06858 
<a name="l06859"></a>06859 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#gacd2416cd6b89106ab6700d0c75922bee" title="Возвращает номер версии библиотеки.">txVersionNumber</a>()
<a name="l06860"></a>06860     {
<a name="l06861"></a>06861     <span class="keywordflow">return</span> <a class="code" href="a00034.htm#ga6b76c63cd895c2be63ac8e690028623b" title="Версия библиотеки в целочисленном формате.">_TX_VER</a>;
<a name="l06862"></a>06862     }
<a name="l06863"></a>06863 
<a name="l06864"></a>06864 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06865"></a>06865 
<a name="l06866"></a>06866 POINT <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>()
<a name="l06867"></a>06867     {
<a name="l06868"></a>06868 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (POINT);
<a name="l06869"></a>06869 
<a name="l06870"></a>06870 $   RECT r = {0};
<a name="l06871"></a>06871 $   GetClientRect (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;r);
<a name="l06872"></a>06872 
<a name="l06873"></a>06873 $   POINT size = { r.right - r.left, r.bottom - r.top };
<a name="l06874"></a>06874 $   <span class="keywordflow">return</span> size;
<a name="l06875"></a>06875     }
<a name="l06876"></a>06876 
<a name="l06877"></a>06877 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06878"></a>06878 
<a name="l06879"></a>06879 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaed186909e8de1f9a6e5f78c362d9b607" title="Возвращает ширину окна рисования.">txGetExtentX</a>()
<a name="l06880"></a>06880     {
<a name="l06881"></a>06881 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>().x;
<a name="l06882"></a>06882     }
<a name="l06883"></a>06883 
<a name="l06884"></a>06884 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06885"></a>06885 
<a name="l06886"></a>06886 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga1838cd6a438d4bea5f26bfa47a103a0d" title="Возвращает высоту окна рисования.">txGetExtentY</a>()
<a name="l06887"></a>06887     {
<a name="l06888"></a>06888 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>().y;
<a name="l06889"></a>06889     }
<a name="l06890"></a>06890 
<a name="l06891"></a>06891 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06892"></a>06892 
<a name="l06893"></a>06893 <span class="keyword">inline</span> HDC&amp; <a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>()
<a name="l06894"></a>06894     {
<a name="l06895"></a>06895 $1  <span class="keywordflow">return</span> _txCanvas_BackBuf[0];
<a name="l06896"></a>06896     }
<a name="l06897"></a>06897 
<a name="l06898"></a>06898 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06899"></a>06899 
<a name="l06900"></a>06900 <span class="keyword">inline</span> HWND <a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()
<a name="l06901"></a>06901     {
<a name="l06902"></a>06902 $1  <span class="keywordflow">return</span> _txCanvas_Window;
<a name="l06903"></a>06903     }
<a name="l06904"></a>06904 
<a name="l06905"></a>06905 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06906"></a>06906 
<a name="l06907"></a>06907 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gac9d8435ced05ddc5c29a1a5c9f58f752" title="Уничтожает окно TXLib.">txDestroyWindow</a>()
<a name="l06908"></a>06908     {
<a name="l06909"></a>06909 $1  <span class="keywordflow">if</span> (!<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>()) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06910"></a>06910 
<a name="l06911"></a>06911 $   <span class="keywordflow">if</span> (SendNotifyMessage (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), (_txMain? WM_CLOSE : WM_DESTROY), 0, 0) == 0) <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06912"></a>06912 
<a name="l06913"></a>06913 $   <span class="keywordflow">if</span> (_txMain)
<a name="l06914"></a>06914         {
<a name="l06915"></a>06915 $       <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_WARNING, NULL, <span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;Очень, очень плохо завершать программу через txDestroyWindow().    \n\n&quot;</span>
<a name="l06916"></a>06916                                                <span class="stringliteral">&quot;Возвращайтесь через main(), там вам будут рады.\n&quot;</span>);
<a name="l06917"></a>06917 $       Sleep (_TX_TIMEOUT);
<a name="l06918"></a>06918         }
<a name="l06919"></a>06919 
<a name="l06920"></a>06920 $   _txWaitFor (!_txCanvas_Window, _TX_TIMEOUT);
<a name="l06921"></a>06921 
<a name="l06922"></a>06922 $   <span class="keywordflow">return</span> _txCanvas_Window == NULL;
<a name="l06923"></a>06923     }
<a name="l06924"></a>06924 
<a name="l06925"></a>06925 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06926"></a>06926 
<a name="l06927"></a>06927 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga04e174a1e8d269b96b6e5a3e30d6dc1e" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (COLORREF color, <span class="keywordtype">double</span> thickness <span class="comment">/*= 1*/</span>)
<a name="l06928"></a>06928     {
<a name="l06929"></a>06929 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06930"></a>06930 
<a name="l06931"></a>06931 $   <span class="keywordflow">return</span> _txBuffer_Select (Win32::CreatePen ((color == <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>? PS_NULL : PS_SOLID), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (thickness), color))
<a name="l06932"></a>06932             &amp;&amp;
<a name="l06933"></a>06933             <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a>          ((Win32::SetTextColor (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), color)));
<a name="l06934"></a>06934     }
<a name="l06935"></a>06935 
<a name="l06936"></a>06936 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06937"></a>06937 
<a name="l06938"></a>06938 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga977c584db1ecfba20898615a948ab675" title="Устанавливает текущий цвет линий и текста.">txColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l06939"></a>06939     {
<a name="l06940"></a>06940 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l06941"></a>06941 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l06942"></a>06942 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l06943"></a>06943 
<a name="l06944"></a>06944 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga04e174a1e8d269b96b6e5a3e30d6dc1e" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a> (<a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (red * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (green * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (blue * 255)));
<a name="l06945"></a>06945     }
<a name="l06946"></a>06946 
<a name="l06947"></a>06947 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06948"></a>06948 
<a name="l06949"></a>06949 COLORREF <a class="code" href="a00029.htm#ga4894075399ec8e8747177f90c15fb35d" title="Возвращает текущий цвет линий и текста.">txGetColor</a>()
<a name="l06950"></a>06950     {
<a name="l06951"></a>06951 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06952"></a>06952 
<a name="l06953"></a>06953 $   HGDIOBJ obj = <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetCurrentObject (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), OBJ_PEN)));
<a name="l06954"></a>06954 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (obj); <span class="keywordflow">if</span> (!obj) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06955"></a>06955 
<a name="l06956"></a>06956 $   <span class="keyword">union </span>{ EXTLOGPEN extLogPen; LOGPEN LogPen; } buf = {{0}};
<a name="l06957"></a>06957 
<a name="l06958"></a>06958 $   <span class="keywordtype">int</span> size = Win32::GetObject (obj, 0, NULL);
<a name="l06959"></a>06959 $   Win32::GetObject (obj, <span class="keyword">sizeof</span> (buf), &amp;buf) asserted;
<a name="l06960"></a>06960 
<a name="l06961"></a>06961 $   return (size == sizeof (LOGPEN))? buf.LogPen.lopnColor : buf.extLogPen.elpColor;
<a name="l06962"></a>06962     }
<a name="l06963"></a>06963 
<a name="l06964"></a>06964 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06965"></a>06965 
<a name="l06966"></a>06966 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (COLORREF color)
<a name="l06967"></a>06967     {
<a name="l06968"></a>06968 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l06969"></a>06969 
<a name="l06970"></a>06970 $   <span class="keywordflow">return</span> _txBuffer_Select ((color == <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>)? Win32::GetStockObject   (HOLLOW_BRUSH) :
<a name="l06971"></a>06971                                                         Win32::CreateSolidBrush (color));
<a name="l06972"></a>06972     }
<a name="l06973"></a>06973 
<a name="l06974"></a>06974 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06975"></a>06975 
<a name="l06976"></a>06976 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga385a6f84e8f1447a33047fa0f3be972b" title="Устанавливает текущий цвет заполнения фигур.">txFillColor</a> (<span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l06977"></a>06977     {
<a name="l06978"></a>06978 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l06979"></a>06979 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l06980"></a>06980 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l06981"></a>06981 
<a name="l06982"></a>06982 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (red * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (green * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (blue * 255)));
<a name="l06983"></a>06983     }
<a name="l06984"></a>06984 
<a name="l06985"></a>06985 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l06986"></a>06986 
<a name="l06987"></a>06987 COLORREF <a class="code" href="a00029.htm#ga1a65fa9ddfd07bda8ab3e95873991b76" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a>()
<a name="l06988"></a>06988     {
<a name="l06989"></a>06989 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06990"></a>06990 
<a name="l06991"></a>06991 $   HGDIOBJ obj = <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetCurrentObject (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), OBJ_BRUSH)));
<a name="l06992"></a>06992 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (obj); <span class="keywordflow">if</span> (!obj) <span class="keywordflow">return</span> CLR_INVALID;
<a name="l06993"></a>06993 
<a name="l06994"></a>06994 $   LOGBRUSH buf = {0};
<a name="l06995"></a>06995 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetObject (obj, <span class="keyword">sizeof</span> (buf), &amp;buf))) asserted;
<a name="l06996"></a>06996 
<a name="l06997"></a>06997 $   return buf.lbColor;
<a name="l06998"></a>06998     }
<a name="l06999"></a>06999 
<a name="l07000"></a>07000 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07001"></a>07001 
<a name="l07002"></a>07002 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3ddd148ec8af2d1f722b398ee7e17a71" title="Устанавливает режим взаимодействия цветов при рисовании.">txSetROP2</a> (<span class="keywordtype">int</span> mode <span class="comment">/*= R2_COPYPEN*/</span>)
<a name="l07003"></a>07003     {
<a name="l07004"></a>07004 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07005"></a>07005 
<a name="l07006"></a>07006 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::SetROP2 (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), mode)));
<a name="l07007"></a>07007     }
<a name="l07008"></a>07008 
<a name="l07009"></a>07009 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07010"></a>07010 
<a name="l07011"></a>07011 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2a3940b99d02c630364d4b74e7d08a23" title="Стирает холст текущим цветом заполнения.">txClear</a>()
<a name="l07012"></a>07012     {
<a name="l07013"></a>07013 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07014"></a>07014 
<a name="l07015"></a>07015 $   POINT size = <a class="code" href="a00029.htm#ga69be92455ac555cb03470cb4ef4ac67c" title="Возвращает размер окна рисования в виде структуры POINT.">txGetExtent</a>();
<a name="l07016"></a>07016 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::PatBlt (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), 0, 0, size.x, size.y, PATCOPY)));
<a name="l07017"></a>07017     }
<a name="l07018"></a>07018 
<a name="l07019"></a>07019 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07020"></a>07020 
<a name="l07021"></a>07021 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad314ddd4f6afa0bb727c4b0cd8207603" title="Рисует пиксель (точку на экране).">txSetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, COLORREF color)
<a name="l07022"></a>07022     {
<a name="l07023"></a>07023 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07024"></a>07024 
<a name="l07025"></a>07025 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::SetPixel (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y), color)));
<a name="l07026"></a>07026 
<a name="l07027"></a>07027 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l07028"></a>07028     }
<a name="l07029"></a>07029 
<a name="l07030"></a>07030 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07031"></a>07031 
<a name="l07032"></a>07032 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3275b9e7d36b0aeefd60afea65150469" title="Рисует пиксель (точку на экране).">txPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue)
<a name="l07033"></a>07033     {
<a name="l07034"></a>07034 $1  <span class="keywordflow">if</span> (red   &gt; 1) red   = 1; <span class="keywordflow">if</span> (red   &lt; 0) red   = 0;
<a name="l07035"></a>07035 $   <span class="keywordflow">if</span> (green &gt; 1) green = 1; <span class="keywordflow">if</span> (green &lt; 0) green = 0;
<a name="l07036"></a>07036 $   <span class="keywordflow">if</span> (blue  &gt; 1) blue  = 1; <span class="keywordflow">if</span> (blue  &lt; 0) blue  = 0;
<a name="l07037"></a>07037 
<a name="l07038"></a>07038 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#gad314ddd4f6afa0bb727c4b0cd8207603" title="Рисует пиксель (точку на экране).">txSetPixel</a> (x, y, <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (red * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (green * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (blue * 255)));
<a name="l07039"></a>07039     }
<a name="l07040"></a>07040 
<a name="l07041"></a>07041 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07042"></a>07042 
<a name="l07043"></a>07043 <span class="keyword">inline</span> COLORREF <a class="code" href="a00029.htm#ga3d6ff7a642714b236c3837f977795396" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y)
<a name="l07044"></a>07044     {
<a name="l07045"></a>07045 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> CLR_INVALID;
<a name="l07046"></a>07046 
<a name="l07047"></a>07047 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetPixel (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y))));
<a name="l07048"></a>07048     }
<a name="l07049"></a>07049 
<a name="l07050"></a>07050 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07051"></a>07051 
<a name="l07052"></a>07052 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1)
<a name="l07053"></a>07053     {
<a name="l07054"></a>07054 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07055"></a>07055 
<a name="l07056"></a>07056 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::MoveToEx (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), NULL))) asserted;
<a name="l07057"></a>07057 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::LineTo   (txDC(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1)      ))) asserted;
<a name="l07058"></a>07058 
<a name="l07059"></a>07059 $   return true;
<a name="l07060"></a>07060     }
<a name="l07061"></a>07061 
<a name="l07062"></a>07062 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07063"></a>07063 
<a name="l07064"></a>07064 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga56fe553987cace1e1572b2e64ea46ebc" title="Рисует прямоугольник.">txRectangle</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1)
<a name="l07065"></a>07065     {
<a name="l07066"></a>07066 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07067"></a>07067 
<a name="l07068"></a>07068 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::Rectangle (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1)))) asserted;
<a name="l07069"></a>07069 
<a name="l07070"></a>07070 $   return true;
<a name="l07071"></a>07071     }
<a name="l07072"></a>07072 
<a name="l07073"></a>07073 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07074"></a>07074 
<a name="l07075"></a>07075 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4e872a3d71ac242bd40d614b9c03f86e" title="Рисует ломаную линию или многоугольник.">txPolygon</a> (const POINT points[], <span class="keywordtype">int</span> numPoints)
<a name="l07076"></a>07076     {
<a name="l07077"></a>07077 $1  _TX_IF_TXWINDOW_FAILED          <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07078"></a>07078 $   _TX_IF_ARGUMENT_FAILED (points) return false;
<a name="l07079"></a>07079 
<a name="l07080"></a>07080 $   return <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Polygon (txDC(), points, numPoints)));
<a name="l07081"></a>07081     }
<a name="l07082"></a>07082 
<a name="l07083"></a>07083 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07084"></a>07084 
<a name="l07085"></a>07085 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2bd0c5c1f84629e673601464e20ddc1f" title="Рисует эллипс.">txEllipse</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1)
<a name="l07086"></a>07086     {
<a name="l07087"></a>07087 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07088"></a>07088 
<a name="l07089"></a>07089 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::Ellipse (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1)))) asserted;
<a name="l07090"></a>07090 
<a name="l07091"></a>07091 $   return true;
<a name="l07092"></a>07092     }
<a name="l07093"></a>07093 
<a name="l07094"></a>07094 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07095"></a>07095 
<a name="l07096"></a>07096 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> r)
<a name="l07097"></a>07097     {
<a name="l07098"></a>07098 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga2bd0c5c1f84629e673601464e20ddc1f" title="Рисует эллипс.">txEllipse</a> (x-r, y-r, x+r, y+r);
<a name="l07099"></a>07099     }
<a name="l07100"></a>07100 
<a name="l07101"></a>07101 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07102"></a>07102 
<a name="l07103"></a>07103 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga7e3759e5f9a708f87ac77ccc1419691e" title="Рисует дугу эллипса.">txArc</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle)
<a name="l07104"></a>07104     {
<a name="l07105"></a>07105 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07106"></a>07106 
<a name="l07107"></a>07107 $   POINT center = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((x0 + x1) /2), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((y0 + y1) /2) };
<a name="l07108"></a>07108 
<a name="l07109"></a>07109 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l07110"></a>07110            end   = (startAngle + totalAngle) * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l07111"></a>07111 
<a name="l07112"></a>07112 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Arc (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1),
<a name="l07113"></a>07113                                          <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (start)), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (start)),
<a name="l07114"></a>07114                                          <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (end)),   <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (end)))));
<a name="l07115"></a>07115     }
<a name="l07116"></a>07116 
<a name="l07117"></a>07117 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07118"></a>07118 
<a name="l07119"></a>07119 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga100795a6e30f3ed01f04e4d1b01bd918" title="Рисует сектор эллипса.">txPie</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle)
<a name="l07120"></a>07120     {
<a name="l07121"></a>07121 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07122"></a>07122 
<a name="l07123"></a>07123 $   POINT center = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((x0 + x1) /2), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((y0 + y1) /2) };
<a name="l07124"></a>07124 
<a name="l07125"></a>07125 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l07126"></a>07126            end   = (startAngle + totalAngle) * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l07127"></a>07127 
<a name="l07128"></a>07128 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Pie (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1),
<a name="l07129"></a>07129                                          <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (start)), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (start)),
<a name="l07130"></a>07130                                          <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (end)),   <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (end)))));
<a name="l07131"></a>07131     }
<a name="l07132"></a>07132 
<a name="l07133"></a>07133 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07134"></a>07134 
<a name="l07135"></a>07135 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa47cb24ee215e0d2fcb0cf9bcf0b8723" title="Рисует хорду эллипса.">txChord</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, <span class="keywordtype">double</span> startAngle, <span class="keywordtype">double</span> totalAngle)
<a name="l07136"></a>07136     {
<a name="l07137"></a>07137 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07138"></a>07138 
<a name="l07139"></a>07139 $   POINT center = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((x0 + x1) /2), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((y0 + y1) /2) };
<a name="l07140"></a>07140 
<a name="l07141"></a>07141 $   <span class="keywordtype">double</span> start =  startAngle               * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180,
<a name="l07142"></a>07142            end   = (startAngle + totalAngle) * <a class="code" href="a00032.htm#gaf59817ad656dcbb3f9baebeb4d7f82f7" title="Число Пи">txPI</a>/180;
<a name="l07143"></a>07143 
<a name="l07144"></a>07144 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::Chord (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1),
<a name="l07145"></a>07145                                            <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (start)), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (start)),
<a name="l07146"></a>07146                                            <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.x + 1E3*cos (end)),   <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (center.y - 1E3*sin (end)))));
<a name="l07147"></a>07147     }
<a name="l07148"></a>07148 
<a name="l07149"></a>07149 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07150"></a>07150 
<a name="l07151"></a>07151 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga16b68f33ba5a925a58fce0abc99d7213" title="Заливает произвольный контур текущим цветом заполнения.">txFloodFill</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y,
<a name="l07152"></a>07152                   COLORREF color <span class="comment">/*= TX_TRANSPARENT*/</span>, DWORD mode <span class="comment">/*= FLOODFILLSURFACE*/</span>)
<a name="l07153"></a>07153     {
<a name="l07154"></a>07154 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07155"></a>07155 
<a name="l07156"></a>07156 $   <span class="keywordflow">if</span> (color == <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>) color = <a class="code" href="a00029.htm#ga3d6ff7a642714b236c3837f977795396" title="Возвращает текущий цвет точки (пикселя) на экране.">txGetPixel</a> (x, y);
<a name="l07157"></a>07157 
<a name="l07158"></a>07158 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::ExtFloodFill (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y), color, mode)));
<a name="l07159"></a>07159     }
<a name="l07160"></a>07160 
<a name="l07161"></a>07161 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07162"></a>07162 
<a name="l07163"></a>07163 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga4eacb78833e54f44243f60ded9fdaf64" title="Рисует текст.">txTextOut</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keyword">const</span> <span class="keywordtype">char</span> text[])
<a name="l07164"></a>07164     {
<a name="l07165"></a>07165 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07166"></a>07166 $   _TX_IF_ARGUMENT_FAILED (text) return false;
<a name="l07167"></a>07167 
<a name="l07168"></a>07168 $   <span class="keywordtype">int</span> len = (<span class="keywordtype">int</span>) strlen (text);
<a name="l07169"></a>07169 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::TextOut (txDC(), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y), text, len))) asserted;
<a name="l07170"></a>07170 
<a name="l07171"></a>07171 $   SIZE size = {0};
<a name="l07172"></a>07172 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetTextExtentPoint32 (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), text, len, &amp;size))) asserted;
<a name="l07173"></a>07173 
<a name="l07174"></a>07174 $   RECT r = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x + size.cx), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y + size.cy) };
<a name="l07175"></a>07175 $   InvalidateRect (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;r, <span class="keyword">false</span>) asserted;
<a name="l07176"></a>07176 
<a name="l07177"></a>07177 $   return true;
<a name="l07178"></a>07178     }
<a name="l07179"></a>07179 
<a name="l07180"></a>07180 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07181"></a>07181 
<a name="l07182"></a>07182 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gae5f1c5f63d862d72883203213786d9f0" title="Рисует текст, размещенный в прямоугольной области.">txDrawText</a> (<span class="keywordtype">double</span> x0, <span class="keywordtype">double</span> y0, <span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> y1, const <span class="keywordtype">char</span> text[],
<a name="l07183"></a>07183                  <span class="keywordtype">unsigned</span> format <span class="comment">/*= DT_CENTER | DT_VCENTER | DT_WORDBREAK | DT_WORD_ELLIPSIS*/</span>)
<a name="l07184"></a>07184 {
<a name="l07185"></a>07185 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07186"></a>07186 $   _TX_IF_ARGUMENT_FAILED (text) return false;
<a name="l07187"></a>07187 
<a name="l07188"></a>07188 $   RECT r = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y0), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (x1), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (y1) };
<a name="l07189"></a>07189 
<a name="l07190"></a>07190 $   <span class="keywordflow">if</span> (!strchr (text, <span class="charliteral">&#39;\n&#39;</span>)) format |= DT_SINGLELINE;
<a name="l07191"></a>07191 
<a name="l07192"></a>07192 $   <span class="keywordtype">unsigned</span> prev = <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (TA_LEFT | TA_TOP | TA_NOUPDATECP);
<a name="l07193"></a>07193 
<a name="l07194"></a>07194     <span class="keywordflow">if</span> (Win32::DrawText) { $ <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::DrawText (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), text, -1, &amp;r, format))) asserted; }
<a name="l07195"></a>07195 
<a name="l07196"></a>07196 $   <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (prev);
<a name="l07197"></a>07197 
<a name="l07198"></a>07198 $   return true;
<a name="l07199"></a>07199 }
<a name="l07200"></a>07200 
<a name="l07201"></a>07201 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07202"></a>07202 
<a name="l07203"></a>07203 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga9290f4d78a1f2dc5db7892cabe9a2abc" title="Выбирает текущий шрифт.">txSelectFont</a> (const <span class="keywordtype">char</span> name[], <span class="keywordtype">double</span> sizeY,
<a name="l07204"></a>07204                    <span class="keywordtype">double</span> sizeX     <span class="comment">/*= -1*/</span>,
<a name="l07205"></a>07205                    <span class="keywordtype">int</span>    bold      <span class="comment">/*= FW_DONTCARE*/</span>,
<a name="l07206"></a>07206                    <span class="keywordtype">bool</span>   italic    <span class="comment">/*= false*/</span>,
<a name="l07207"></a>07207                    <span class="keywordtype">bool</span>   underline <span class="comment">/*= false*/</span>,
<a name="l07208"></a>07208                    <span class="keywordtype">bool</span>   strikeout <span class="comment">/*= false*/</span>,
<a name="l07209"></a>07209                    <span class="keywordtype">double</span> angle     <span class="comment">/*= 0*/</span>)
<a name="l07210"></a>07210     {
<a name="l07211"></a>07211 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07212"></a>07212 $   _TX_IF_ARGUMENT_FAILED (name) return false;
<a name="l07213"></a>07213 
<a name="l07214"></a>07214 $   _txBuffer_Select (<a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (name)?
<a name="l07215"></a>07215                           Win32::CreateFont (<a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeY), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> ((sizeX &gt;= 0)? sizeX : sizeY/3),
<a name="l07216"></a>07216                                              <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (angle*10), 0, bold, italic, underline, strikeout,
<a name="l07217"></a>07217                                              RUSSIAN_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
<a name="l07218"></a>07218                                              DEFAULT_QUALITY, FIXED_PITCH, name)
<a name="l07219"></a>07219                           :
<a name="l07220"></a>07220                           Win32::GetStockObject (SYSTEM_FIXED_FONT));
<a name="l07221"></a>07221 $   return true;
<a name="l07222"></a>07222     }
<a name="l07223"></a>07223 
<a name="l07224"></a>07224 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07225"></a>07225 
<a name="l07226"></a>07226 SIZE <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (const <span class="keywordtype">char</span> text[])
<a name="l07227"></a>07227     {
<a name="l07228"></a>07228 $1  SIZE size = {0};
<a name="l07229"></a>07229 
<a name="l07230"></a>07230 $   _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> size;
<a name="l07231"></a>07231 $   _TX_IF_ARGUMENT_FAILED (text) return size;
<a name="l07232"></a>07232 
<a name="l07233"></a>07233 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::GetTextExtentPoint32 (txDC(), text, (<span class="keywordtype">int</span>) strlen (text), &amp;size))) asserted;
<a name="l07234"></a>07234 
<a name="l07235"></a>07235 $   return size;
<a name="l07236"></a>07236     }
<a name="l07237"></a>07237 
<a name="l07238"></a>07238 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07239"></a>07239 
<a name="l07240"></a>07240 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaad385937fb3526c8f4054ae288d285c6" title="Вычисляет ширину текстовой надписи.">txGetTextExtentX</a> (const <span class="keywordtype">char</span> text[])
<a name="l07241"></a>07241     {
<a name="l07242"></a>07242 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (text) .cx;
<a name="l07243"></a>07243     }
<a name="l07244"></a>07244 
<a name="l07245"></a>07245 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07246"></a>07246 
<a name="l07247"></a>07247 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga3a34e3baf660b310f6ca0d373f36c024" title="Вычисляет высоту текстовой надписи.">txGetTextExtentY</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> text[])
<a name="l07248"></a>07248     {
<a name="l07249"></a>07249 $1  <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga356c475609cf282310fc336821adf71f" title="Вычисляет размеры текстовой надписи.">txGetTextExtent</a> (text) .cy;
<a name="l07250"></a>07250     }
<a name="l07251"></a>07251 
<a name="l07252"></a>07252 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07253"></a>07253 
<a name="l07254"></a>07254 <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#ga5a3cef04fcf688a051a9eafd6c8338a7" title="Устанавливает текущее выравнивание текста.">txSetTextAlign</a> (<span class="keywordtype">unsigned</span> align <span class="comment">/*= TA_CENTER | TA_BASELINE*/</span>)
<a name="l07255"></a>07255     {
<a name="l07256"></a>07256 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> 0;
<a name="l07257"></a>07257 
<a name="l07258"></a>07258 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::SetTextAlign (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), align)));
<a name="l07259"></a>07259     }
<a name="l07260"></a>07260 
<a name="l07261"></a>07261 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07262"></a>07262 
<a name="l07263"></a>07263 LOGFONT* <a class="code" href="a00029.htm#gaf147a93f96fadeb7a6a0b6d7f1320bcb" title="Ищет шрифт по его названию.">txFontExist</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> name[])
<a name="l07264"></a>07264     {
<a name="l07265"></a>07265 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> NULL;
<a name="l07266"></a>07266 $   _TX_IF_ARGUMENT_FAILED (name) return NULL;
<a name="l07267"></a>07267 
<a name="l07268"></a>07268 $   static LOGFONT font = {0};
<a name="l07269"></a>07269 $   font.lfCharSet = DEFAULT_CHARSET;
<a name="l07270"></a>07270 $   strncpy_s (font.lfFaceName, name, sizeof (font.lfFaceName) - 1);
<a name="l07271"></a>07271 
<a name="l07272"></a>07272 $   <span class="keyword">struct </span>tools
<a name="l07273"></a>07273         {
<a name="l07274"></a>07274         <span class="keyword">static</span> <span class="keywordtype">int</span> CALLBACK enumFonts (<span class="keyword">const</span> LOGFONT* fnt, <span class="keyword">const</span> TEXTMETRIC*, DWORD, LPARAM data)
<a name="l07275"></a>07275             {
<a name="l07276"></a>07276 $           _TX_IF_ARGUMENT_FAILED (fnt)  return 0;
<a name="l07277"></a>07277 $           _TX_IF_ARGUMENT_FAILED (data) return 0;
<a name="l07278"></a>07278 
<a name="l07279"></a>07279             <span class="preprocessor">#ifndef __STRICT_ANSI__</span>
<a name="l07280"></a>07280 <span class="preprocessor"></span>$           <span class="keywordflow">return</span> _strnicmp (fnt-&gt;lfFaceName, ((LOGFONT*)data)-&gt;lfFaceName, LF_FACESIZE);
<a name="l07281"></a>07281 
<a name="l07282"></a>07282 <span class="preprocessor">            #else</span>
<a name="l07283"></a>07283 <span class="preprocessor"></span>$           <span class="keywordflow">return</span>  strncmp  (fnt-&gt;lfFaceName, ((LOGFONT*)data)-&gt;lfFaceName, LF_FACESIZE);
<a name="l07284"></a>07284 
<a name="l07285"></a>07285 <span class="preprocessor">            #endif</span>
<a name="l07286"></a>07286 <span class="preprocessor"></span>            }
<a name="l07287"></a>07287         };
<a name="l07288"></a>07288 
<a name="l07289"></a>07289 $   <span class="keywordflow">return</span> <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> ((Win32::EnumFontFamiliesEx (<a class="code" href="a00029.htm#ga37ac6a8a8899decc9e2979d7ccd11f67" title="Возвращает дескриптор контекста рисования холста">txDC</a>(), &amp;font, tools::enumFonts, (LPARAM) &amp;font, 0))) == 0? &amp;font : NULL;
<a name="l07290"></a>07290     }
<a name="l07291"></a>07291 
<a name="l07292"></a>07292 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07293"></a>07293 
<a name="l07294"></a>07294 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad4ee4d2a16f8f38412e0e7b1c380bf4d" title="Устанавливает текущий объект GDI.">txSelectObject</a> (HGDIOBJ obj)
<a name="l07295"></a>07295     {
<a name="l07296"></a>07296 $1  _TX_IF_TXWINDOW_FAILED       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07297"></a>07297 $   _TX_IF_ARGUMENT_FAILED (obj) return false;
<a name="l07298"></a>07298 
<a name="l07299"></a>07299 $   return _txBuffer_Select (obj);
<a name="l07300"></a>07300     }
<a name="l07301"></a>07301 
<a name="l07302"></a>07302 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07303"></a>07303 
<a name="l07304"></a>07304 HDC <a class="code" href="a00029.htm#ga2f1b4b81b2b9280bb58c2d79930e2a63" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (<span class="keywordtype">double</span> sizeX, <span class="keywordtype">double</span> sizeY, HBITMAP bitmap <span class="comment">/*= NULL*/</span>)
<a name="l07305"></a>07305     {
<a name="l07306"></a>07306 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> NULL;
<a name="l07307"></a>07307 
<a name="l07308"></a>07308 $   POINT size = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeX), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (sizeY) };
<a name="l07309"></a>07309 $   HDC dc = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;size, bitmap);
<a name="l07310"></a>07310 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (dc); <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> NULL;
<a name="l07311"></a>07311 
<a name="l07312"></a>07312 $   <span class="keywordflow">if</span> (!_txCanvas_UserDCs) <span class="keywordflow">return</span> dc;
<a name="l07313"></a>07313 
<a name="l07314"></a>07314 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l07315"></a>07315 $   _txCanvas_UserDCs-&gt;push_back (dc);
<a name="l07316"></a>07316 
<a name="l07317"></a>07317 $   <span class="keywordflow">if</span> (_txCanvas_UserDCs-&gt;size() &gt;= <a class="code" href="a00034.htm#ga352331b32407c4e95bc4f7a5e39fad25" title="Размеры внутренних статических строковых буферов TXLib.">_TX_BUFSIZE</a>)
<a name="l07318"></a>07318         { $ <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_WARNING, NULL, <span class="stringliteral">&quot;Вы загрузили уже %d HDC, системе может стать плохо.&quot;</span>, (<span class="keywordtype">int</span>) _txCanvas_UserDCs-&gt;size()); }
<a name="l07319"></a>07319 
<a name="l07320"></a>07320 $   <span class="keywordflow">return</span> dc;
<a name="l07321"></a>07321     }
<a name="l07322"></a>07322 
<a name="l07323"></a>07323 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07324"></a>07324 
<a name="l07325"></a>07325 HDC <a class="code" href="a00029.htm#ga28123a5be2ad65c41550ccb558138476" title="Загружает из файла изображение в формате BMP. Делает это довольно медленно.">txLoadImage</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[], <span class="keywordtype">unsigned</span> imageFlags <span class="comment">/*= IMAGE_BITMAP*/</span>, <span class="keywordtype">unsigned</span> loadFlags <span class="comment">/*= LR_LOADFROMFILE*/</span>)
<a name="l07326"></a>07326     {
<a name="l07327"></a>07327 $1  _TX_IF_TXWINDOW_FAILED                         <span class="keywordflow">return</span> NULL;
<a name="l07328"></a>07328 $   _TX_IF_ARGUMENT_FAILED (filename &amp;&amp; *filename) return NULL;
<a name="l07329"></a>07329 
<a name="l07330"></a>07330 $   HBITMAP image = (HBITMAP) Win32::LoadImage ((loadFlags &amp; LR_LOADFROMFILE)? NULL : GetModuleHandle (NULL),
<a name="l07331"></a>07331                                                  filename, imageFlags, 0, 0, loadFlags);
<a name="l07332"></a>07332 $   if (!image) return NULL;
<a name="l07333"></a>07333 
<a name="l07334"></a>07334 $   HDC dc = <a class="code" href="a00029.htm#ga2f1b4b81b2b9280bb58c2d79930e2a63" title="Создает дополнительный холст (контекст рисования, Device Context, DC) в памяти.">txCreateCompatibleDC</a> (0, 0, image);
<a name="l07335"></a>07335 
<a name="l07336"></a>07336 $   if (!(loadFlags &amp; LR_LOADFROMFILE)) return dc;
<a name="l07337"></a>07337 
<a name="l07338"></a>07338 $   static std::map &lt;std::<span class="keywordtype">string</span>, <span class="keywordtype">unsigned</span>&gt; loadTimes;
<a name="l07339"></a>07339 $   std::<span class="keywordtype">string</span> file = filename;
<a name="l07340"></a>07340 $   <span class="keywordtype">unsigned</span> time    = GetTickCount();
<a name="l07341"></a>07341 
<a name="l07342"></a>07342 $   if ((<span class="keywordtype">long</span>) (time - loadTimes [file]) &lt; _TX_TIMEOUT)
<a name="l07343"></a>07343         { $ <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (NIIF_WARNING, NULL, <span class="stringliteral">&quot;Вы загружаете \&quot;%s\&quot; слишком часто, программа будет тормозить.&quot;</span>, filename); }
<a name="l07344"></a>07344 
<a name="l07345"></a>07345 $   loadTimes [file] = time;
<a name="l07346"></a>07346 
<a name="l07347"></a>07347 $   <span class="keywordflow">return</span> dc;
<a name="l07348"></a>07348     }
<a name="l07349"></a>07349 
<a name="l07350"></a>07350 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07351"></a>07351 
<a name="l07352"></a>07352 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC* pdc)
<a name="l07353"></a>07353     {
<a name="l07354"></a>07354 $1  _TX_IF_TXWINDOW_FAILED       <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07355"></a>07355 $   _TX_IF_ARGUMENT_FAILED (pdc) return false;
<a name="l07356"></a>07356 
<a name="l07357"></a>07357 $   HDC  dc = *pdc;
<a name="l07358"></a>07358 $   <span class="keywordtype">bool</span> ok = _txBuffer_Delete (pdc);
<a name="l07359"></a>07359 $   if (!ok) return false;
<a name="l07360"></a>07360 
<a name="l07361"></a>07361 $   if (!_txCanvas_UserDCs) return ok;
<a name="l07362"></a>07362 
<a name="l07363"></a>07363 $   <a class="code" href="a00008.htm" title="Класс для автоматической блокировки и разблокировки критической секции.">txAutoLock</a> _lock;
<a name="l07364"></a>07364 $   std::vector &lt;HDC&gt; ::iterator i = std::find (_txCanvas_UserDCs-&gt;begin(), _txCanvas_UserDCs-&gt;end(), dc);
<a name="l07365"></a>07365 $   if (i != _txCanvas_UserDCs-&gt;end()) { std::swap (*i, _txCanvas_UserDCs-&gt;back()); _txCanvas_UserDCs-&gt;pop_back(); }
<a name="l07366"></a>07366 
<a name="l07367"></a>07367 $   <span class="keywordflow">return</span> ok;
<a name="l07368"></a>07368     }
<a name="l07369"></a>07369 
<a name="l07370"></a>07370 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07371"></a>07371 
<a name="l07372"></a>07372 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (HDC dc)
<a name="l07373"></a>07373     {
<a name="l07374"></a>07374 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07375"></a>07375 
<a name="l07376"></a>07376 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga505f212582bf9b2bf95a4ef15f84af42" title="Уничтожает холст (контекст рисования, DC) в памяти.">txDeleteDC</a> (&amp;dc);
<a name="l07377"></a>07377     }
<a name="l07378"></a>07378 
<a name="l07379"></a>07379 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07380"></a>07380 
<a name="l07381"></a>07381 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga09488931ddf7b1e7e0b31529e1904887" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (HDC dest, <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l07382"></a>07382                HDC src,  <span class="keywordtype">double</span> xSrc <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySrc <span class="comment">/*= 0*/</span>, DWORD rOp <span class="comment">/*= SRCCOPY*/</span>)
<a name="l07383"></a>07383     {
<a name="l07384"></a>07384 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07385"></a>07385 $   _TX_IF_ARGUMENT_FAILED (dest) return false;
<a name="l07386"></a>07386 $   _TX_IF_ARGUMENT_FAILED (src)  return false;
<a name="l07387"></a>07387 
<a name="l07388"></a>07388 $   return <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt (dest, <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l07389"></a>07389                                     src,  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSrc),  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySrc),  rOp)));
<a name="l07390"></a>07390     }
<a name="l07391"></a>07391 
<a name="l07392"></a>07392 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07393"></a>07393 
<a name="l07394"></a>07394 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gab4b1096971ee1f427e9f0211c2b2dea4" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txTransparentBlt</a> (HDC dest, <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l07395"></a>07395                        HDC src,  <span class="keywordtype">double</span> xSrc <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySrc <span class="comment">/*= 0*/</span>, COLORREF transColor <span class="comment">/*= TX_BLACK*/</span>)
<a name="l07396"></a>07396     {
<a name="l07397"></a>07397 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07398"></a>07398 $   _TX_IF_ARGUMENT_FAILED (dest) return false;
<a name="l07399"></a>07399 $   _TX_IF_ARGUMENT_FAILED (src)  return false;
<a name="l07400"></a>07400 
<a name="l07401"></a>07401 $   return (Win32::TransparentBlt)?
<a name="l07402"></a>07402         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::TransparentBlt (dest, <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l07403"></a>07403                                          src,  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSrc),  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySrc),  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height), transColor)))
<a name="l07404"></a>07404     :
<a name="l07405"></a>07405         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt         (dest, <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l07406"></a>07406                                          src,  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSrc),  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySrc),  SRCCOPY))), false;
<a name="l07407"></a>07407     }
<a name="l07408"></a>07408 
<a name="l07409"></a>07409 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07410"></a>07410 
<a name="l07411"></a>07411 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gad2a44daaf97dccd615e2754930bd8245" title="Копирует изображение с одного холста (контекста рисования, DC) на другой с учетом прозрачности...">txAlphaBlend</a> (HDC dest, <span class="keywordtype">double</span> xDest, <span class="keywordtype">double</span> yDest, <span class="keywordtype">double</span> width, <span class="keywordtype">double</span> height,
<a name="l07412"></a>07412                    HDC src,  <span class="keywordtype">double</span> xSrc <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> ySrc <span class="comment">/*= 0*/</span>, <span class="keywordtype">double</span> alpha <span class="comment">/*= 1.0*/</span>)
<a name="l07413"></a>07413     {
<a name="l07414"></a>07414 $1  _TX_IF_TXWINDOW_FAILED        <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07415"></a>07415 $   _TX_IF_ARGUMENT_FAILED (dest) return false;
<a name="l07416"></a>07416 $   _TX_IF_ARGUMENT_FAILED (src)  return false;
<a name="l07417"></a>07417 
<a name="l07418"></a>07418 $   if (alpha &lt; 0) alpha = 0;
<a name="l07419"></a>07419 $   if (alpha &gt; 1) alpha = 1;
<a name="l07420"></a>07420 
<a name="l07421"></a>07421 $   BLENDFUNCTION blend = { AC_SRC_OVER, 0, (BYTE) <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (alpha * 255), AC_SRC_ALPHA };
<a name="l07422"></a>07422 
<a name="l07423"></a>07423 $   <span class="keywordflow">return</span> (Win32::AlphaBlend)?
<a name="l07424"></a>07424         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::AlphaBlend (dest, <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l07425"></a>07425                                      src,  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSrc),  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySrc),  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height), blend)))
<a name="l07426"></a>07426     :
<a name="l07427"></a>07427         <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (!!(Win32::BitBlt     (dest, <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (yDest), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (width), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (height),
<a name="l07428"></a>07428                                      src,  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (xSrc),  <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ySrc),  SRCCOPY))), false;
<a name="l07429"></a>07429     }
<a name="l07430"></a>07430 
<a name="l07431"></a>07431 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07432"></a>07432 
<a name="l07433"></a>07433 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gaff3d9c60900531f438a19216485bdd41" title="Разрешает или запрещает автоматическое обновление изображения в окне.">txUpdateWindow</a> (<span class="keywordtype">int</span> update <span class="comment">/*= true*/</span>)
<a name="l07434"></a>07434     {
<a name="l07435"></a>07435 $1  <span class="keywordflow">return</span> _txCanvas_SetRefreshLock (update &gt;= 0? !update : -update);
<a name="l07436"></a>07436     }
<a name="l07437"></a>07437 
<a name="l07438"></a>07438 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07439"></a>07439 
<a name="l07440"></a>07440 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gae92e621aaed81f90e4d142356e38762a" title="Блокирует обновление изображения окна, во избежание мигания.">txBegin</a>()
<a name="l07441"></a>07441     {
<a name="l07442"></a>07442 $1  _txCanvas_SetRefreshLock (_txCanvas_RefreshLock + 1);
<a name="l07443"></a>07443 
<a name="l07444"></a>07444 $   <span class="keywordflow">return</span> _txCanvas_RefreshLock;
<a name="l07445"></a>07445     }
<a name="l07446"></a>07446 
<a name="l07447"></a>07447 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07448"></a>07448 
<a name="l07449"></a>07449 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00029.htm#ga809dc04afd5348247846ee01ce9a06e6" title="Разблокирует обновление окна, заблокированное функцией txBegin().">txEnd</a>()
<a name="l07450"></a>07450     {
<a name="l07451"></a>07451 $1  _txCanvas_SetRefreshLock (_txCanvas_RefreshLock - 1);
<a name="l07452"></a>07452 
<a name="l07453"></a>07453 $   <span class="keywordflow">return</span> _txCanvas_RefreshLock;
<a name="l07454"></a>07454     }
<a name="l07455"></a>07455 
<a name="l07456"></a>07456 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07457"></a>07457 
<a name="l07458"></a>07458 <span class="keywordtype">double</span> <a class="code" href="a00029.htm#ga56227ddccbe156355eaca50264bf3334" title="Задерживает выполнение программы на определенное время.">txSleep</a> (<span class="keywordtype">double</span> time)
<a name="l07459"></a>07459     {
<a name="l07460"></a>07460 $1  LARGE_INTEGER start = {{0}};
<a name="l07461"></a>07461 $   QueryPerformanceCounter (&amp;start) asserted;
<a name="l07462"></a>07462 
<a name="l07463"></a>07463 $   LARGE_INTEGER freq = {{0}};
<a name="l07464"></a>07464 $   QueryPerformanceFrequency (&amp;freq) asserted;
<a name="l07465"></a>07465 
<a name="l07466"></a>07466 $   <span class="keywordtype">int</span> lock = _txCanvas_RefreshLock;
<a name="l07467"></a>07467 $   _txCanvas_RefreshLock = 0;
<a name="l07468"></a>07468 
<a name="l07469"></a>07469 $   HWND wnd = txWindow();
<a name="l07470"></a>07470     if (wnd) { $ RedrawWindow (wnd, NULL, NULL, RDW_INVALIDATE | RDW_INTERNALPAINT | RDW_UPDATENOW) asserted; }
<a name="l07471"></a>07471 
<a name="l07472"></a>07472 $   Sleep (<a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (time));
<a name="l07473"></a>07473 
<a name="l07474"></a>07474 $   _txCanvas_RefreshLock = lock;
<a name="l07475"></a>07475 
<a name="l07476"></a>07476 $   LARGE_INTEGER stop = {{0}};
<a name="l07477"></a>07477 $   QueryPerformanceCounter (&amp;stop) asserted;
<a name="l07478"></a>07478 
<a name="l07479"></a>07479 $   return 1000.0 * (<span class="keywordtype">double</span>) (stop.QuadPart - start.QuadPart) / (<span class="keywordtype">double</span>) freq.QuadPart;
<a name="l07480"></a>07480     }
<a name="l07481"></a>07481 
<a name="l07482"></a>07482 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07483"></a>07483 
<a name="l07484"></a>07484 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga532fa8a55c4f3d4f94ff0fdceae732b2" title="Блокировка холста (контекста рисования).">txLock</a> (<span class="keywordtype">bool</span> wait <span class="comment">/*= true*/</span>)
<a name="l07485"></a>07485     {
<a name="l07486"></a>07486 $1  <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 || _txExit) Sleep (0);
<a name="l07487"></a>07487 
<a name="l07488"></a>07488 $   <span class="keywordflow">if</span> (wait) { $ <span class="keywordflow">return</span>      EnterCriticalSection (&amp;_txCanvas_LockBackBuf), <span class="keyword">true</span>; }
<a name="l07489"></a>07489     <span class="keywordflow">else</span>      { $ <span class="keywordflow">return</span> !!TryEnterCriticalSection (&amp;_txCanvas_LockBackBuf);       }
<a name="l07490"></a>07490     }
<a name="l07491"></a>07491 
<a name="l07492"></a>07492 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07493"></a>07493 
<a name="l07494"></a>07494 <span class="keywordtype">bool</span> <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>()
<a name="l07495"></a>07495     {
<a name="l07496"></a>07496 $1  LeaveCriticalSection (&amp;_txCanvas_LockBackBuf);
<a name="l07497"></a>07497 
<a name="l07498"></a>07498 $   <span class="keywordflow">if</span> (_txCanvas_RefreshLock &lt;= 0 || _txExit) Sleep (0);
<a name="l07499"></a>07499 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07500"></a>07500     }
<a name="l07501"></a>07501 
<a name="l07502"></a>07502 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07503"></a>07503 
<a name="l07504"></a>07504 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l07505"></a>07505 <span class="keyword">inline</span> T <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a> (T value)
<a name="l07506"></a>07506     {
<a name="l07507"></a>07507 $1  <a class="code" href="a00033.htm#ga8fe4ec4c66cb69ce337747fe65dd0cc6" title="Разблокировка холста">txUnlock</a>();
<a name="l07508"></a>07508 $   <span class="keywordflow">return</span> value;
<a name="l07509"></a>07509     }
<a name="l07510"></a>07510 
<a name="l07511"></a>07511 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07512"></a>07512 
<a name="l07513"></a>07513 <span class="keyword">inline</span> POINT <a class="code" href="a00030.htm#ga452a1a7dc5d3f467c8b79b9db3ea053e" title="Возвращает позицию Мыши!">txMousePos</a>()
<a name="l07514"></a>07514     {
<a name="l07515"></a>07515 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> <a class="code" href="a00032.htm#gade9b60c36576ef735b3e1d1f628ad9c6" title="Обнулитель типов, не имеющих конструкторов">ZERO</a> (POINT);
<a name="l07516"></a>07516 
<a name="l07517"></a>07517 $   <span class="keywordflow">return</span> _txMousePos;
<a name="l07518"></a>07518     }
<a name="l07519"></a>07519 
<a name="l07520"></a>07520 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07521"></a>07521 
<a name="l07522"></a>07522 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga6adbdb491a8eec2a4209c54874ae7b7d" title="Возвращает Х-Координату Мыши!">txMouseX</a>()
<a name="l07523"></a>07523     {
<a name="l07524"></a>07524 $1  <span class="keywordflow">return</span> _txMousePos.x;
<a name="l07525"></a>07525     }
<a name="l07526"></a>07526 
<a name="l07527"></a>07527 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07528"></a>07528 
<a name="l07529"></a>07529 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#ga572acf2310d35defaa9a37a2ec260576" title="Возвращает Y-Координату Мыши!">txMouseY</a>()
<a name="l07530"></a>07530     {
<a name="l07531"></a>07531 $1  <span class="keywordflow">return</span> _txMousePos.y;
<a name="l07532"></a>07532     }
<a name="l07533"></a>07533 
<a name="l07534"></a>07534 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07535"></a>07535 
<a name="l07536"></a>07536 <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="a00030.htm#gab814b21d8f52c3efd0d7175d30a4fa73" title="Возвращает состояние Кнопок Мыши!">txMouseButtons</a>()
<a name="l07537"></a>07537     {
<a name="l07538"></a>07538 $1  _TX_IF_TXWINDOW_FAILED <span class="keywordflow">return</span> 0;
<a name="l07539"></a>07539 
<a name="l07540"></a>07540 $   <span class="keywordflow">return</span> _txMouseButtons;
<a name="l07541"></a>07541     }
<a name="l07542"></a>07542 
<a name="l07543"></a>07543 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07544"></a>07544 
<a name="l07545"></a>07545 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (<span class="keywordtype">unsigned</span> color <span class="comment">/*= 0x07*/</span>)
<a name="l07546"></a>07546     {
<a name="l07547"></a>07547 $1  <span class="keywordflow">return</span> !!SetConsoleTextAttribute (GetStdHandle (STD_OUTPUT_HANDLE), (WORD) color);
<a name="l07548"></a>07548     }
<a name="l07549"></a>07549 
<a name="l07550"></a>07550 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07551"></a>07551 
<a name="l07552"></a>07552 <span class="keywordtype">unsigned</span> <a class="code" href="a00029.htm#ga9f2215b90264133de36ed7c2120f75f5" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a>()
<a name="l07553"></a>07553     {
<a name="l07554"></a>07554 $1  CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l07555"></a>07555 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con);
<a name="l07556"></a>07556 
<a name="l07557"></a>07557 $   <span class="keywordflow">return</span> con.wAttributes;
<a name="l07558"></a>07558     }
<a name="l07559"></a>07559 
<a name="l07560"></a>07560 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07561"></a>07561 
<a name="l07562"></a>07562 POINT <a class="code" href="a00029.htm#gaee548f7b5672cbcbb99246e0291d7336" title="Устанавливает позицию мигающего курсора консоли.">txSetConsoleCursorPos</a> (<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y)
<a name="l07563"></a>07563     {
<a name="l07564"></a>07564 $1  POINT fontSz = <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l07565"></a>07565 
<a name="l07566"></a>07566 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l07567"></a>07567 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con) asserted;
<a name="l07568"></a>07568 
<a name="l07569"></a>07569 $   COORD pos = { (short) <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * x / fontSz.x + con.srWindow.Left),
<a name="l07570"></a>07570                   (short) <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * y / fontSz.y + con.srWindow.Top ) };
<a name="l07571"></a>07571 
<a name="l07572"></a>07572 $   SetConsoleCursorPosition (GetStdHandle (STD_OUTPUT_HANDLE), pos) asserted;
<a name="l07573"></a>07573 
<a name="l07574"></a>07574 $   POINT prev = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * (con.dwCursorPosition.X - con.srWindow.Left) / fontSz.x),
<a name="l07575"></a>07575                    <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * (con.dwCursorPosition.Y - con.srWindow.Top ) / fontSz.y) };
<a name="l07576"></a>07576 $   <span class="keywordflow">return</span> prev;
<a name="l07577"></a>07577     }
<a name="l07578"></a>07578 
<a name="l07579"></a>07579 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07580"></a>07580 
<a name="l07581"></a>07581 POINT <a class="code" href="a00029.htm#ga3227242c57eef33049cdaee655f4faee" title="Возвращает позицию мигающего курсора консоли.">txGetConsoleCursorPos</a>()
<a name="l07582"></a>07582     {
<a name="l07583"></a>07583 $1  POINT fontSz = <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>();
<a name="l07584"></a>07584 
<a name="l07585"></a>07585 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l07586"></a>07586 $   GetConsoleScreenBufferInfo (GetStdHandle (STD_OUTPUT_HANDLE), &amp;con) asserted;
<a name="l07587"></a>07587 
<a name="l07588"></a>07588 $   POINT pos = { <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * (con.dwCursorPosition.X - con.srWindow.Left) / fontSz.x),
<a name="l07589"></a>07589                   <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (1.0 * (con.dwCursorPosition.Y - con.srWindow.Top ) / fontSz.y) };
<a name="l07590"></a>07590 $   <span class="keywordflow">return</span> pos;
<a name="l07591"></a>07591     }
<a name="l07592"></a>07592 
<a name="l07593"></a>07593 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07594"></a>07594 
<a name="l07595"></a>07595 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga2cb63c12d9206e9ed2b2c83c9a08f68e" title="Стирает текст консоли.">txClearConsole</a>()
<a name="l07596"></a>07596     {
<a name="l07597"></a>07597 $1  HANDLE out = GetStdHandle (STD_OUTPUT_HANDLE);
<a name="l07598"></a>07598 
<a name="l07599"></a>07599 $   CONSOLE_SCREEN_BUFFER_INFO con = {{0}};
<a name="l07600"></a>07600 $   GetConsoleScreenBufferInfo (out, &amp;con) asserted;
<a name="l07601"></a>07601 
<a name="l07602"></a>07602 $   COORD start = {con.srWindow.Left, con.srWindow.Top};
<a name="l07603"></a>07603 
<a name="l07604"></a>07604 $   DWORD len   = (con.srWindow.Right  - con.srWindow.Left + 1) *
<a name="l07605"></a>07605                   (con.srWindow.Bottom - con.srWindow.Top  + 1);
<a name="l07606"></a>07606 
<a name="l07607"></a>07607 $   DWORD written = 0;
<a name="l07608"></a>07608 $   FillConsoleOutputCharacter (out, 0x20 <span class="comment">/*&#39; &#39;*/</span>,    len, start, &amp;written) asserted;
<a name="l07609"></a>07609 $   FillConsoleOutputAttribute (out, con.wAttributes, len, start, &amp;written) asserted;
<a name="l07610"></a>07610 
<a name="l07611"></a>07611 $   SetConsoleCursorPosition (GetStdHandle (STD_OUTPUT_HANDLE), start) asserted;
<a name="l07612"></a>07612 
<a name="l07613"></a>07613 $   return written == len;
<a name="l07614"></a>07614     }
<a name="l07615"></a>07615 
<a name="l07616"></a>07616 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07617"></a>07617 
<a name="l07618"></a>07618 POINT <a class="code" href="a00029.htm#ga56faf7c36cf0112165fb705fedf6ec8e" title="Возвращает размеры шрифта консоли.">txGetConsoleFontSize</a>()
<a name="l07619"></a>07619     {
<a name="l07620"></a>07620 $1  CONSOLE_FONT_INFO font = {0, {8, 16}};
<a name="l07621"></a>07621 
<a name="l07622"></a>07622 $   <span class="keywordflow">if</span> (Win32::GetCurrentConsoleFont)
<a name="l07623"></a>07623         { $ Win32::GetCurrentConsoleFont (GetStdHandle (STD_OUTPUT_HANDLE), <span class="keyword">false</span>, &amp;font) asserted; }
<a name="l07624"></a>07624 
<a name="l07625"></a>07625 $   SIZE size = { font.dwFontSize.X, font.dwFontSize.Y };
<a name="l07626"></a>07626 $   <a class="code" href="a00033.htm#ga365c78a96945ad9e0a6462c28e01d400" title="Вызов функции Win32 GDI с автоматической блокировкой и разблокировкой.">txGDI</a> (Win32::GetTextExtentPoint32 (_txCanvas_BackBuf[1], <span class="stringliteral">&quot;W&quot;</span>, 1, &amp;size));
<a name="l07627"></a>07627 
<a name="l07628"></a>07628 $   POINT sizeFont = { size.cx, size.cy };
<a name="l07629"></a>07629 $   <span class="keywordflow">return</span> sizeFont;
<a name="l07630"></a>07630     }
<a name="l07631"></a>07631 
<a name="l07632"></a>07632 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07633"></a>07633 
<a name="l07634"></a>07634 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#gaa148d2040d20ed74cf46ab186c35f9ed" title="Запрещает или разрешает рисование мигающего курсора в окне.">txTextCursor</a> (<span class="keywordtype">bool</span> blink <span class="comment">/*= true*/</span>)
<a name="l07635"></a>07635     {
<a name="l07636"></a>07636 $1  <span class="keywordtype">bool</span> old = _txConsole_IsBlinking;
<a name="l07637"></a>07637 
<a name="l07638"></a>07638 $   _txConsole_IsBlinking = blink;
<a name="l07639"></a>07639 
<a name="l07640"></a>07640 $   <span class="keywordflow">return</span> old;
<a name="l07641"></a>07641     }
<a name="l07642"></a>07642 
<a name="l07643"></a>07643 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07644"></a>07644 
<a name="l07645"></a>07645 <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#ga177f8bcb7544821ea4b5bd0571fe7196" title="Воспроизводит звуковой файл.">txPlaySound</a> (<span class="keyword">const</span> <span class="keywordtype">char</span> filename[] <span class="comment">/*= NULL*/</span>, DWORD mode <span class="comment">/*= SND_ASYNC*/</span>)
<a name="l07646"></a>07646     {
<a name="l07647"></a>07647 $1  _TX_IF_ARGUMENT_FAILED (!(filename &amp;&amp; !*filename)) return false;
<a name="l07648"></a>07648 
<a name="l07649"></a>07649 $   mode |= SND_FILENAME | SND_NODEFAULT | SND_NOWAIT;
<a name="l07650"></a>07650 $   if (mode &amp; SND_LOOP) mode = (mode &amp; ~SND_SYNC) | SND_ASYNC;
<a name="l07651"></a>07651 
<a name="l07652"></a>07652 $   if (!filename) mode = SND_PURGE;
<a name="l07653"></a>07653 
<a name="l07654"></a>07654 $   return !!Win32::PlaySound (filename, NULL, mode);
<a name="l07655"></a>07655     }
<a name="l07656"></a>07656 
<a name="l07657"></a>07657 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07658"></a>07658 
<a name="l07659"></a>07659 <span class="comment">// +--&lt;&lt;&lt; Это вряд ли имеет отношение к тому, что вы ищете :)</span>
<a name="l07660"></a>07660 <span class="comment">// V      Полезно смотреть не только вверх, но и вниз</span>
<a name="l07661"></a>07661 
<a name="l07662"></a>07662 WNDPROC <a class="code" href="a00033.htm#ga30fb1a6913174dfcea5079391f655be2" title="Устанавливает альтернативную функцию обработки оконных сообщений Windows (оконную функцию) для окна T...">txSetWindowsHook</a> (WNDPROC wndProc <span class="comment">/*= NULL*/</span>)
<a name="l07663"></a>07663     {
<a name="l07664"></a>07664 $1  WNDPROC old = _txAltWndProc; _txAltWndProc = wndProc;
<a name="l07665"></a>07665 $   <span class="keywordflow">return</span>  old;
<a name="l07666"></a>07666     }
<a name="l07667"></a>07667 
<a name="l07668"></a>07668 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07669"></a>07669 
<a name="l07670"></a>07670 <span class="comment">//     +--&lt;&lt;&lt; А это, наконец, искомое определение этой функции.</span>
<a name="l07671"></a>07671 <span class="comment">//     |      Смотрите по сторонам! Нужная вам функция где-то рядом.</span>
<a name="l07672"></a>07672 <span class="comment">//     |</span>
<a name="l07673"></a>07673 <span class="comment">//     v</span>
<a name="l07674"></a>07674 <span class="keywordtype">bool</span> <a class="code" href="a00029.htm#ga93cecf6b117fc403c0488f388b78a6d1" title="Делает нечто иногда удобное. См. название функции.">txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture</a>()
<a name="l07675"></a>07675     {
<a name="l07676"></a>07676 $1  <a class="code" href="a00032.htm#gacb878805752034c14b0409817ae5a5ba" title="Выводит сообщение в окне с помощью функции MessageBox.">txMessageBox</a> (<span class="stringliteral">&quot;Это запланированная ошибка. Такое бывает. Вы хотели вызвать:\n\n&quot;</span>
<a name="l07677"></a>07677 
<a name="l07678"></a>07678                   <span class="stringliteral">&quot;txIDontWantToHaveAPauseAfterMyProgramBeforeTheWindowWillClose_AndIWillNotBeAskingWhereIsMyPicture()\n\n&quot;</span>
<a name="l07679"></a>07679 
<a name="l07680"></a>07680                   <span class="stringliteral">&quot;Хоть вы долго [копировали]набирали это имя, на самом деле эта функция не реализована. &quot;</span>
<a name="l07681"></a>07681                   <span class="stringliteral">&quot;Есть другая функция, которая убирает авто-паузу в конце программы, но в хелпе про нее не написано.\n\n&quot;</span>
<a name="l07682"></a>07682 
<a name="l07683"></a>07683                   <span class="stringliteral">&quot;Но не все так плохо. Определение нужной функции есть в исходных текстах TXLib.h, оно лежит рядом &quot;</span>
<a name="l07684"></a>07684                   <span class="stringliteral">&quot;с определением той функции с длинным названием, которую вы сейчас вызвали.\n\n&quot;</span>
<a name="l07685"></a>07685 
<a name="l07686"></a>07686                   <span class="stringliteral">&quot;Нажмите в редакторе Ctrl+O, найдите и откройте файл TXLib.h (он лежит в папке, куда вы &quot;</span>
<a name="l07687"></a>07687                   <span class="stringliteral">&quot;установили TXLib), затем нажмите Ctrl+F и ищите \&quot;txIDontWant\&quot;. Удачи!\n\n&quot;</span>,
<a name="l07688"></a>07688 
<a name="l07689"></a>07689                   <span class="stringliteral">&quot;Не получилось&quot;</span>, MB_ICONSTOP);
<a name="l07690"></a>07690 
<a name="l07691"></a>07691     <span class="comment">// The truth is out there... (C++files)</span>
<a name="l07692"></a>07692 
<a name="l07693"></a>07693 $   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l07694"></a>07694     }
<a name="l07695"></a>07695 
<a name="l07696"></a>07696 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07697"></a>07697 
<a name="l07698"></a>07698 <span class="comment">// Bingo! Now you are learned to use the Sources, Luke. And may the Source be with you.</span>
<a name="l07699"></a>07699 
<a name="l07700"></a>07700 <span class="keyword">inline</span> <span class="keywordtype">bool</span> txDisableAutoPause()
<a name="l07701"></a>07701     {
<a name="l07702"></a>07702 $1  _txExit = <span class="keyword">true</span>;
<a name="l07703"></a>07703 $   <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l07704"></a>07704     }
<a name="l07705"></a>07705 
<a name="l07706"></a>07706 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07707"></a>07707 
<a name="l07708"></a>07708 <span class="keywordtype">void</span> <a class="code" href="a00029.htm#gac76227ff55076802ea267be18b4d7a8d" title="Рисует человечка.">txDrawMan</a> (<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> sizeX, <span class="keywordtype">int</span> sizeY, COLORREF color, <span class="keywordtype">double</span> handL, <span class="keywordtype">double</span> handR, <span class="keywordtype">double</span> twist,
<a name="l07709"></a>07709                 <span class="keywordtype">double</span> head, <span class="keywordtype">double</span> eyes, <span class="keywordtype">double</span> wink, <span class="keywordtype">double</span> crazy, <span class="keywordtype">double</span> smile, <span class="keywordtype">double</span> hair, <span class="keywordtype">double</span> wind)
<a name="l07710"></a>07710     {
<a name="l07711"></a>07711 $1  <span class="keyword">const</span> <span class="keywordtype">char</span> msg[] = <span class="stringliteral">&quot;\0/А я - человечек из библиотеки!\0/Меня объясняли на уроке!\0/Напиши меня сам!\0/&quot;</span>;
<a name="l07712"></a>07712     <span class="keyword">static</span> <span class="keywordtype">unsigned</span> count = GetTickCount(), L = 0;
<a name="l07713"></a>07713 
<a name="l07714"></a>07714 $   COLORREF lineColor = <a class="code" href="a00029.htm#ga4894075399ec8e8747177f90c15fb35d" title="Возвращает текущий цвет линий и текста.">txGetColor</a>();
<a name="l07715"></a>07715     COLORREF fillColor = <a class="code" href="a00029.htm#ga1a65fa9ddfd07bda8ab3e95873991b76" title="Возвращает текущий цвет заполнения фигур.">txGetFillColor</a>();
<a name="l07716"></a>07716 
<a name="l07717"></a>07717 $   <a class="code" href="a00029.htm#ga04e174a1e8d269b96b6e5a3e30d6dc1e" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (<a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a5308a5fc6c34169a8af67630a5a750d5" title="Темно-серый цвет.">TX_DARKGRAY</a>);
<a name="l07718"></a>07718     <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (<a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>);
<a name="l07719"></a>07719 
<a name="l07720"></a>07720 $   <a class="code" href="a00029.htm#ga56fe553987cace1e1572b2e64ea46ebc" title="Рисует прямоугольник.">txRectangle</a> (x - sizeX/2, y - sizeY, x + sizeX/2, y);
<a name="l07721"></a>07721     <a class="code" href="a00029.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x, y, 4);
<a name="l07722"></a>07722 
<a name="l07723"></a>07723 $   <a class="code" href="a00029.htm#ga04e174a1e8d269b96b6e5a3e30d6dc1e" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (color);
<a name="l07724"></a>07724     <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (color);
<a name="l07725"></a>07725 
<a name="l07726"></a>07726 $   <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x + twist * sizeX, y - 0.35 * sizeY, x, y - 0.7 * sizeY);
<a name="l07727"></a>07727 
<a name="l07728"></a>07728 $   <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x, y - 0.7 * sizeY, x - sizeX/2, y - (0.7 + handL) * sizeY);
<a name="l07729"></a>07729     <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x, y - 0.7 * sizeY, x + sizeX/2, y - (0.7 + handR) * sizeY);
<a name="l07730"></a>07730 
<a name="l07731"></a>07731 $   <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x + twist * sizeX, y - 0.35 * sizeY, x - sizeX/2, y);
<a name="l07732"></a>07732     <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x + twist * sizeX, y - 0.35 * sizeY, x + sizeX/2, y);
<a name="l07733"></a>07733 
<a name="l07734"></a>07734 $   <a class="code" href="a00029.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x, y - (0.85 + head) * sizeY, 0.15 * sizeY);
<a name="l07735"></a>07735 
<a name="l07736"></a>07736 $   <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x, y - (1 + head) * sizeY, x +  wind/10        * sizeX, y - (1 + head + hair/10) * sizeY);
<a name="l07737"></a>07737     <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x, y - (1 + head) * sizeY, x + (wind/10 - 0.1) * sizeX, y - (1 + head + hair/10) * sizeY);
<a name="l07738"></a>07738     <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x, y - (1 + head) * sizeY, x + (wind/10 + 0.1) * sizeX, y - (1 + head + hair/10) * sizeY);
<a name="l07739"></a>07739 
<a name="l07740"></a>07740 $   <a class="code" href="a00029.htm#ga04e174a1e8d269b96b6e5a3e30d6dc1e" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (~color &amp; 0xFFFFFF);
<a name="l07741"></a>07741     <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (~color &amp; 0xFFFFFF);
<a name="l07742"></a>07742 
<a name="l07743"></a>07743 $   <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x, y - (0.8 + head - 0.05 * smile/2) * sizeY, x - 0.05 * sizeY, y - (0.8 + head + 0.05 * smile/2) * sizeY),
<a name="l07744"></a>07744     <a class="code" href="a00029.htm#ga5654ec6899099964535e338d0523c34d" title="Рисует линию.">txLine</a> (x, y - (0.8 + head - 0.05 * smile/2) * sizeY, x + 0.05 * sizeY, y - (0.8 + head + 0.05 * smile/2) * sizeY),
<a name="l07745"></a>07745     <a class="code" href="a00032.htm#gae2d377df154bb9dcb45429c71c907ddf" title="Выводит всплывающее сообщение в системном трее.">txNotifyIcon</a> (4, (<span class="keyword">const</span> <span class="keywordtype">char</span>*)!! (L+<span class="charliteral">&#39;L&#39;</span>)[msg], <span class="stringliteral">&quot;\n%s\n&quot;</span>, msg + (count++ % 3)[<span class="stringliteral">&quot;\&quot;&lt;&quot;</span>]);
<a name="l07746"></a>07746 
<a name="l07747"></a>07747 $   <a class="code" href="a00029.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x - 0.05 * sizeY, y - (0.9 + head - 0.02 * crazy) * sizeY, eyes * (1 + 0.5*wink) * 0.02 * sizeY),
<a name="l07748"></a>07748     <a class="code" href="a00029.htm#gaa14e9c2a46cf713efaa1f850074d8adc" title="Рисует окружность или круг.">txCircle</a> (x + 0.05 * sizeY, y - (0.9 + head + 0.02 * crazy) * sizeY, eyes * (1 - 0.5*wink) * 0.02 * sizeY),
<a name="l07749"></a>07749     Sleep (1000 + count%2);
<a name="l07750"></a>07750 
<a name="l07751"></a>07751 $   <a class="code" href="a00029.htm#ga04e174a1e8d269b96b6e5a3e30d6dc1e" title="Устанавливает текущий цвет и толщину линий, цвет текста.">txSetColor</a>     (lineColor);
<a name="l07752"></a>07752     <a class="code" href="a00029.htm#gafb1459949ebb32b199d07f5464205baf" title="Устанавливает текущий цвет заполнения фигур.">txSetFillColor</a> (fillColor);
<a name="l07753"></a>07753     }
<a name="l07754"></a>07754 
<a name="l07755"></a>07755 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07756"></a>07756 
<a name="l07757"></a>07757 <span class="keywordtype">void</span> <a class="code" href="a00032.htm#ga7b470eef58eabacf9c7820ce6d392506" title="Распечатывает дамп области памяти в консоли.">txDump</a> (<span class="keyword">const</span> <span class="keywordtype">void</span>* address, <span class="keyword">const</span> <span class="keywordtype">char</span> name[] <span class="comment">/*= &quot;txDump()&quot;*/</span>)
<a name="l07758"></a>07758     {
<a name="l07759"></a>07759     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* p = (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*) address;
<a name="l07760"></a>07760     <span class="keywordtype">int</span> x = 0;
<a name="l07761"></a>07761 
<a name="l07762"></a>07762     <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x0F);
<a name="l07763"></a>07763     printf (<span class="stringliteral">&quot;\n%8.8s &quot;</span>, name? name : <span class="stringliteral">&quot;&quot;</span>);
<a name="l07764"></a>07764 
<a name="l07765"></a>07765     <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x0E);
<a name="l07766"></a>07766     <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++) printf (<span class="stringliteral">&quot;%02X &quot;</span>, x);
<a name="l07767"></a>07767     <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++) printf (<span class="stringliteral">&quot;%X&quot;</span>,    x);
<a name="l07768"></a>07768 
<a name="l07769"></a>07769     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = 0; y &lt; 16; y++, p += 16)
<a name="l07770"></a>07770         {
<a name="l07771"></a>07771         <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x0E);
<a name="l07772"></a>07772         printf (<span class="stringliteral">&quot;\n&quot;</span> <span class="stringliteral">&quot;%8p &quot;</span>, p);
<a name="l07773"></a>07773 
<a name="l07774"></a>07774         <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++) { <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x0A + x/4%2); printf (<span class="stringliteral">&quot;%02X &quot;</span>, p[x]); }
<a name="l07775"></a>07775         <span class="keywordflow">for</span> (x = 0; x &lt; 16; x++) { <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x0A + x/4%2); printf (<span class="stringliteral">&quot;%c&quot;</span>,    isprint (p[x])? p[x] : <span class="charliteral">&#39;.&#39;</span>); }
<a name="l07776"></a>07776         }
<a name="l07777"></a>07777 
<a name="l07778"></a>07778     <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (0x07);
<a name="l07779"></a>07779     printf (<span class="stringliteral">&quot;\n&quot;</span>);
<a name="l07780"></a>07780     }
<a name="l07781"></a>07781 
<a name="l07782"></a>07782 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07783"></a>07783 
<a name="l07784"></a>07784 <span class="keywordtype">double</span> <a class="code" href="a00029.htm#gaebe0b0f6b1324031ee6b9461ba5b0ab3" title="Оценивает скорость работы компьютера.">txQueryPerformance</a>()
<a name="l07785"></a>07785     {
<a name="l07786"></a>07786 $1  <span class="keywordtype">int</span> maxTime    =  500;
<a name="l07787"></a>07787 $   <span class="keywordtype">int</span> maxSamples =  100;
<a name="l07788"></a>07788 $   POINT size     = {500, 500};
<a name="l07789"></a>07789 
<a name="l07790"></a>07790 $   HDC dc = _txBuffer_Create (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>(), &amp;size, NULL);
<a name="l07791"></a>07791 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (dc); <span class="keywordflow">if</span> (!dc) <span class="keywordflow">return</span> -1;
<a name="l07792"></a>07792 
<a name="l07793"></a>07793 $   DWORD mask = (DWORD) SetThreadAffinityMask (GetCurrentThread(), 1);
<a name="l07794"></a>07794 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (mask);
<a name="l07795"></a>07795 
<a name="l07796"></a>07796 $   LARGE_INTEGER freq = {{0}};
<a name="l07797"></a>07797 $   QueryPerformanceFrequency (&amp;freq) asserted;
<a name="l07798"></a>07798 
<a name="l07799"></a>07799 $   LARGE_INTEGER start = {{0}};
<a name="l07800"></a>07800 $   QueryPerformanceCounter (&amp;start) asserted;
<a name="l07801"></a>07801 
<a name="l07802"></a>07802 $   <span class="keywordtype">int</span> samples = 0;
<a name="l07803"></a>07803 $   while (samples++ &lt; maxSamples)
<a name="l07804"></a>07804         {
<a name="l07805"></a>07805 $       LARGE_INTEGER cur = {{0}};
<a name="l07806"></a>07806 $       QueryPerformanceCounter (&amp;cur) asserted;
<a name="l07807"></a>07807 
<a name="l07808"></a>07808 $       <span class="keywordtype">double</span> t = 1000.0 * (<span class="keywordtype">double</span>) (cur.QuadPart - start.QuadPart) / (<span class="keywordtype">double</span>) freq.QuadPart;
<a name="l07809"></a>07809 $       if (t &gt; maxTime) break;
<a name="l07810"></a>07810 
<a name="l07811"></a>07811         <span class="comment">// Draw test scene</span>
<a name="l07812"></a>07812 
<a name="l07813"></a>07813 $       for (<span class="keywordtype">int</span> y = 0; y &lt; size.y; y += 10)
<a name="l07814"></a>07814         for (<span class="keywordtype">int</span> x = 0; x &lt; size.x; x += 10) Win32::TextOut (dc, x, y, &quot;*&quot;, 1);
<a name="l07815"></a>07815 
<a name="l07816"></a>07816 $       Win32::Ellipse (dc, 0, 0, size.x, size.y);
<a name="l07817"></a>07817 $       Win32::ExtFloodFill (dc, size.x/2, size.y/2, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a01fe8cb0f589868456167ee3a4652df8" title="Прозрачный цвет. Отключает рисование.">TX_TRANSPARENT</a>, FLOODFILLSURFACE);
<a name="l07818"></a>07818 
<a name="l07819"></a>07819 $       <a class="code" href="a00029.htm#ga09488931ddf7b1e7e0b31529e1904887" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2,        0, size.x/2, size.y/2, dc,        0,        0) asserted;
<a name="l07820"></a>07820 $       <a class="code" href="a00029.htm#ga09488931ddf7b1e7e0b31529e1904887" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2, size.y/2, size.x/2, size.y/2, dc,        0, size.y/2) asserted;
<a name="l07821"></a>07821 $       <a class="code" href="a00029.htm#ga09488931ddf7b1e7e0b31529e1904887" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc,        0, size.y/2, size.x/2, size.y/2, dc,        0,        0) asserted;
<a name="l07822"></a>07822 $       <a class="code" href="a00029.htm#ga09488931ddf7b1e7e0b31529e1904887" title="Копирует изображение с одного холста (контекста рисования, DC) на другой.">txBitBlt</a> (dc, size.x/2, size.y/2, size.x/2, size.y/2, dc, size.x/2,        0) asserted;
<a name="l07823"></a>07823         }
<a name="l07824"></a>07824 
<a name="l07825"></a>07825 $   mask = (DWORD) SetThreadAffinityMask (GetCurrentThread(), mask);
<a name="l07826"></a>07826 $   <a class="code" href="a00032.htm#ga3153a272f18d0f805028fce7e4337b53" title="Замена стандартного макроса assert(), с выдачей сообщения через txMessageBox(), консоль и OutputDebug...">assert</a> (mask);
<a name="l07827"></a>07827 
<a name="l07828"></a>07828 $   _txBuffer_Delete (&amp;dc);
<a name="l07829"></a>07829 
<a name="l07830"></a>07830 $   return 15.0 * samples / sqrt (1.0 * size.x * size.y);
<a name="l07831"></a>07831     }
<a name="l07832"></a>07832 
<a name="l07833"></a>07833 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07834"></a>07834 
<a name="l07835"></a>07835 <span class="keywordtype">int</span> <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (COLORREF color, COLORREF component)
<a name="l07836"></a>07836     {
<a name="l07837"></a>07837 $1  <span class="keywordflow">switch</span> (component)
<a name="l07838"></a>07838         {
<a name="l07839"></a>07839         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>:
<a name="l07840"></a>07840         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>:        $ <span class="keywordflow">return</span> (color &gt;&gt;  0) &amp; 0xFF;
<a name="l07841"></a>07841 
<a name="l07842"></a>07842         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>:
<a name="l07843"></a>07843         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>: $ <span class="keywordflow">return</span> (color &gt;&gt;  8) &amp; 0xFF;
<a name="l07844"></a>07844 
<a name="l07845"></a>07845         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет. Плохо виден.">TX_BLUE</a>:
<a name="l07846"></a>07846         <span class="keywordflow">case</span> <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>:  $ <span class="keywordflow">return</span> (color &gt;&gt; 16) &amp; 0xFF;
<a name="l07847"></a>07847 
<a name="l07848"></a>07848         <span class="keywordflow">default</span>:            $ <span class="keywordflow">return</span> CLR_INVALID;
<a name="l07849"></a>07849         }
<a name="l07850"></a>07850     }
<a name="l07851"></a>07851 
<a name="l07852"></a>07852 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07853"></a>07853 
<a name="l07854"></a>07854 COLORREF <a class="code" href="a00029.htm#ga0dc8953591b63696392ec581c6b25f7c" title="Преобразует цвет из формата RGB в формат HSL.">txRGB2HSL</a> (COLORREF rgbColor)
<a name="l07855"></a>07855     {
<a name="l07856"></a>07856 $1  <span class="keywordtype">int</span> r = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a342ad901a39ab4b40f091f6699b64927" title="Темно-красный цвет. Слишком темный.">TX_RED</a>),
<a name="l07857"></a>07857         g = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aa13a0e0eb4587540bd06cb5d55083032" title="Зеленый цвет.">TX_GREEN</a>),
<a name="l07858"></a>07858         b = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (rgbColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aac23422a0b96bfc917484ba1fb0990de" title="Темно-синий цвет. Плохо виден.">TX_BLUE</a>);
<a name="l07859"></a>07859 
<a name="l07860"></a>07860 $   <span class="keywordtype">double</span> m1 = <a class="code" href="a00032.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX</a> (<a class="code" href="a00032.htm#gafa99ec4acc4ecb2dc3c2d05da15d0e3f" title="Возвращает максимальное из двух чисел">MAX</a> (r, g), b) / 255.0,
<a name="l07861"></a>07861            m2 = <a class="code" href="a00032.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (<a class="code" href="a00032.htm#ga3acffbd305ee72dcd4593c0d8af64a4f" title="Возвращает минимальное из двух чисел">MIN</a> (r, g), b) / 255.0,
<a name="l07862"></a>07862            dm = m1 - m2,
<a name="l07863"></a>07863            sm = m1 + m2,
<a name="l07864"></a>07864 
<a name="l07865"></a>07865            ir = r / 255.0,
<a name="l07866"></a>07866            ig = g / 255.0,
<a name="l07867"></a>07867            ib = b / 255.0,
<a name="l07868"></a>07868 
<a name="l07869"></a>07869            ih = 0,
<a name="l07870"></a>07870            is = 0,
<a name="l07871"></a>07871            il = sm / 2;
<a name="l07872"></a>07872 
<a name="l07873"></a>07873 $   <span class="keyword">const</span> <span class="keywordtype">double</span> prec = 0.001;
<a name="l07874"></a>07874 
<a name="l07875"></a>07875 $   <span class="keywordflow">if</span> (fabs (dm) &lt; prec)
<a name="l07876"></a>07876         {
<a name="l07877"></a>07877 $       is = dm / ((sm &lt;= 1)? sm : (2-sm));
<a name="l07878"></a>07878 
<a name="l07879"></a>07879 $       <span class="keywordtype">double</span> cr = (m1 - ir) / dm,
<a name="l07880"></a>07880                cg = (m1 - ig) / dm,
<a name="l07881"></a>07881                cb = (m1 - ib) / dm;
<a name="l07882"></a>07882 
<a name="l07883"></a>07883 $       <span class="keywordflow">if</span> (fabs (ir - m1) &lt; prec) ih =     cb - cg;
<a name="l07884"></a>07884 $       <span class="keywordflow">if</span> (fabs (ig - m1) &lt; prec) ih = 2 + cr - cb;
<a name="l07885"></a>07885 $       <span class="keywordflow">if</span> (fabs (ib - m1) &lt; prec) ih = 4 + cg - cr;
<a name="l07886"></a>07886         }
<a name="l07887"></a>07887 
<a name="l07888"></a>07888 $   ih = (ih &gt;= 0)? ih*60 : ih*60 + 360;
<a name="l07889"></a>07889 
<a name="l07890"></a>07890 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ih / 360 * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (is * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (il * 255));
<a name="l07891"></a>07891     }
<a name="l07892"></a>07892 
<a name="l07893"></a>07893 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07894"></a>07894 
<a name="l07895"></a>07895 COLORREF <a class="code" href="a00029.htm#ga1a87b7cd3e5a74e4dc6828d42d03fffa" title="Преобразует цвет из формата HSL в формат RGB.">txHSL2RGB</a> (COLORREF hslColor)
<a name="l07896"></a>07896     {
<a name="l07897"></a>07897 $1  <span class="keyword">struct </span>xRGB
<a name="l07898"></a>07898         {
<a name="l07899"></a>07899         <span class="keyword">static</span> <span class="keywordtype">double</span> calc (<span class="keywordtype">double</span> h, <span class="keywordtype">double</span> m1, <span class="keywordtype">double</span> m2)
<a name="l07900"></a>07900             {
<a name="l07901"></a>07901 $           <span class="keywordflow">if</span> (h &lt; 0)   h += 360;
<a name="l07902"></a>07902 $           <span class="keywordflow">if</span> (h &gt; 360) h -= 360;
<a name="l07903"></a>07903 
<a name="l07904"></a>07904 $           <span class="keywordflow">return</span> (h &lt;  60)? m1 + (m2-m1) *      h  / 60 :
<a name="l07905"></a>07905                    (h &lt; 180)? m2 :
<a name="l07906"></a>07906                    (h &lt; 240)? m1 + (m2-m1) * (240-h) / 60 :
<a name="l07907"></a>07907                               m1;
<a name="l07908"></a>07908             }
<a name="l07909"></a>07909         };
<a name="l07910"></a>07910 
<a name="l07911"></a>07911 $   <span class="keywordtype">int</span> h = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5aba144158f057694f9f08189c0b6a7d65" title="Цветовой тон цвета в модели HSL.">TX_HUE</a>),
<a name="l07912"></a>07912         s = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5a18419bb9192c947fb25d517765dd04cc" title="Насыщенность цвета в модели HSL.">TX_SATURATION</a>),
<a name="l07913"></a>07913         l = <a class="code" href="a00029.htm#gad05e2877657ce6d3a55174fe51c4b0c5" title="Извлекает цветовую компоненту (цветовой канал) из смешанного цвета.">txExtractColor</a> (hslColor, <a class="code" href="a00029.htm#gga3e94cfad3d9080241f84129d6e5c09b5acc91e717a52d475213f0201bfae5341e" title="Светлота цвета в модели HSL.">TX_LIGHTNESS</a>);
<a name="l07914"></a>07914 
<a name="l07915"></a>07915 $   <span class="keywordtype">double</span> ih = h / 255.0 * 360.0,
<a name="l07916"></a>07916            il = l / 100.0,
<a name="l07917"></a>07917            is = s / 100.0,
<a name="l07918"></a>07918 
<a name="l07919"></a>07919            m2 = (il &lt;= 0.5)? il * (1 + is) : il + is - il * is,
<a name="l07920"></a>07920            m1 = 2 * il - m2,
<a name="l07921"></a>07921 
<a name="l07922"></a>07922            ir = s? xRGB::calc (ih + 120, m1, m2) : il,
<a name="l07923"></a>07923            ig = s? xRGB::calc (ih,       m1, m2) : il,
<a name="l07924"></a>07924            ib = s? xRGB::calc (ih - 120, m1, m2) : il;
<a name="l07925"></a>07925 
<a name="l07926"></a>07926 $   <span class="keywordflow">return</span> <a class="code" href="a00029.htm#ga5e96023070a7e836d57ff9f4fac8a341" title="Создает (смешивает) цвет из трех базовых цветов (компонент).">RGB</a> (<a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ir * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ig * 255), <a class="code" href="a00032.htm#gacd66e8cacf954c3bc3bba81d09425a12" title="Округляет число до целого">ROUND</a> (ib * 255));
<a name="l07927"></a>07927     }
<a name="l07928"></a>07928 
<a name="l07929"></a>07929 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07930"></a>07930 
<a name="l07931"></a>07931 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l07932"></a>07932 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (T x, T a, T b)
<a name="l07933"></a>07933     {
<a name="l07934"></a>07934     <span class="keywordflow">return</span> a &lt;= x &amp;&amp; x &lt;= b;
<a name="l07935"></a>07935     }
<a name="l07936"></a>07936 
<a name="l07937"></a>07937 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07938"></a>07938 
<a name="l07939"></a>07939 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (<span class="keyword">const</span> POINT&amp; pt, <span class="keyword">const</span> RECT&amp; rect)
<a name="l07940"></a>07940     {
<a name="l07941"></a>07941     _TX_IF_ARGUMENT_FAILED (&amp;pt)   return 0;
<a name="l07942"></a>07942     _TX_IF_ARGUMENT_FAILED (&amp;rect) return 0;
<a name="l07943"></a>07943 
<a name="l07944"></a>07944     return <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.x, rect.left, rect.right) &amp;&amp;
<a name="l07945"></a>07945            <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.y, rect.top,  rect.bottom);
<a name="l07946"></a>07946     }
<a name="l07947"></a>07947 
<a name="l07948"></a>07948 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07949"></a>07949 
<a name="l07950"></a>07950 inline <span class="keywordtype">bool</span> <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (const COORD&amp; pt, const SMALL_RECT&amp; rect)
<a name="l07951"></a>07951     {
<a name="l07952"></a>07952     _TX_IF_ARGUMENT_FAILED (&amp;pt)   return 0;
<a name="l07953"></a>07953     _TX_IF_ARGUMENT_FAILED (&amp;rect) return 0;
<a name="l07954"></a>07954 
<a name="l07955"></a>07955     return <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.X, rect.Left, rect.Right) &amp;&amp;
<a name="l07956"></a>07956            <a class="code" href="a00032.htm#gaacbe12190c9bbc9e39741eb71ded6f35" title="Проверка, находится ли параметр х внутри замкнутого интервала [a; b].">In</a> (pt.Y, rect.Top,  rect.Bottom);
<a name="l07957"></a>07957     }
<a name="l07958"></a>07958 
<a name="l07959"></a>07959 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07960"></a>07960 
<a name="l07961"></a>07961 inline <span class="keywordtype">int</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">int</span> range)
<a name="l07962"></a>07962     {
<a name="l07963"></a>07963     <span class="keywordflow">return</span> rand() % range;
<a name="l07964"></a>07964     }
<a name="l07965"></a>07965 
<a name="l07966"></a>07966 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07967"></a>07967 
<a name="l07968"></a>07968 <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="a00032.htm#gaa4558a3bf2a126a9e19c5a3655520787" title="Генератор случайных чисел">random</a> (<span class="keywordtype">double</span> left, <span class="keywordtype">double</span> right)
<a name="l07969"></a>07969     {
<a name="l07970"></a>07970     <span class="keywordflow">return</span> left + (right - left) * ((<span class="keywordtype">double</span>) rand() / RAND_MAX);
<a name="l07971"></a>07971     }
<a name="l07972"></a>07972 
<a name="l07973"></a>07973 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07974"></a>07974 
<a name="l07975"></a>07975 template &lt;typename T&gt;
<a name="l07976"></a>07976 inline T zero()
<a name="l07977"></a>07977 <span class="preprocessor">#ifdef _MSC_VER_6</span>
<a name="l07978"></a>07978 <span class="preprocessor"></span>    { T __zero = {0}; <span class="keywordflow">return</span> __zero; }
<a name="l07979"></a>07979 
<a name="l07980"></a>07980 <span class="preprocessor">#else</span>
<a name="l07981"></a>07981 <span class="preprocessor"></span>    { T __zero = { }; <span class="keywordflow">return</span> __zero; }
<a name="l07982"></a>07982 
<a name="l07983"></a>07983 <span class="preprocessor">#endif</span>
<a name="l07984"></a>07984 <span class="preprocessor"></span>
<a name="l07985"></a>07985 <span class="comment">//}</span>
<a name="l07986"></a>07986 <span class="comment">//=================================================================================================================</span>
<a name="l07987"></a>07987 
<a name="l07988"></a>07988 <span class="comment">//=================================================================================================================</span>
<a name="l07989"></a>07989 <span class="comment">//{          txDialog methods implementation</span>
<a name="l07990"></a>07990 <span class="comment">//           Реализация методов класса txDialog</span>
<a name="l07991"></a>07991 <span class="comment">//=================================================================================================================</span>
<a name="l07992"></a>07992 
<a name="l07993"></a>07993 <a class="code" href="a00009.htm#a2c09320a023bef21f6857d2dae75931b" title="Конструктор.">txDialog::txDialog</a> () :
<a name="l07994"></a>07994     layout_ (NULL)
<a name="l07995"></a>07995     {$1}
<a name="l07996"></a>07996 
<a name="l07997"></a>07997 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l07998"></a>07998 
<a name="l07999"></a>07999 <a class="code" href="a00009.htm#a2c09320a023bef21f6857d2dae75931b" title="Конструктор.">txDialog::txDialog</a> (<span class="keyword">const</span> Layout* layout) :
<a name="l08000"></a>08000     layout_ (layout)
<a name="l08001"></a>08001     {$1}
<a name="l08002"></a>08002 
<a name="l08003"></a>08003 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08004"></a>08004 
<a name="l08005"></a>08005 <span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a>* <a class="code" href="a00009.htm#a963d3281c5a4cf4989fa63552f9b52de" title="Устанавливает текущий макет диалогового окна.">txDialog::setLayout</a> (<span class="keyword">const</span> Layout* layout)
<a name="l08006"></a>08006     {
<a name="l08007"></a>08007 $1  <span class="keywordflow">return</span> std::swap (<a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7" title="Текущий макет диалога.">layout_</a>, layout), layout;
<a name="l08008"></a>08008     }
<a name="l08009"></a>08009 
<a name="l08010"></a>08010 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08011"></a>08011 
<a name="l08012"></a>08012 INT_PTR <a class="code" href="a00009.htm#ab7ce59b17cd589692664cd115addf99b" title="Запускает диалоговое окно.">txDialog::dialogBox</a> (WORD resourceID)
<a name="l08013"></a>08013     {
<a name="l08014"></a>08014 $1  <span class="keyword">const</span> <span class="keywordtype">char</span>* resName = (<span class="keywordtype">char</span>*)(ptrdiff_t) resourceID;
<a name="l08015"></a>08015 
<a name="l08016"></a>08016 $   <span class="keywordflow">if</span> (!FindResource (NULL, resName, RT_DIALOG)) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Не найден ресурс диалога %d&quot;</span> <a class="code" href="a00032.htm#gae4dfd7b0d66121016d6466d2ff10e8ba" title="Макрос, позволяющий передать переменное число параметров в какой-либо другой макрос.">_</a> resourceID), 0;
<a name="l08017"></a>08017 
<a name="l08018"></a>08018 $   <span class="keywordflow">return</span> DialogBoxParam (NULL, resName, NULL, <a class="code" href="a00009.htm#a6a1154855e8e03469745dd510bdfd198" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна in32 должна быть статическ...">dialogProc__</a>, (LPARAM) <span class="keyword">this</span>);
<a name="l08019"></a>08019     }
<a name="l08020"></a>08020 
<a name="l08021"></a>08021 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08022"></a>08022 
<a name="l08023"></a>08023 INT_PTR <a class="code" href="a00009.htm#ab7ce59b17cd589692664cd115addf99b" title="Запускает диалоговое окно.">txDialog::dialogBox</a> (<span class="keyword">const</span> <a class="code" href="a00007.htm" title="Класс для описания элемента диалогового окна (контрола)">txDialog::Layout</a>* layout <span class="comment">/*= NULL*/</span>, <span class="keywordtype">size_t</span> bufsize <span class="comment">/*= 0*/</span>)
<a name="l08024"></a>08024     {
<a name="l08025"></a>08025 $1  <span class="keywordflow">if</span> (!layout)  layout = <a class="code" href="a00009.htm#a20f23d5aad5b4e3cc8ad8d7c49ac4fb7" title="Текущий макет диалога.">layout_</a>;
<a name="l08026"></a>08026 $   <span class="keywordflow">if</span> (!layout)  <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;Не установлен динамический шаблон диалога&quot;</span>), 0;
<a name="l08027"></a>08027 
<a name="l08028"></a>08028 $   <span class="keywordflow">if</span> (!bufsize) bufsize = 1024;
<a name="l08029"></a>08029 
<a name="l08030"></a>08030 $   DLGTEMPLATE* tmpl = (DLGTEMPLATE*) GlobalAlloc (GPTR, bufsize);
<a name="l08031"></a>08031 $   <span class="keywordflow">if</span> (!tmpl) <span class="keywordflow">return</span> <a class="code" href="a00032.htm#ga61997e2af7f7c3d2e40ef9a612000220" title="Выводит развернутое диагностическое сообщение в отладочном режиме.">TX_DEBUG_ERROR</a> (<span class="stringliteral">&quot;GlobalAlloc(): Нет памяти для шаблона диалога&quot;</span>), 0;
<a name="l08032"></a>08032 
<a name="l08033"></a>08033 $   <span class="keyword">const</span> Layout* dlg = &amp;layout[0];
<a name="l08034"></a>08034 $   <span class="keyword">const</span> Layout  def = { <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674a4c775f01785801b0b11ec0cd5bdd7230" title="Начало описания диалога">DIALOG</a>, NULL, 0, 0,0,0,0, WS_CAPTION | WS_SYSMENU | DS_MODALFRAME | DS_CENTER, <span class="stringliteral">&quot;MS Shell Dlg&quot;</span>, 8 };
<a name="l08035"></a>08035 
<a name="l08036"></a>08036 $   <span class="keywordtype">void</span>* ptr = _tx_DLGTEMPLATE_Create (tmpl, bufsize,
<a name="l08037"></a>08037                                        (dlg-&gt;style? dlg-&gt;style : def.style) | DS_SETFONT, 0, 0,
<a name="l08038"></a>08038                                         dlg-&gt;x, dlg-&gt;y, dlg-&gt;sx, dlg-&gt;sy,
<a name="l08039"></a>08039                                         dlg-&gt;caption?  dlg-&gt;caption  : def.caption,
<a name="l08040"></a>08040                                         dlg-&gt;font?     dlg-&gt;font     : def.font,
<a name="l08041"></a>08041                                         dlg-&gt;fontsize? dlg-&gt;fontsize : def.fontsize, NULL);
<a name="l08042"></a>08042 $   WORD i = 0;
<a name="l08043"></a>08043 $   <span class="keywordflow">for</span> (i = 1; layout[i].<a class="code" href="a00007.htm#aef0e185c3b1c26598c04af6fc185afd2" title="Тип контрола">wndclass</a> != <a class="code" href="a00031.htm#gga077745aacfb8431d6529e20ad67d1674adc6f24fd6915a3f2786a1b7045406924" title="Конец описания диалога">END</a>; ++i)
<a name="l08044"></a>08044         {
<a name="l08045"></a>08045 $       <span class="keyword">const</span> Layout* item = &amp;layout[i];
<a name="l08046"></a>08046 
<a name="l08047"></a>08047 $       ptr = _tx_DLGTEMPLATE_Add (ptr, bufsize - ((<span class="keywordtype">char</span>*)ptr - (<span class="keywordtype">char</span>*)tmpl),
<a name="l08048"></a>08048                                    item-&gt;style | WS_VISIBLE, 0, item-&gt;x, item-&gt;y, item-&gt;sx, item-&gt;sy,
<a name="l08049"></a>08049                                    item-&gt;id, (<span class="keyword">const</span> <span class="keywordtype">char</span>*) item-&gt;wndclass, item-&gt;caption);
<a name="l08050"></a>08050         }
<a name="l08051"></a>08051 
<a name="l08052"></a>08052 $   tmpl-&gt;cdit = (<span class="keywordtype">unsigned</span> short) (i-1);
<a name="l08053"></a>08053 $   INT_PTR res = DialogBoxIndirectParam (NULL, tmpl, NULL, <a class="code" href="a00009.htm#a6a1154855e8e03469745dd510bdfd198" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна in32 должна быть статическ...">dialogProc__</a>, (LPARAM) <span class="keyword">this</span>);
<a name="l08054"></a>08054 
<a name="l08055"></a>08055 $   GlobalFree (tmpl);
<a name="l08056"></a>08056 
<a name="l08057"></a>08057 $   <span class="keywordflow">return</span> res;
<a name="l08058"></a>08058     }
<a name="l08059"></a>08059 
<a name="l08060"></a>08060 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08061"></a>08061 
<a name="l08062"></a>08062 <span class="keywordtype">int</span> <a class="code" href="a00009.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">txDialog::dialogProc</a> (HWND, UINT, WPARAM, LPARAM)
<a name="l08063"></a>08063     {
<a name="l08064"></a>08064 $1  <span class="keywordflow">return</span> FALSE;
<a name="l08065"></a>08065     }
<a name="l08066"></a>08066 
<a name="l08067"></a>08067 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08068"></a>08068 
<a name="l08069"></a>08069 ptrdiff_t CALLBACK <a class="code" href="a00009.htm#a6a1154855e8e03469745dd510bdfd198" title="Настоящая диалоговая функция (не txDialog::dialogProc(), т.к. функция окна in32 должна быть статическ...">txDialog::dialogProc__</a> (HWND wnd, UINT msg, WPARAM wParam, LPARAM lParam)
<a name="l08070"></a>08070     {
<a name="l08071"></a>08071 $1  <span class="keyword">static</span> <a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>* this__ = NULL;
<a name="l08072"></a>08072 
<a name="l08073"></a>08073 $   <span class="keywordflow">if</span> (msg == WM_INITDIALOG) this__ = (<a class="code" href="a00009.htm" title="Базовый класс для диалоговых окон.">txDialog</a>*) lParam;
<a name="l08074"></a>08074 $   <span class="keywordflow">if</span> (!this__) <span class="keywordflow">return</span> FALSE;
<a name="l08075"></a>08075 
<a name="l08076"></a>08076 $   <span class="keywordflow">switch</span> (msg)
<a name="l08077"></a>08077         {
<a name="l08078"></a>08078         <span class="keywordflow">case</span> WM_INITDIALOG: $ SetForegroundWindow (wnd);         <span class="keywordflow">break</span>;
<a name="l08079"></a>08079 
<a name="l08080"></a>08080         <span class="keywordflow">case</span> WM_COMMAND:    $ <span class="keywordflow">switch</span> (LOWORD (wParam))
<a name="l08081"></a>08081             {
<a name="l08082"></a>08082             <span class="keywordflow">case</span> IDOK:
<a name="l08083"></a>08083             <span class="keywordflow">case</span> IDCANCEL:  $ SetForegroundWindow (<a class="code" href="a00029.htm#gae47b05ec325f3bda871e46c8c74919e8" title="Возвращает дескриптор окна холста">txWindow</a>());
<a name="l08084"></a>08084                             $ EndDialog (wnd, (INT_PTR) this__); <span class="keywordflow">break</span>;
<a name="l08085"></a>08085             <span class="keywordflow">default</span>:        $ <span class="keywordflow">break</span>;
<a name="l08086"></a>08086             }
<a name="l08087"></a>08087 
<a name="l08088"></a>08088         <span class="keywordflow">default</span>:            $ <span class="keywordflow">break</span>;
<a name="l08089"></a>08089         }
<a name="l08090"></a>08090 
<a name="l08091"></a>08091 $   <span class="keywordflow">return</span> this__-&gt; <a class="code" href="a00009.htm#ad25c6de764a1157b6bc7a0738794f906" title="Функция обработки сообщений диалогового окна.">dialogProc</a> (wnd, msg, wParam, lParam);
<a name="l08092"></a>08092     }
<a name="l08093"></a>08093 
<a name="l08094"></a>08094 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08095"></a>08095 
<a name="l08096"></a>08096 <span class="keywordtype">void</span>* _tx_DLGTEMPLATE_Create (<span class="keywordtype">void</span>* globalMem, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l08097"></a>08097                               WORD controls, <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l08098"></a>08098                               <span class="keyword">const</span> <span class="keywordtype">char</span> caption[], <span class="keyword">const</span> <span class="keywordtype">char</span> font[], WORD fontsize, HANDLE menu)
<a name="l08099"></a>08099     {
<a name="l08100"></a>08100 $1  _TX_IF_ARGUMENT_FAILED (globalMem) return NULL;
<a name="l08101"></a>08101 
<a name="l08102"></a>08102 $   WORD* pw = (WORD*) globalMem;
<a name="l08103"></a>08103 
<a name="l08104"></a>08104 $   DLGTEMPLATE* tmpl = ((DLGTEMPLATE*&amp;) pw)++;
<a name="l08105"></a>08105 
<a name="l08106"></a>08106 $   tmpl-&gt;style = style;
<a name="l08107"></a>08107 $   tmpl-&gt;dwExtendedStyle = exStyle;
<a name="l08108"></a>08108 $   tmpl-&gt;cdit  = controls;
<a name="l08109"></a>08109 $   tmpl-&gt;x     = x;
<a name="l08110"></a>08110 $   tmpl-&gt;y     = y;
<a name="l08111"></a>08111 $   tmpl-&gt;cx    = cx;
<a name="l08112"></a>08112 $   tmpl-&gt;cy    = cy;
<a name="l08113"></a>08113 
<a name="l08114"></a>08114 $   *pw++ = (WORD)(ptrdiff_t) NULL;
<a name="l08115"></a>08115 $   *pw++ = (WORD)(ptrdiff_t) menu;
<a name="l08116"></a>08116 
<a name="l08117"></a>08117 $   if (caption)
<a name="l08118"></a>08118         {
<a name="l08119"></a>08119 $       pw  += MultiByteToWideChar   (_TX_CP, 0, caption? caption : <span class="stringliteral">&quot;&quot;</span>, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l08120"></a>08120                                      (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)globalMem) : 0xFFFF));
<a name="l08121"></a>08121         }
<a name="l08122"></a>08122 
<a name="l08123"></a>08123 $   <span class="keywordflow">if</span> (style &amp; DS_SETFONT)
<a name="l08124"></a>08124          {
<a name="l08125"></a>08125 $        *pw++ = fontsize;
<a name="l08126"></a>08126 $         pw  += MultiByteToWideChar (_TX_CP, 0, font?    font    : <span class="stringliteral">&quot;&quot;</span>, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l08127"></a>08127                                      (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)globalMem) : 0xFFFF));
<a name="l08128"></a>08128          }
<a name="l08129"></a>08129 
<a name="l08130"></a>08130 $   <span class="keywordflow">return</span> pw;
<a name="l08131"></a>08131     }
<a name="l08132"></a>08132 
<a name="l08133"></a>08133 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08134"></a>08134 
<a name="l08135"></a>08135 <span class="keywordtype">void</span>* _tx_DLGTEMPLATE_Add (<span class="keywordtype">void</span>* dlgTemplatePtr, <span class="keywordtype">size_t</span> bufsize, DWORD style, DWORD exStyle,
<a name="l08136"></a>08136                            <span class="keywordtype">short</span> x, <span class="keywordtype">short</span> y, <span class="keywordtype">short</span> cx, <span class="keywordtype">short</span> cy,
<a name="l08137"></a>08137                            WORD <span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">char</span> wclass[], <span class="keyword">const</span> <span class="keywordtype">char</span> caption[])
<a name="l08138"></a>08138     {
<a name="l08139"></a>08139 $1  _TX_IF_ARGUMENT_FAILED (dlgTemplatePtr) return NULL;
<a name="l08140"></a>08140 
<a name="l08141"></a>08141 $   WORD* pw = (LPWORD) dlgTemplatePtr;  <span class="comment">// Force align at word boundary</span>
<a name="l08142"></a>08142 $   (ULONG&amp;) pw  += 3;
<a name="l08143"></a>08143 $   (ULONG&amp;) pw &gt;&gt;= 2;
<a name="l08144"></a>08144 $   (ULONG&amp;) pw &lt;&lt;= 2;
<a name="l08145"></a>08145 
<a name="l08146"></a>08146 $   DLGITEMTEMPLATE* tmpl = ((DLGITEMTEMPLATE*&amp;) pw)++;
<a name="l08147"></a>08147 
<a name="l08148"></a>08148 $   tmpl-&gt;style = style;
<a name="l08149"></a>08149 $   tmpl-&gt;dwExtendedStyle = exStyle;
<a name="l08150"></a>08150 $   tmpl-&gt;x     = x;
<a name="l08151"></a>08151 $   tmpl-&gt;y     = y;
<a name="l08152"></a>08152 $   tmpl-&gt;cx    = cx;
<a name="l08153"></a>08153 $   tmpl-&gt;cy    = cy;
<a name="l08154"></a>08154 $   tmpl-&gt;<span class="keywordtype">id</span>    = <span class="keywordtype">id</span>;
<a name="l08155"></a>08155 
<a name="l08156"></a>08156 $   if (HIWORD (wclass) == 0xFFFF)
<a name="l08157"></a>08157         {
<a name="l08158"></a>08158 $       *pw++ = (WORD) (HIWORD ((ptrdiff_t) wclass));
<a name="l08159"></a>08159 $       *pw++ = (WORD) (LOWORD ((ptrdiff_t) wclass));
<a name="l08160"></a>08160         }
<a name="l08161"></a>08161     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (wclass)
<a name="l08162"></a>08162         {
<a name="l08163"></a>08163 $       pw  += MultiByteToWideChar (_TX_CP, 0, const_cast &lt;char*&gt; (wclass), -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l08164"></a>08164                                    (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)dlgTemplatePtr) : 0xFFFF));
<a name="l08165"></a>08165         }
<a name="l08166"></a>08166     <span class="keywordflow">else</span>
<a name="l08167"></a>08167         {
<a name="l08168"></a>08168 $       *pw++ = 0;
<a name="l08169"></a>08169         }
<a name="l08170"></a>08170 
<a name="l08171"></a>08171 $   <span class="keywordflow">if</span> (caption)
<a name="l08172"></a>08172          {
<a name="l08173"></a>08173 $        pw  += MultiByteToWideChar (_TX_CP, 0, caption, -1, (<span class="keywordtype">wchar_t</span>*) pw,
<a name="l08174"></a>08174                                     (<span class="keywordtype">int</span>) (bufsize? bufsize - ((<span class="keywordtype">char</span>*)pw - (<span class="keywordtype">char</span>*)dlgTemplatePtr) : 0xFFFF));
<a name="l08175"></a>08175          }
<a name="l08176"></a>08176     <span class="keywordflow">else</span>
<a name="l08177"></a>08177         {
<a name="l08178"></a>08178 $       *pw++ = 0;
<a name="l08179"></a>08179         }
<a name="l08180"></a>08180 
<a name="l08181"></a>08181 $   *pw++ = 0;
<a name="l08182"></a>08182 
<a name="l08183"></a>08183 $   <span class="keywordflow">return</span> pw;
<a name="l08184"></a>08184     }
<a name="l08185"></a>08185 
<a name="l08186"></a>08186 <span class="comment">//}</span>
<a name="l08187"></a>08187 <span class="comment">//=================================================================================================================</span>
<a name="l08188"></a>08188 
<a name="l08189"></a>08189 <span class="comment">//=================================================================================================================</span>
<a name="l08190"></a>08190 <span class="comment">//{          Cleaning up the utility macros</span>
<a name="l08191"></a>08191 <span class="comment">//           Очистка служебных макросов</span>
<a name="l08192"></a>08192 <span class="comment">//=================================================================================================================</span>
<a name="l08193"></a>08193 
<a name="l08194"></a>08194 <span class="preprocessor">#undef       $</span>
<a name="l08195"></a>08195 <span class="preprocessor"></span>
<a name="l08196"></a>08196 <span class="comment">//}</span>
<a name="l08197"></a>08197 <span class="comment">//=================================================================================================================</span>
<a name="l08198"></a>08198 
<a name="l08200"></a>08200 <span class="comment">//}</span>
<a name="l08201"></a>08201 <span class="comment">//=================================================================================================================</span>
<a name="l08202"></a>08202 
<a name="l08205"></a>08205   }  <span class="comment">// namespace TX, anonymous namespace</span>
<a name="l08206"></a>08206 
<a name="l08209"></a>08209 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08210"></a>08210 <span class="comment">//{          Easy using of TX:: and some of std::</span>
<a name="l08211"></a>08211 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08212"></a>08212 
<a name="l08213"></a>08213 <span class="keyword">using namespace </span>TX;            <span class="comment">// Allow easy usage of TXLib functions</span>
<a name="l08214"></a>08214 
<a name="l08215"></a>08215 using ::std::cin;              <span class="comment">// Predefined usings to avoid &quot;using namespace std&quot;</span>
<a name="l08216"></a>08216 using ::std::cout;
<a name="l08217"></a>08217 using ::std::cerr;
<a name="l08218"></a>08218 using ::std::string;
<a name="l08219"></a>08219 
<a name="l08220"></a>08220 <span class="comment">//}</span>
<a name="l08221"></a>08221 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08222"></a>08222 
<a name="l08223"></a>08223 <span class="comment">//=================================================================================================================</span>
<a name="l08224"></a>08224 <span class="comment">//{          [Experimental] Debugging macros</span>
<a name="l08226"></a>08226 <span class="comment"></span><span class="comment">//=================================================================================================================</span>
<a name="l08227"></a>08227 
<a name="l08228"></a>08228 <span class="comment">//{----------------------------------------------------------------------------------------------------------------</span>
<a name="l08301"></a>08301 <span class="comment"></span><span class="comment">//}----------------------------------------------------------------------------------------------------------------</span>
<a name="l08302"></a>08302 
<a name="l08303"></a>08303 <span class="preprocessor">#ifndef __TX_DEBUG_MACROS</span>
<a name="l08304"></a><a class="code" href="a00032.htm#gaaa5d2cd4ba134312dcaca4e8316bbe9e">08304</a> <span class="preprocessor"></span><span class="preprocessor">#define __TX_DEBUG_MACROS  (&quot;Группа отладочных $-макросов&quot;)</span>
<a name="l08305"></a>08305 <span class="preprocessor"></span>
<a name="l08307"></a>08307 
<a name="l08308"></a>08308 <span class="preprocessor">#define $_(var)      _txDump (var)</span>
<a name="l08309"></a>08309 <span class="preprocessor"></span>
<a name="l08310"></a>08310 <span class="preprocessor">#define $(var)     ( _txDump ((var),  &quot;[&quot; #var &quot; = &quot;, &quot;] &quot;) )</span>
<a name="l08311"></a>08311 <span class="preprocessor"></span>
<a name="l08312"></a>08312 <span class="preprocessor">#define $$(cmd)    (  std::cerr &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;,  \</span>
<a name="l08313"></a>08313 <span class="preprocessor">                     _txDump ((cmd),&quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;: &quot;, &quot;, DONE]\n&quot;) )</span>
<a name="l08314"></a>08314 <span class="preprocessor"></span>
<a name="l08315"></a>08315 <span class="preprocessor">#define $$_(cmd)   (  std::cerr &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;,  \</span>
<a name="l08316"></a>08316 <span class="preprocessor">                     _txDump ((cmd),  &quot;[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;: &quot;, &quot;, DONE]\n&quot;) )</span>
<a name="l08317"></a>08317 <span class="preprocessor"></span>
<a name="l08318"></a>08318 <span class="preprocessor">#define $$$(cmd)   {  std::cerr &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;;  \</span>
<a name="l08319"></a>08319 <span class="preprocessor">                     _txDumpSuffix (&quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot; DONE]\n&quot;); { cmd; } }</span>
<a name="l08320"></a>08320 <span class="preprocessor"></span>
<a name="l08321"></a>08321 <span class="preprocessor">#define $$$_(cmd)  {  std::cerr &lt;&lt;  &quot;\n[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot;]\n&quot;;  \</span>
<a name="l08322"></a>08322 <span class="preprocessor">                     _txDumpSuffix (  &quot;[&quot; __TX_FILELINE__ &quot;: &quot; #cmd &quot; DONE]\n&quot;); { cmd; } }</span>
<a name="l08323"></a>08323 <span class="preprocessor"></span>
<a name="l08324"></a>08324 <span class="preprocessor">#define $$$$       {       txOutputDebugPrintf (&quot;\f\n&quot;); \</span>
<a name="l08325"></a>08325 <span class="preprocessor">                   { $s $l txOutputDebugPrintf (&quot;\f&quot; &quot;[%s (%d) %s]&quot;, __FILE__, __LINE__, __TX_FUNCTION__); } txOutputDebugPrintf (&quot;\f\n&quot;); }</span>
<a name="l08326"></a>08326 <span class="preprocessor"></span>
<a name="l08327"></a>08327 <span class="preprocessor">#define $$$$_      {       txOutputDebugPrintf (&quot;\f\n&quot;); \</span>
<a name="l08328"></a>08328 <span class="preprocessor">                   { $s $l txOutputDebugPrintf (&quot;\f&quot; &quot;[%s]&quot;, __func__);                                    } txOutputDebugPrintf (&quot;\f\n&quot;); }</span>
<a name="l08329"></a>08329 <span class="preprocessor"></span>
<a name="l08330"></a>08330 <span class="preprocessor">#define $n            std::cerr &lt;&lt; &quot;\n&quot;;</span>
<a name="l08331"></a>08331 <span class="preprocessor"></span>
<a name="l08332"></a>08332 <span class="preprocessor">#define $s            _txSaveConsoleAttr __txSaveConsoleAttr;</span>
<a name="l08333"></a>08333 <span class="preprocessor"></span>
<a name="l08334"></a>08334 <span class="preprocessor">#define $T            txSetConsoleAttr (0x00);</span>
<a name="l08335"></a>08335 <span class="preprocessor"></span><span class="preprocessor">#define $B            txSetConsoleAttr (0x01);</span>
<a name="l08336"></a>08336 <span class="preprocessor"></span><span class="preprocessor">#define $G            txSetConsoleAttr (0x02);</span>
<a name="l08337"></a>08337 <span class="preprocessor"></span><span class="preprocessor">#define $C            txSetConsoleAttr (0x03);</span>
<a name="l08338"></a>08338 <span class="preprocessor"></span><span class="preprocessor">#define $R            txSetConsoleAttr (0x04);</span>
<a name="l08339"></a>08339 <span class="preprocessor"></span><span class="preprocessor">#define $M            txSetConsoleAttr (0x05);</span>
<a name="l08340"></a>08340 <span class="preprocessor"></span><span class="preprocessor">#define $Y            txSetConsoleAttr (0x06);</span>
<a name="l08341"></a>08341 <span class="preprocessor"></span><span class="preprocessor">#define $d            txSetConsoleAttr (0x07);</span>
<a name="l08342"></a>08342 <span class="preprocessor"></span><span class="preprocessor">#define $D            txSetConsoleAttr (0x08);</span>
<a name="l08343"></a>08343 <span class="preprocessor"></span><span class="preprocessor">#define $b            txSetConsoleAttr (0x09);</span>
<a name="l08344"></a>08344 <span class="preprocessor"></span><span class="preprocessor">#define $g            txSetConsoleAttr (0x0a);</span>
<a name="l08345"></a>08345 <span class="preprocessor"></span><span class="preprocessor">#define $c            txSetConsoleAttr (0x0b);</span>
<a name="l08346"></a>08346 <span class="preprocessor"></span><span class="preprocessor">#define $r            txSetConsoleAttr (0x0c);</span>
<a name="l08347"></a>08347 <span class="preprocessor"></span><span class="preprocessor">#define $m            txSetConsoleAttr (0x0d);</span>
<a name="l08348"></a>08348 <span class="preprocessor"></span><span class="preprocessor">#define $y            txSetConsoleAttr (0x0e);</span>
<a name="l08349"></a>08349 <span class="preprocessor"></span><span class="preprocessor">#define $t            txSetConsoleAttr (0x0f);</span>
<a name="l08350"></a>08350 <span class="preprocessor"></span>
<a name="l08351"></a>08351 <span class="preprocessor">#define $i            txSetConsoleAttr (0x1b);</span>
<a name="l08352"></a>08352 <span class="preprocessor"></span><span class="preprocessor">#define $I            txSetConsoleAttr (0x1e);</span>
<a name="l08353"></a>08353 <span class="preprocessor"></span><span class="preprocessor">#define $a            txSetConsoleAttr (0x2a);</span>
<a name="l08354"></a>08354 <span class="preprocessor"></span><span class="preprocessor">#define $A            txSetConsoleAttr (0x2e);</span>
<a name="l08355"></a>08355 <span class="preprocessor"></span><span class="preprocessor">#define $e            txSetConsoleAttr (0x4f);</span>
<a name="l08356"></a>08356 <span class="preprocessor"></span><span class="preprocessor">#define $E            txSetConsoleAttr (0x4e);</span>
<a name="l08357"></a>08357 <span class="preprocessor"></span><span class="preprocessor">#define $w            txSetConsoleAttr (0x5d);</span>
<a name="l08358"></a>08358 <span class="preprocessor"></span><span class="preprocessor">#define $W            txSetConsoleAttr (0x5e);</span>
<a name="l08359"></a>08359 <span class="preprocessor"></span><span class="preprocessor">#define $f            txSetConsoleAttr (0xc0);</span>
<a name="l08360"></a>08360 <span class="preprocessor"></span><span class="preprocessor">#define $F            txSetConsoleAttr (0xc5);</span>
<a name="l08361"></a>08361 <span class="preprocessor"></span><span class="preprocessor">#define $l            txSetConsoleAttr (0x80);</span>
<a name="l08362"></a>08362 <span class="preprocessor"></span><span class="preprocessor">#define $L            txSetConsoleAttr (0x87);</span>
<a name="l08363"></a>08363 <span class="preprocessor"></span>
<a name="l08364"></a>08364 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08365"></a>08365 
<a name="l08366"></a>08366 <span class="preprocessor">#if !defined (_MSC_VER_6)</span>
<a name="l08367"></a>08367 <span class="preprocessor"></span>
<a name="l08368"></a>08368 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span>
<a name="l08369"></a>08369 <span class="keyword">const</span> T&amp; _txDump (<span class="keyword">const</span> T&amp; value, <span class="keyword">const</span> <span class="keywordtype">char</span>* prefix = <span class="stringliteral">&quot;&quot;</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* suffix = <span class="stringliteral">&quot;&quot;</span>)
<a name="l08370"></a>08370     {
<a name="l08371"></a>08371     std::cerr &lt;&lt; prefix &lt;&lt; value &lt;&lt; suffix;
<a name="l08372"></a>08372     <span class="keywordflow">return</span> value;
<a name="l08373"></a>08373     }
<a name="l08374"></a>08374 
<a name="l08375"></a>08375 <span class="preprocessor">#endif</span>
<a name="l08376"></a>08376 <span class="preprocessor"></span>
<a name="l08377"></a>08377 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span>
<a name="l08378"></a>08378       T&amp; _txDump (      T&amp; value, <span class="keyword">const</span> <span class="keywordtype">char</span>* prefix = <span class="stringliteral">&quot;&quot;</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* suffix = <span class="stringliteral">&quot;&quot;</span>)
<a name="l08379"></a>08379     {
<a name="l08380"></a>08380     std::cerr &lt;&lt; prefix &lt;&lt; value &lt;&lt; suffix;
<a name="l08381"></a>08381     <span class="keywordflow">return</span> value;
<a name="l08382"></a>08382     }
<a name="l08383"></a>08383 
<a name="l08384"></a>08384 <span class="keyword">struct </span>_txDumpSuffix
<a name="l08385"></a>08385     {
<a name="l08386"></a>08386     <span class="keyword">const</span> <span class="keywordtype">char</span>* suffix_;
<a name="l08387"></a>08387 
<a name="l08388"></a>08388     <span class="keyword">inline</span>  _txDumpSuffix (<span class="keyword">const</span> <span class="keywordtype">char</span>* suffix = <span class="stringliteral">&quot;&quot;</span>) : suffix_ (suffix)     {}
<a name="l08389"></a>08389     <span class="keyword">inline</span> ~_txDumpSuffix()                         { std::cerr &lt;&lt; suffix_; }
<a name="l08390"></a>08390 
<a name="l08391"></a>08391     _txDumpSuffix             (<span class="keyword">const</span> _txDumpSuffix&amp;);
<a name="l08392"></a>08392     _txDumpSuffix&amp; operator = (<span class="keyword">const</span> _txDumpSuffix&amp;);
<a name="l08393"></a>08393     };
<a name="l08394"></a>08394 
<a name="l08395"></a>08395 <span class="keyword">struct </span>_txSaveConsoleAttr
<a name="l08396"></a>08396     {
<a name="l08397"></a>08397     <span class="keywordtype">unsigned</span> attr_;
<a name="l08398"></a>08398 
<a name="l08399"></a>08399     <span class="keyword">inline</span>  _txSaveConsoleAttr()           : attr_ (<a class="code" href="a00029.htm#ga9f2215b90264133de36ed7c2120f75f5" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a> ()) {}
<a name="l08400"></a>08400     <span class="keyword">inline</span>  _txSaveConsoleAttr (WORD attr) : attr_ (<a class="code" href="a00029.htm#ga9f2215b90264133de36ed7c2120f75f5" title="Возвращает текущие цветовые атрибуты консоли.">txGetConsoleAttr</a> ()) { <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr);  }
<a name="l08401"></a>08401     <span class="keyword">inline</span> ~_txSaveConsoleAttr()                                         { <a class="code" href="a00029.htm#ga3b4c1a73b014daa67100c9dbb875f3bf" title="Устанавливает цветовые атрибуты консоли.">txSetConsoleAttr</a> (attr_); }
<a name="l08402"></a>08402     };
<a name="l08403"></a>08403 
<a name="l08405"></a>08405 
<a name="l08406"></a>08406 <span class="preprocessor">#endif</span>
<a name="l08407"></a>08407 <span class="preprocessor"></span>
<a name="l08408"></a>08408 <span class="comment">//}</span>
<a name="l08409"></a>08409 <span class="comment">//=================================================================================================================</span>
<a name="l08410"></a>08410 
<a name="l08411"></a>08411 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08412"></a>08412 <span class="comment">//{          Compiler- and platform-specific</span>
<a name="l08413"></a>08413 <span class="comment">//           Адаптация к компиляторам и платформам</span>
<a name="l08414"></a>08414 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08416"></a>08416 <span class="comment"></span>
<a name="l08417"></a>08417 <span class="preprocessor">#if defined (_GCC_VER) &amp;&amp; (_GCC_VER &gt;= 420)</span>
<a name="l08418"></a>08418 <span class="preprocessor"></span>
<a name="l08419"></a>08419 <span class="preprocessor">    #pragma GCC optimize          (&quot;strict-aliasing&quot;)</span>
<a name="l08420"></a>08420 <span class="preprocessor"></span>
<a name="l08421"></a>08421 <span class="preprocessor">    #if (_GCC_VER &gt;= 460)</span>
<a name="l08422"></a>08422 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic pop</span>
<a name="l08423"></a>08423 <span class="preprocessor"></span>
<a name="l08424"></a>08424 <span class="preprocessor">    #else</span>
<a name="l08425"></a>08425 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Wstrict-aliasing&quot;</span>
<a name="l08426"></a>08426 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic warning &quot;-Wshadow&quot;</span>
<a name="l08427"></a>08427 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l08428"></a>08428 <span class="preprocessor"></span>
<a name="l08429"></a>08429     <span class="comment">// Still block this warnings to avoid reporting about &quot;= {0}&quot; or &quot;= {}&quot; init style,</span>
<a name="l08430"></a>08430     <span class="comment">// and old style cast used in Windows.h RGB() macro.</span>
<a name="l08431"></a>08431 
<a name="l08432"></a>08432 <span class="preprocessor">    #pragma GCC diagnostic ignored &quot;-Wmissing-field-initializers&quot;</span>
<a name="l08433"></a>08433 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored &quot;-Wold-style-cast&quot;</span>
<a name="l08434"></a>08434 <span class="preprocessor"></span>
<a name="l08435"></a>08435     <span class="comment">// These warnings really occur at end of compilation, so block them too.</span>
<a name="l08436"></a>08436 
<a name="l08437"></a>08437 <span class="preprocessor">    #pragma GCC diagnostic ignored &quot;-Wunreachable-code&quot;</span>
<a name="l08438"></a>08438 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored &quot;-Wunused-label&quot;</span>
<a name="l08439"></a>08439 <span class="preprocessor"></span><span class="preprocessor">    #pragma GCC diagnostic ignored &quot;-Winline&quot;</span>
<a name="l08440"></a>08440 <span class="preprocessor"></span>
<a name="l08441"></a>08441 <span class="preprocessor">#endif</span>
<a name="l08442"></a>08442 <span class="preprocessor"></span>
<a name="l08443"></a>08443 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08444"></a>08444 
<a name="l08445"></a>08445 <span class="preprocessor">#if defined (_MSC_VER)</span>
<a name="l08446"></a>08446 <span class="preprocessor"></span>
<a name="l08447"></a>08447 <span class="preprocessor">    #pragma warning (default: 4127)             // conditional expression is constant</span>
<a name="l08448"></a>08448 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4351)             // new behavior: elements of array will be default initialized</span>
<a name="l08449"></a>08449 <span class="preprocessor"></span>
<a name="l08450"></a>08450 <span class="preprocessor">    #pragma warning (default: 4511)             // copy constructor could not be generated</span>
<a name="l08451"></a>08451 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4512)             // assignment operator could not be generated</span>
<a name="l08452"></a>08452 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4663)             // C++ language change: to explicitly specialize class template</span>
<a name="l08453"></a>08453 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 4702)             // unreachable code</span>
<a name="l08454"></a>08454 <span class="preprocessor"></span>
<a name="l08455"></a>08455 <span class="preprocessor">    #if (_MSC_VER &gt;= 1400)                      // MSVC 8 (2005) or greater</span>
<a name="l08456"></a>08456 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 26135)            // missing locking annotation</span>
<a name="l08457"></a>08457 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 28125)            // the function must be called from within a try/except block</span>
<a name="l08458"></a>08458 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 28159)            // consider using another function instead</span>
<a name="l08459"></a>08459 <span class="preprocessor"></span><span class="preprocessor">    #endif</span>
<a name="l08460"></a>08460 <span class="preprocessor"></span>
<a name="l08461"></a>08461     <span class="comment">// This warning really occur at end of compilation, so still block it.</span>
<a name="l08462"></a>08462 
<a name="l08463"></a>08463 <span class="preprocessor">    #pragma warning (disable: 4514)             // unreferenced inline function has been removed</span>
<a name="l08464"></a>08464 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4710)             // function not inlined</span>
<a name="l08465"></a>08465 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (disable: 4786)             // identifier was truncated to &#39;255&#39; characters in the debug information</span>
<a name="l08466"></a>08466 <span class="preprocessor"></span>
<a name="l08467"></a>08467 <span class="preprocessor">#endif</span>
<a name="l08468"></a>08468 <span class="preprocessor"></span>
<a name="l08469"></a>08469 <span class="preprocessor">#if defined (__INTEL_COMPILER)</span>
<a name="l08470"></a>08470 <span class="preprocessor"></span>
<a name="l08471"></a>08471 <span class="preprocessor">    #pragma warning (default:  174)             // remark: expression has no effect</span>
<a name="l08472"></a>08472 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  304)             // remark: access control not specified (&quot;public&quot; by default)</span>
<a name="l08473"></a>08473 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  522)             // remark: function redeclared &quot;inline&quot; after being called</span>
<a name="l08474"></a>08474 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default:  981)             // remark: operands are evaluated in unspecified order</span>
<a name="l08475"></a>08475 <span class="preprocessor"></span><span class="preprocessor">    #pragma warning (default: 1684)             // conversion from pointer to same-sized integral type (potential portability problem)</span>
<a name="l08476"></a>08476 <span class="preprocessor"></span>
<a name="l08477"></a>08477 <span class="preprocessor">#endif</span>
<a name="l08478"></a>08478 <span class="preprocessor"></span>
<a name="l08480"></a>08480 <span class="comment">//}</span>
<a name="l08481"></a>08481 <span class="comment">//-----------------------------------------------------------------------------------------------------------------</span>
<a name="l08482"></a>08482 
<a name="l08483"></a>08483 <span class="preprocessor">#endif // __TXLIB_H_INCLUDED</span>
<a name="l08484"></a>08484 <span class="preprocessor"></span>
<a name="l08485"></a>08485 <span class="comment">//=================================================================================================================</span>
<a name="l08486"></a>08486 <span class="comment">// EOF</span>
<a name="l08487"></a>08487 <span class="comment">//=================================================================================================================</span>
<a name="l08488"></a>08488                                                                                                                    
<a name="l08489"></a>08489                                                                                                                    
<a name="l08490"></a>08490                                                                                                                    
<a name="l08491"></a>08491               
<a name="l08492"></a>08492 
<a name="l08493"></a>08493 
<a name="l08494"></a>08494 
<a name="l08495"></a>08495 
<a name="l08496"></a>08496 
<a name="l08497"></a>08497 
<a name="l08498"></a>08498 
<a name="l08499"></a>08499 
</pre></div></div>
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="a00025.htm">TXLib.h</a>      </li>
<!-- --------------------------------------------------------------------------
  doxygen_htm.htm
  $Version: 00172a, Revision: 98 $
  $Copyright: (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru> $
  $Date: 2012-11-28 08:44:33 +0400 $
 -------------------------------------------------------------------------- -->

<table class="" width="100%"><tr valign="top">

  <td align="left">
    <small><a href="http://orphus.ru">Нашли ошибку? Выделите ее мышкой и нажмите Ctrl+ENTER. &copy;&#160;Orphus.ru.</a></small><br>
    <a href="http://orphus.ru" id="orphus" target="_blank"><img class = "footer" alt="Orphus" src="http://storage.ded32.net.ru/orphus.gif" border="0"></a>
    </td>

  <td align="right">
    Документация по TX Library. Дата: Tue Aug 12 2014 23:45:42. Создано&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3
    <img src="http://storage.ded32.net.ru/stat/TXLib-Help.chm" width=1px height=1px border="0">
    </td>
  </tr></table>

</ul>
</div>

<script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol)? "https://ssl." : "http://www."); document.write (unescape ("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); try { var pageTracker = _gat._getTracker ("UA-7927138-1"); pageTracker._trackPageview(); } catch (err) {}</script>
<script type="text/javascript" src="http://storage.ded32.net.ru/orphus.js"></script>

</body>
</html>
